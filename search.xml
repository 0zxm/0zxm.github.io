<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux指令</title>
      <link href="/2024/06/21/linux-zhi-ling/"/>
      <url>/2024/06/21/linux-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="第一章-linux基本命令"><a href="#第一章-linux基本命令" class="headerlink" title="第一章 linux基本命令"></a>第一章 linux基本命令</h2><h3 id="期末考试方式"><a href="#期末考试方式" class="headerlink" title="期末考试方式"></a>期末考试方式</h3><p>使用<code>exam</code>命令,输入数字选择选项或题目,答案默认保存,若想修改之前的答案,输入对应题号就行</p><h3 id="1-连接到学校主机10-188-2-251的帐号密码"><a href="#1-连接到学校主机10-188-2-251的帐号密码" class="headerlink" title="1.连接到学校主机10.188.2.251的帐号密码"></a>1.连接到学校主机10.188.2.251的帐号密码</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号:s223174</span><br><span class="line">密码:welcome</span><br></pre></td></tr></table></figure><h3 id="2-nano指令操作文件"><a href="#2-nano指令操作文件" class="headerlink" title="2.nano指令操作文件"></a>2.nano指令操作文件</h3><p>查看和编辑文件</p><h3 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h3><ol><li>PATH环境变量: 当shell执行时去哪找可执行文件,依次查找</li><li>PS1环境变量: shell命令提示符的样式</li><li>LANG环境变量: 与shell交互使用的语言</li><li>HOME环境变量: 当前用户工作目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locale -a 指令</span><br><span class="line">列出所有系统安装的语言</span><br></pre></td></tr></table></figure><p><img src="/2024/06/21/linux-zhi-ling/image-20240314232303614.png" alt="image-20240314232303614"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改PS1环境变量---shell提示符样式</span><br><span class="line">PS1=&#x27;HAPPY: \u $ &#x27;</span><br><span class="line">\u是特殊参数,表示用户名</span><br></pre></td></tr></table></figure><p>​<img src="/2024/06/21/linux-zhi-ling/image-20240314232634341.png" alt="image-20240314232634341"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加当前目录(.)到PATH变量</span><br><span class="line">注意:PATH变量以冒号分割(:),修改PATH环境变量只对本次生效,想要永久生效,可以修改.profile文件</span><br><span class="line">PATH=$PATH:.</span><br></pre></td></tr></table></figure><p><img src="/2024/06/21/linux-zhi-ling/image-20240314232909211.png" alt="image-20240314232909211"></p><h3 id="4-echo命令"><a href="#4-echo命令" class="headerlink" title="4.echo命令"></a>4.echo命令</h3><p>类似于打印命令</p><p><img src="/2024/06/21/linux-zhi-ling/image-20240314233218047.png" alt="image-20240314233218047"></p><h3 id="5-alias命令"><a href="#5-alias命令" class="headerlink" title="5.alias命令"></a>5.alias命令</h3><p>alias可以起别名或者修改命令默认的执方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alias 别名=源名</span><br><span class="line">例子alias list=ls</span><br><span class="line"></span><br><span class="line">alias命令展示所有已取(默认)别名</span><br><span class="line"></span><br><span class="line">unalias取消别名</span><br><span class="line">unalias list</span><br></pre></td></tr></table></figure><p><img src="/2024/06/21/linux-zhi-ling/image-20240314233930938.png" alt="image-20240314233930938"></p><h3 id="6-Linux中的源字符"><a href="#6-Linux中的源字符" class="headerlink" title="6.Linux中的源字符"></a>6.Linux中的源字符</h3><ul><li>$美元符: 表示取值</li><li>双引号: 对引号里面的源字符进行处理</li><li>单引号: 不对引号里面的源字符处理</li><li>\ 反斜杠: 最常见的转义字符,用于转义其他字符</li><li>*字符: 任意字符</li><li>?问号: ? 可以用来匹配任意单个字符…命令 <code>ls a?.txt</code> 会列出所有以 <code>a</code> 开头,后面跟着任意单个字符,并且以 <code>.txt</code> 结尾的文件</li><li><code>[限制条件]</code>: 限制范围,例如 <code>ls /tmp/[123].tmp</code>(区间写法)等价于 <code>ls /tmp/[1-3].tmp</code>(列举写法),表示取出tmp目录下的所有1到3以<code>tmp</code>为后缀的文件,注意变通</li><li>^或者!: 表示否定negative</li><li>~字符: 表示工作目录,等价于<code>echo $HOME</code></li></ul><p><img src="/2024/06/21/linux-zhi-ling/image-20240315000305427.png" alt="image-20240315000305427"></p><h3 id="7-基本命令"><a href="#7-基本命令" class="headerlink" title="7.基本命令"></a>7.基本命令</h3><ul><li><p>clear清屏命令</p></li><li><p>cp 源文件路径 目的路径</p><p>  例: cp hello hi</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240314234136513.png" alt="image-20240314234136513"><br> <img src="/2024/06/21/linux-zhi-ling/cp.jpg" alt="alt text"></p></li><li><p>type xxx命令</p><p>  查看指令类型</p></li></ul><p><img src="/2024/06/21/linux-zhi-ling/image-20240314234306905.png" alt="image-20240314234306905"></p><ul><li><p>rm 文件路径</p><p>  例: rm hi  (hi文件已经存在)</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240314234422632.png" alt="image-20240314234422632"></p></li><li><p>ls指令(参数 -l等)</p><p>  例: ls -l hello</p><ul><li><code>-i</code>参数,显示更详细信息</li></ul><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240314234557355.png" alt="image-20240314234557355"></p></li><li><p>history命令</p><p>  显示shell命令的历史记录</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240315000404594.png" alt="image-20240315000404594"></p></li><li><p>!!直接执行上条命令,!加编号执行history里的第几条记录</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240315000542358.png" alt="alt text"></p></li><li><p><code>su</code> 和 <code>sudo</code>超级用户(管理员)<br><code>su</code> : 把身份切换到超级用户(su之后就切换到root用户,要求输入的是root用户口令)<br><code>su 用户名</code> : 切换到其他用户<br><code>sudo</code> : 以超级用户的身份执行某条命令(sudo要求输入口令时,输入的是当前用户的口令)<br>值得注意的是,只有被指定的用户才能使用sudo命令,在&#x2F;etc&#x2F;sudoers文件里的才被允许<br><img src="/2024/06/21/linux-zhi-ling/sudoers.png" alt="alt text"></p></li><li><p><code>whoami</code>查看当前用户</p></li><li><p><code>id</code>命令或<code>groups</code>显示所属组</p></li><li><p><code>hostname</code>查看主机名</p><ol><li><code>hostname</code></li><li><code>hostname 想要修改的主机名</code></li></ol></li><li><p><code>uname</code>查看操作系统内核<br><img src="/2024/06/21/linux-zhi-ling/uname.png" alt="alt text"></p></li><li><p><code>free</code>查看内存<br><code>free -h</code>参数表示human readable 便于人类阅读的<br><img src="/2024/06/21/linux-zhi-ling/free.png" alt="alt text"></p></li><li><p><code>date</code>显示当前系统时间<br><img src="/2024/06/21/linux-zhi-ling/date.png" alt="alt text"></p></li><li><p><code>vi</code>命令查看<code>/proc</code>系统信息文件夹下文件<br>vi &#x2F;proc&#x2F;cpuinfo<br><img src="/2024/06/21/linux-zhi-ling/proc.png" alt="alt text"></p></li><li><p><code>passwd</code>修改口令命令<br>以前存放在&#x2F;etc&#x2F;passwd下,现在存放在&#x2F;etc&#x2F;shadow文件</p></li><li><p><code>wall</code>广播命令<br>您可以使用<code>wall</code>命令来向所有登录用户发送消息。例如，要发送一句话给所有登录用户，您可以在终端中输入以下命令：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;这是一条消息&quot; | wall</span><br></pre></td></tr></table></figure><p>这将向所有登录用户显示消息“这是一条消息”。请注意，您需要具有适当的权限才能向所有用户发送消息。</p><ul><li><p><code>w</code>或<code>who</code>查看所有当前登陆用户<br><img src="/2024/06/21/linux-zhi-ling/who.png" alt="alt text"></p></li><li><p><code>seq</code>生成数字序列<br><img src="/2024/06/21/linux-zhi-ling/seq.png" alt="alt text"></p></li></ul><h3 id="8-shell命令执行的优先级"><a href="#8-shell命令执行的优先级" class="headerlink" title="8.shell命令执行的优先级"></a>8.shell命令执行的优先级</h3><ol><li>alias别名</li><li>内置命令</li><li>可执行文件</li></ol><h3 id="9-源字符使用实例-第一次小测"><a href="#9-源字符使用实例-第一次小测" class="headerlink" title="9.源字符使用实例(第一次小测)"></a>9.源字符使用实例(第一次小测)</h3><ol><li>list files whose name start with a,b or c <ul><li>解答 : <code>ls [abc]*</code></li></ul></li><li>list files whose name don’t start with a digit<ul><li>解答 : <code>ls [^0-9]*</code></li></ul></li><li>list all files whose names only contains two characters<ul><li>解答 : <code>ls ??</code></li></ul></li><li>list all the file whose name contain a $<ul><li>解答 : <code>ls *\$*</code></li></ul></li><li>Which file stores the user information?<ul><li>解答 : <code>/etc/passwd</code></li></ul></li><li>Which file will be executed once when user login<ul><li>解答 : <code>.profile</code>或<code>.bash_login</code></li></ul></li><li>Create an alias called “la” for the command “ls -a”<ul><li>解答 : <code>alias la=&#39;ls -a&#39;</code></li></ul></li><li>The names of the directories that a shell searches to find the file corresponding to an external command are stored in the shell variable named<ul><li>解答 : <code>PATH</code></li></ul></li></ol><h3 id="10-链接命令"><a href="#10-链接命令" class="headerlink" title="10.链接命令"></a>10.链接命令</h3><ol><li>软链接<br>类似于Windows下的快捷方式，当一个源文件的目录层级比较深，我们想要方便使用它可以给源文件创建一个软链接,方便文件操作<br><img src="/2024/06/21/linux-zhi-ling/link.png" alt="alt text"></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 源文件路径 软链接名字</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ln -s</td><td>创建软链接</td></tr></tbody></table><h3 id="11-解压缩命令"><a href="#11-解压缩命令" class="headerlink" title="11.解压缩命令"></a>11.解压缩命令</h3><ul><li>.gz和.bz2的压缩包需要使用<code>tar</code>命令来压缩和解压缩</li><li>不加z参数，就没有压缩，只是打包成一个文件</li></ul><table><thead><tr><th>压缩格式</th><th>说明</th><th>压缩包后缀</th></tr></thead><tbody><tr><td>bz2</td><td>常见的压缩文件格式，由bzip2生成，具有高压缩率</td><td>.bz2</td></tr><tr><td>gz</td><td>常见的压缩文件格式，由gzip生成，广泛应用于Linux和Unix系统</td><td>.gz</td></tr></tbody></table><table><thead><tr><th>tar命令选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>创建打包文件</td></tr><tr><td>-v</td><td>显示打包或者解包的详细信息</td></tr><tr><td>-f</td><td>指定文件名称, 必须放到所有选项后面</td></tr><tr><td>-z</td><td>压缩(.gz)</td></tr><tr><td>-j</td><td>压缩(.bz2)</td></tr><tr><td>-x</td><td>解压缩</td></tr><tr><td>-C</td><td>解压缩到指定目录</td></tr></tbody></table><h3 id="12-关机和重启命令的使用"><a href="#12-关机和重启命令的使用" class="headerlink" title="12.关机和重启命令的使用"></a>12.关机和重启命令的使用</h3><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>shutdown -h now</code></td><td align="center">立刻关机。这个命令会立即关闭系统，并断开所有用户的连接。</td></tr><tr><td align="center"><code>reboot</code></td><td align="center">重启。这个命令会重新启动系统，相当于按下计算机的重启按钮。</td></tr></tbody></table><h3 id="13-远程登陆，远程拷贝命令"><a href="#13-远程登陆，远程拷贝命令" class="headerlink" title="13.远程登陆，远程拷贝命令"></a>13.远程登陆，远程拷贝命令</h3><h4 id="13-1-ssh命令的使用"><a href="#13-1-ssh命令的使用" class="headerlink" title="13.1 ssh命令的使用"></a>13.1 ssh命令的使用</h4><p>安装步骤:<br>① 假如Ubuntu作为服务端,需要安装ssh服务端软件,执行命令: sudo apt-get install openssh-server<br>② 客户端电脑如果是macOS系统则不需要安装ssh客户端软件，默认已经安装过了，直接可以使用ssh命令<br>③ 客户端电脑如果是Windows系统则需要安装OpenSSH for Windows这个软件</p><h4 id="13-2-scp命令的使用"><a href="#13-2-scp命令的使用" class="headerlink" title="13.2 scp命令的使用"></a>13.2 scp命令的使用</h4><p><code>scp</code> 是基于 SSH 进行安全的远程文件拷贝的命令，也就是说需要保证服务端和客户端电脑安装了相应的 SSH 软件。</p><p><strong>scp命令格式:</strong></p><ol><li><p>远程拷贝文件:</p><ul><li><code>scp 本地文件 远程服务器用户名@远程服务器ip地址:指定拷贝到远程服务器的路径</code></li><li><code>scp 远程服务器用户名@远程服务器ip地址:远程服务器文件 指定拷贝到本地的路径</code></li></ul></li><li><p>远程拷贝目录:</p><ul><li><code>scp -r 本地目录 远程服务器用户名@远程服务器ip地址:指定拷贝到远程服务器的路径</code></li><li><code>scp -r 远程服务器用户名@远程服务器ip地址:远程服务器目录 指定拷贝到本地的路径</code></li><li><code>-r</code> 表示递归拷贝整个目录<br><img src="/2024/06/21/linux-zhi-ling/scp.png" alt="alt text"></li></ul></li><li><p><code>ssh</code>命令是远程登录主机电脑，相当于直接操作的是远程电脑。</p></li><li><p><code>scp</code>命令是可以把本机文件拷贝到远程主机，也可以把远程主机文件远程拷贝的本机，注意:拷贝文件夹需要加<code>-r</code>选项。</p></li><li><p>大量的文件上传和下载可以通过可视化工具<code>FileZilla</code>来完成。</p></li></ol><h5 id="软件安装和卸载"><a href="#软件安装和卸载" class="headerlink" title="软件安装和卸载"></a>软件安装和卸载</h5><table><thead><tr><th>安装方式</th><th>说明</th></tr></thead><tbody><tr><td>离线安装：deb文件格式安装</td><td>从本地存储介质安装软件，使用Debian软件包格式安装软件</td></tr><tr><td>在线安装：apt-get方式安装</td><td>通过网络下载并安装软，使用apt-get命令从仓库安装软件</td></tr></tbody></table><ul><li>更改镜像源<br>因为使用 apt-get 命令默认是从国外的服务器下载安装软件的，会导致下载安装速度很慢，所以需要更改成国内的镜像源服务器</li><li>镜像源就是下载软件来源的服务器。</li><li>apt-get 方式卸载命令: sudo apt-get remove 安装包名</li></ul><h2 id="第四章-文件和文件系统"><a href="#第四章-文件和文件系统" class="headerlink" title="第四章 文件和文件系统"></a>第四章 文件和文件系统</h2><p>使用文件系统的三个步骤：分区、格式化、挂载</p><ul><li>Linux系统中把一切可以用字节流传输的都看作一个文件</li><li>Linux系统里面的文件系统类型ext2 xfs jfs ext3 ext4</li><li>Windows系统里的文件系统类型: ntfs fat32<br><img src="/2024/06/21/linux-zhi-ling/unix_device.png" alt="alt text"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一块SATA硬盘./dev/sda</span><br><span class="line">第二块SATA硬盘 /dev/sdb</span><br><span class="line">fdisk /dev/sdb  分区指令</span><br><span class="line">mkfs -t  ext4 /dev/sdb  格式化指令,-t参数表示要创建什么样的文件系统</span><br></pre></td></tr></table></figure></li></ul><h3 id="Linux系统下的重要文件"><a href="#Linux系统下的重要文件" class="headerlink" title="Linux系统下的重要文件"></a>Linux系统下的重要文件</h3><ul><li><code>/etc/passwd</code>: 每个用户在该文件中都有一行记录，其中包含了用户的登录名、密码（通常是一个指向加密密码的指针）、用户ID、组ID、用户信息、用户主目录和默认shell等信息<ol><li>&#x2F;usr&#x2F;bin&#x2F;chsh可以改变默认用户登陆的shell</li><li>&#x2F;etc&#x2F;passwd和&#x2F;usr&#x2F;bin&#x2F;passwd是两个不同文件,一个是记录用户口令等信息的文本文件,另一个是改变用户口令的可执行文件</li></ol></li><li><code>/dev/null</code>是Unix和类Unix操作系统（包括Linux）中的一个特殊文件，也被称为“空设备”或“空设备文件”。<ol><li>这个文件的主要特点是会丢弃所有写入到它的数据，就好像这些数据进入了一个黑洞一样。同时，当你尝试从&#x2F;dev&#x2F;null读取数据时，它会立即返回一个文件结束（EOF）标记。</li><li>在命令行操作中，&#x2F;dev&#x2F;null常被用作丢弃不需要的输出。例如，当你运行一个命令但并不关心其输出时，你可以将输出重定向到&#x2F;dev&#x2F;null，这样命令的输出就不会显示在终端或写入到其他文件。这对于清理不需要的日志信息或避免在脚本中产生垃圾数据非常有用。</li><li>简单来说，&#x2F;dev&#x2F;null就像一个数据的“黑洞”，任何写入其中的数据都会消失无踪，而读取它则不会得到任何实际内容。</li></ol></li></ul><h3 id="mount挂载命令"><a href="#mount挂载命令" class="headerlink" title="mount挂载命令"></a><code>mount</code>挂载命令</h3><ul><li>mount [-t vfstype][-o options] device dir</li><li>vfstype :vfat(window fat32 format)、ext3、ext4、iso9660(cdrom format)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdc1 /mnt</span><br><span class="line">umount .mnt</span><br><span class="line">umount /dev/sdc1</span><br></pre></td></tr></table></figure><img src="/2024/06/21/linux-zhi-ling/mount.png" alt="alt text"></li></ul><h3 id="Types-of-Files文件种类"><a href="#Types-of-Files文件种类" class="headerlink" title="Types of Files文件种类"></a>Types of Files文件种类</h3><ul><li><code>Simple/ordinary Files(普通文件)</code></li><li><code>Directory Files(目录文件)</code><br> 目录文件只包含两个字段:一个包含目录下的所有文件名,另一个是索引节点号<br> <img src="/2024/06/21/linux-zhi-ling/direct.png" alt="alt text"></li><li><code>Link Files(链接文件)</code><br>A Link File is created by the system when a symbolic linkin created to an existing file.</li><li><code>Special(Device) Files(设备文件)</code><br>A special File is a means of accessinghardware devicesincluding the keyboard, hard disk, Cb-ROM drive, tapedrive andprinter.<ol><li>character special files(字符设备)</li><li>block special files(块设备)</li></ol></li><li><code>Named Pipe(FIFO)</code><br>Tools that enable processes to communicate with each other</li><li>Socket(网络插口)</li></ul><h3 id="动态库和静态库文件"><a href="#动态库和静态库文件" class="headerlink" title="动态库和静态库文件"></a>动态库和静态库文件</h3><ul><li>widows下</li></ul><ol><li>动态库.dll,不把代码打包进可执行文件,只是链接</li><li>静态库.o</li></ol><ul><li>linux</li></ul><ol><li>动态.so</li><li>静态.a</li></ol><h3 id="Linux下的目录结构"><a href="#Linux下的目录结构" class="headerlink" title="Linux下的目录结构"></a>Linux下的目录结构</h3><p><img src="/2024/06/21/linux-zhi-ling/directory_struct.jpg" alt="alt text"></p><h3 id="和文件操作相关的命令"><a href="#和文件操作相关的命令" class="headerlink" title="和文件操作相关的命令"></a>和文件操作相关的命令</h3><ul><li><code>df</code>命令  显示分区使用情况(挂载)<br><img src="/2024/06/21/linux-zhi-ling/df.png" alt="alt text"></li><li><code>du</code>命令  查看文件分配的存储空间大小<br><img src="/2024/06/21/linux-zhi-ling/du.png" alt="alt text"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -s /etc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录占用空间</span></span><br></pre></td></tr></table></figure></li><li><code>mkdir</code>命令  创建目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p dira/dirb</span><br><span class="line">参数p表示创建路径上的所有目录</span><br></pre></td></tr></table></figure></li><li><code>rmdir</code>命令  只能删除空目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir dira</span><br><span class="line">rmdir dira</span><br></pre></td></tr></table></figure></li><li><code>ls</code>命令 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -a 目录或文件名</span><br><span class="line">参数a表示显示出所有以.开头的隐藏文件</span><br><span class="line">ls -l 目录或文件名</span><br><span class="line">参数p表示以列表的形式列出详细信息</span><br></pre></td></tr></table></figure><img src="/2024/06/21/linux-zhi-ling/ls-l.png" alt="alt text"><br>第一个字段第一个字符表示文件类型,<code>-</code>表示普通文件<br>第二个字段: 链接数,有多少个条目指向了这个文件的索引节点<br>第三个字段:所属用户<br>第四个字段:所属组<br>第五个字段:大小(以字节为单位)<br>第六个字段:文件最后修改时间<br>第七个字段:文件名<br><img src="/2024/06/21/linux-zhi-ling/Determining_File_Attributes.png" alt="alt text"></li><li><code>touch</code>命令  创建文件或修改文件最后修改时间<br>如果文件不存在,则创建文件,否则修改最后修改时间</li><li><code>rm</code>命令  删除文件或目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -i file1</span><br><span class="line">参数i表示交互式的</span><br><span class="line">rm -rf dirb</span><br><span class="line">参数r表示递归删除子目录在删除所有文件</span><br><span class="line">参数f表示强制删除</span><br></pre></td></tr></table></figure></li><li><code>mv</code>命令  移动文件或者文件重命名</li><li><code>file</code>命令  查看文件详细信息</li><li><img src="/2024/06/21/linux-zhi-ling/file.png" alt="alt text"></li></ul><h3 id="逻辑卷管理-好处-可以动态扩充"><a href="#逻辑卷管理-好处-可以动态扩充" class="headerlink" title="逻辑卷管理(好处:可以动态扩充)"></a>逻辑卷管理(好处:可以动态扩充)</h3><ul><li>挂载: 把一个硬件设备和对应的目录关联起来</li><li>硬盘变成可用存储空间要经过三步<ol><li>分区</li><li>格式化</li><li>挂载</li></ol></li><li>逻辑卷管理软件工具:用多块硬盘上的分区虚拟成一个分区</li></ul><p> 逻辑卷管理软件工具，如逻辑卷管理器（LVM），允许用户将多块硬盘上的分区虚拟成一个分区，从而更有效地管理和使用硬盘资源。以下是使用LVM将多块硬盘上的分区虚拟成一个分区的基本步骤：</p><ol><li><strong>准备磁盘并标记物理卷</strong>：首先，你需要准备要进行逻辑卷管理的硬盘分区，并将这些分区标记为物理卷。物理卷是LVM管理的基本单位，可以是一个硬盘分区或者整个硬盘。</li><li><strong>创建卷组</strong>：接下来，你需要创建一个卷组。卷组是由一个或多个物理卷组成的集合，它提供了逻辑卷管理的框架。</li><li><strong>创建逻辑卷</strong>：在卷组中，你可以创建逻辑卷。逻辑卷是最终提供给操作系统使用的虚拟分区，它们可以跨多个物理卷或卷组。</li><li><strong>格式化逻辑卷</strong>：创建逻辑卷后，你需要对其进行格式化，以便操作系统可以识别和使用。</li><li><strong>挂载逻辑卷</strong>：最后，将逻辑卷挂载到操作系统的文件系统中，这样你就可以像访问其他分区一样访问逻辑卷上的数据。</li></ol><p>此外，LVM还提供了许多其他功能，如逻辑卷的扩容、缩小、迁移和备份等，这些都可以在不中断数据访问的情况下进行。</p><h2 id="第五章-文件安全"><a href="#第五章-文件安全" class="headerlink" title="第五章 文件安全"></a>第五章 文件安全</h2><h3 id="1-Protection-based-on-AccessPermission"><a href="#1-Protection-based-on-AccessPermission" class="headerlink" title="1.Protection based on AccessPermission"></a>1.Protection based on AccessPermission</h3><ul><li>Types of users <ol><li>User&#x2F;owner(文件拥有者)</li><li>groups(同组用户)</li><li>others(其他人)</li></ol></li><li>Types of Access Permissions<ul><li>Read, write, and execute(执行)</li></ul></li><li>Access Permissions for Directories<ul><li>Read: list the files</li><li>Write: create or remove directories and files</li></ul></li></ul><p>所以,对于每个文件,三个身份和三种权限组成九个权限位<br><img src="/2024/06/21/linux-zhi-ling/file_permission.png" alt="alt text"></p><ul><li>目录也有权限<ol><li>目录的x执行权限:所有要进入到目录里的操作,包括(<code>cd</code>命令,<code>touch</code>命令,删除目录里的文件)<br>目录文件只包含两个字段:一个包含目录下的所有文件名,另一个是索引节点号<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想要查看目录权限要加参数d</span></span><br><span class="line">ls -ld dira</span><br></pre></td></tr></table></figure><img src="/2024/06/21/linux-zhi-ling/ls_view_dir.png" alt="alt text"></li></ol></li></ul><h3 id="2-改变权限或者所属组的命令"><a href="#2-改变权限或者所属组的命令" class="headerlink" title="2. 改变权限或者所属组的命令"></a>2. 改变权限或者所属组的命令</h3><ul><li><code>chgrp  组1 文件或目录路径</code>: 改变组</li><li><code>chown newowner 文件</code>: 改变所属用户</li><li><code>id user</code>: Find the user id</li><li><code>group user</code>: Find the user group</li></ul><h3 id="3-Changing-File-Access-Privileges"><a href="#3-Changing-File-Access-Privileges" class="headerlink" title="3.Changing File Access Privileges"></a>3.Changing File Access Privileges</h3><p><code>chmod  权限语句 文件或目录对象</code>命令:改变文件权限位<br>权限语句由三部分组成:</p><ul><li>例如 <code>u-x</code><br>第一部分是要修改谁的权限:a表示所有,u表示owner,g表示group,o表示others,ugo也表示所有<br><img src="/2024/06/21/linux-zhi-ling/chmod.png" alt="alt text"></li><li>也可以用八进制数来代替权限语句,能够一次性设定所有文件权限位<br>如要给一个文件设置rwxr-x—权限,每三位(111 101 000)转化成八进制数就是750,所以命令就是<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 750 hello</span><br></pre></td></tr></table></figure><img src="/2024/06/21/linux-zhi-ling/rm_file_withoutpermisn.png" alt="alt text"></li></ul><h3 id="Default-file-access-privileges-默认文件权限"><a href="#Default-file-access-privileges-默认文件权限" class="headerlink" title="Default file access privileges 默认文件权限"></a>Default file access privileges 默认文件权限</h3><ul><li>通过掩码值umask来设定默认访问权限</li><li><code>umask</code>命令  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示掩码值</span></span><br><span class="line">input: umask</span><br><span class="line">ouput: 0022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置掩码值</span></span><br><span class="line">input: umask 077</span><br></pre></td></tr></table></figure></li><li>umask怎么决定文件访问权限<ol><li>The access permission value onexecutable file or directory iscomputed by(针对目录或者可执行文件): <code>file access permission=777-mask</code></li><li>The access permission value on otherfile is computed by(对于普通文件):<code>file access permission = 666-mask</code><br><img src="/2024/06/21/linux-zhi-ling/umask01.png" alt="alt text"></li></ol></li></ul><p><img src="/2024/06/21/linux-zhi-ling/umask02.png" alt="alt text"></p><h3 id="三个特殊权限位"><a href="#三个特殊权限位" class="headerlink" title="三个特殊权限位"></a>三个特殊权限位</h3><ul><li><p><code>SUID</code>位<br><img src="/2024/06/21/linux-zhi-ling/suid.png" alt="alt text"><br>If this bit is set for a file containing an executable program for a command,the command takes on the privileges of the owner of the file when it executes.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置suid位 --&gt;</span><br><span class="line">sudo chmod u+s /usr/bin/passwd</span><br></pre></td></tr></table></figure></li><li><p><code>SGID</code>位<br>执行命令时,会把身份临时切换成同组成员(groups)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置sgid位 --&gt;</span><br><span class="line">sudo chmod g+s /usr/bin/passwd</span><br></pre></td></tr></table></figure></li><li><p><code>STICKY</code>黏着位(对于目录)<br> 设置黏着位意味着在对于一些共享目录(所有人都能创建文件)时,不同用户只能删除自己的文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置/取消设置黏着位 --&gt;</span><br><span class="line">chmod +t /tmp</span><br><span class="line">chmod -t /tmp</span><br></pre></td></tr></table></figure></li></ul><h2 id="第六章-File-Processing"><a href="#第六章-File-Processing" class="headerlink" title="第六章 File Processing"></a>第六章 File Processing</h2><h3 id="view-complete-file"><a href="#view-complete-file" class="headerlink" title="view complete file"></a>view complete file</h3><h4 id="显示文件全部内容"><a href="#显示文件全部内容" class="headerlink" title="显示文件全部内容"></a>显示文件全部内容</h4><ul><li><code>cat</code>命令 <ol><li>参数<code>n</code>: 显示行号</li><li><code>cat</code>命令不加文件时,默认从标准输入中读取数据(等待键盘输入)</li></ol></li><li><code>nl</code>命令</li></ul><h4 id="分页查看文本文件"><a href="#分页查看文本文件" class="headerlink" title="分页查看文本文件"></a>分页查看文本文件</h4><ul><li><code>more</code>或<code>less</code>命令<ol><li>输入<code>/s22</code>会在文件中查找s22相对应文字</li><li>按Q退出</li></ol></li><li><code>od</code>命令 显示不可见字符<br><img src="/2024/06/21/linux-zhi-ling/od.png" alt="alt text"><ol><li>参数<code>-c</code>表示以字符形式显示,例如空行会变成<code>\n</code></li><li><code>-h</code>以十六进制显示</li></ol></li></ul><h4 id="Viewing-the-head-or-tail-of-a-file"><a href="#Viewing-the-head-or-tail-of-a-file" class="headerlink" title="Viewing the head or tail of a file"></a>Viewing the head or tail of a file</h4><ul><li><code>head</code>默认显示文件前五行<ol><li>参数<code>-n5</code>表示显示文件开头前5行,数字可任意改,<code>n</code>可以不写</li></ol></li><li><code>tail</code>默认显示文件最后五行<ol><li>参数<code>-5</code>表示显示文件开头前5行,数字可任意改</li><li>参数<code>-f</code>实时刷新 ctrl+c退出</li></ol></li><li><code>wc</code> 查看文件大小的命令(Determining file size)<br> <img src="/2024/06/21/linux-zhi-ling/wc.png" alt="alt text"><ol><li>参数<code>-l</code>表示只显示行数</li><li><code>-w</code>只显示单词数</li><li><code>-c</code>表示只显示字符数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wc -l /tmp/hello.cpp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统里有多少个用户</span></span><br><span class="line">wc -l /etc/passwd</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="比较两个文本文件"><a href="#比较两个文本文件" class="headerlink" title="比较两个文本文件"></a>比较两个文本文件</h4><ul><li><code>diff</code>命令<br>diff [options] [file1] [file2]</li></ul><h3 id="查找文件命令"><a href="#查找文件命令" class="headerlink" title="查找文件命令"></a>查找文件命令</h3><h4 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h4><ul><li><code>find</code>命令</li><li><code>find</code> 后面跟一个目录,表示在此目录中寻找,  </li><li>expression:<ul><li><code>-name</code> pattern</li><li><code>-size</code> +&#x2F;-N  加号&#x2F;减号表示 大小&#x2F;小于 大于N的文件</li><li><code>-exec</code> or <code>-ok</code> CMD 表示对find找到的结果每一个都执行一条命令CMD,exec和ok的区别在于ok每一次都要询问 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp  \( -name &quot;*.txt&quot; -a -size 0 \) -exec ls -l &#123;&#125; \; 2&gt;/dev/null</span><br></pre></td></tr></table></figure> <img src="/2024/06/21/linux-zhi-ling/find_exec.png" alt="alt text"></li><li><code>\( 组合 \)</code> 使用括号来把多个条件组合在一起 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp  \( -name &quot;*.txt&quot; -a -size 0 \) 2&gt;/dev/null</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li>通配符的使用,通配符是一种特殊语句，主要有星号(*)和问号(?)，用来模糊搜索文件</li></ol><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>代表0个或多个任意字符</td></tr><tr><td>?</td><td>代表任意一个字符</td></tr></tbody></table><p><img src="/2024/06/21/linux-zhi-ling/find.png" alt="alt text"><br>通配符不仅能结合 find 命令使用，还可以结合其它命令使用,比如: ls、mv、cp 等，这里需要注意只有find命令使用通配符需要加上引号。<br><img src="/2024/06/21/linux-zhi-ling/dev_null.png" alt="alt text"></p><h4 id="命令文件"><a href="#命令文件" class="headerlink" title="命令文件"></a>命令文件</h4><ul><li><code>whereis</code> 查找命令文件，会找出可执行文件的位置和帮助文档的位置</li><li><code>which</code> 查找命令文件</li></ul><h3 id="对文件内容操作"><a href="#对文件内容操作" class="headerlink" title="对文件内容操作"></a>对文件内容操作</h3><h4 id="去掉重复内容"><a href="#去掉重复内容" class="headerlink" title="去掉重复内容"></a>去掉重复内容</h4><ul><li><code>uniq</code>命令<br>uniq命令只能除去中间没有其他行的重复行</li><li>参数<ol><li><code>-c</code> 统计连续重复出现的次数</li><li><code>-d</code> 显示重复的行</li><li><code>uniq 源文件名a 文件名b</code>表示把去重结果输出到文件中<br><img src="/2024/06/21/linux-zhi-ling/uniq.png" alt="alt text"></li></ol></li></ul><h4 id="sort对文件内容进行排序"><a href="#sort对文件内容进行排序" class="headerlink" title="sort对文件内容进行排序"></a><code>sort</code>对文件内容进行排序</h4><ul><li><code>sort</code> 排序</li><li>参数<ul><li><code>-k3</code> 表示按第3个字段来排序</li><li><code>-n</code> 默认按字符串来排，看编码，想要把字段当作数字来排序，加参数<code>-n</code></li><li><code>-r</code> 逆序排列 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -nrk4 /tmp/student_record</span><br></pre></td></tr></table></figure></li><li><code>-t&quot;分隔符&quot;</code> sort命令默认按空格分割字段，参数<code>-t</code>可以切换分隔符 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -nrk4 -t&quot;:&quot; /tmp/student_record</span><br></pre></td></tr></table></figure></li><li><code>-f</code> 表示不区分大小写</li></ul></li></ul><h4 id="cut命令剪切文件内容"><a href="#cut命令剪切文件内容" class="headerlink" title="cut命令剪切文件内容"></a><code>cut</code>命令剪切文件内容</h4><ul><li>cut -blist [-n][file-list]</li><li>cut -clist [file-list]</li><li>cut -flist [-dchar][-s][file-list]</li><li>参数<ul><li><code>-f参数1,参数2...</code>  表示切割出第（参数）列字段</li><li><code>-d&quot;分隔符&quot;</code> <code>cut</code>命令默认使用<code>TAB制表符</code>来作为分隔符，加<code>-d</code>参数可以修改分隔符<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -d&quot;:&quot; -f2 /etc/passwd | head -3</span><br></pre></td></tr></table></figure></li><li><code>-c参数1,参数2</code> 表示切割出第（参数）列字符</li></ul></li></ul><h4 id="拼接命令"><a href="#拼接命令" class="headerlink" title="拼接命令"></a>拼接命令</h4><ul><li><code>paste 文件a 文件b</code>命令 简单的把文件a和b按行拼接，第一行拼第一行…</li><li><code>join</code>命令 实现按关键字拼接</li></ul><h4 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h4><p><code>grep</code>命令: 查找或搜索文件内容</p><ul><li><code>grep</code> 查找内容 文件名</li></ul><ol><li>grep命令及选项的使用</li></ol><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-v</td><td>显示不包含匹配文本的所有行</td></tr><tr><td>-n</td><td>显示匹配行号</td></tr><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-l</td><td>只列出包含内容的文件列表，不关心内容</td></tr><tr><td>-c</td><td>只计数，对每个文件进行计数操作</td></tr></tbody></table><ol start="2"><li>grep命令结合正则表达式使用</li></ol><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>(行)以指定字符开头</td></tr><tr><td>$</td><td>(行)以指定字符结尾</td></tr><tr><td>.</td><td>匹配任意一个非换行符的字符</td></tr><tr><td>*</td><td>代表前一个字符可以出现一次或者任意多次</td></tr><tr><td>[]</td><td>代表集合的意思,eg. [Hh]ello</td></tr><tr><td><code>[^]</code></td><td>方括号里上箭头表示取反,匹配除了括号里的其他所有字符</td></tr><tr><td><code>\&lt;</code></td><td>表示一个单词的开头,或者可以用grep的参数<code>-w</code></td></tr><tr><td><code>\&gt;</code></td><td>表示一个单词的结束</td></tr><tr><td><code>\&#123;a,b\&#125;</code></td><td>表示前一个字符出现a到b次,a为0表示至多出现b次,b不填表示至少出现a次以上</td></tr><tr><td><code>| </code></td><td>表示或,要用grep的升级版egrep</td></tr><tr><td><code>?</code></td><td>出现一次或者不出现</td></tr><tr><td><code>+</code></td><td>表示前一个字符至少出现一次</td></tr><tr><td><code>()</code></td><td>Grouping</td></tr><tr><td><code>\</code></td><td>转义斜杠</td></tr></tbody></table><p><img src="/2024/06/21/linux-zhi-ling/re.png" alt="alt text"></p><p><img src="/2024/06/21/linux-zhi-ling/grep.png" alt="alt text"></p><ul><li>通过 grep 命令可以在指定文件中查找指定搜索内容，这里扩展一下，grep 还可以查找管道中的内容<br>比如:ls&#x2F;| grep ‘lib’</li><li>在使用 grep 命令时，还可以省略查找内容的引号比如:ls&#x2F;| grep lib , grep hello 1.txt</li></ul><h4 id="对文本批量修改"><a href="#对文本批量修改" class="headerlink" title="对文本批量修改"></a>对文本批量修改</h4><ul><li><p><code>sed</code>流处理<br> 对文件流水线处理,读一行处理一行sed ‘[address]command’ filename(s)</p><ul><li>根据行号选中行处理<ol><li><code>d</code> 删除操作对1到3行进行删除操作<code>sed &#39;1,3d&#39; filename</code></li></ol></li><li>根据正则表达式选中包含匹配项的行处理,<code>sed &#39;/正则表达式/&#39; file</code><ol><li><code>s</code>替换操作 对计算机系CS的学生替换成EECS<code>sed &#39;s/&lt;CS/EECS/&#39; file</code></li><li><code>s///g</code>全局替换操作 把数字替换成*屏蔽成绩<code>sed &#39;s/[0-9]/*/g&#39; file</code></li><li><code>p</code>打印前三行<code>sed &#39;1,3p&#39; file</code></li><li><code>a</code>在匹配行后加一行内容<code>sed &#39;/\&lt;CS/a =====High Salary=====&#39; file</code></li><li><code>i</code>在匹配后前加一行内容<code>sed &#39;/\&lt;CS/i =====High Salary=====&#39; file</code></li><li><code>!</code>否定</li></ol></li><li><code>-n</code>参数 表示只执行操作,不默认输出缓冲区</li><li><code>-i</code>参数（或 <code>--in-place</code>）是一个非常重要的选项，它允许你直接修改输入文件，而不是仅仅将结果发送到标准输出。</li></ul><ul><li><code>sed</code>格式<br>  <code>sed &#39;/正则表达式/s#原文#替换文本#&#39;</code><br>  <code>sed &#39;/^[[:space:]]*$/d&#39; output_sort.txt</code>严格删除所有空行<code>[[:space:]]</code>这是sed中的一个字符类，表示空白字符。它匹配任何空白字符，如空格、制表符、换行符、回车符等</li></ul></li><li><p><code>awk</code>命令</p><ul><li><code>awk</code>命令里的正则表达式格式为<code>awk &#39;/re/&#39; filename</code><br> <img src="/2024/06/21/linux-zhi-ling/awk01.png" alt="alt text"></li><li>在awk命令中,美元符号表示字段的意思<code>$</code><br> <img src="/2024/06/21/linux-zhi-ling/awk_$.png" alt="alt text"></li><li><code>F</code>参数指定分割符<ul><li>默认情况下，awk 使用空格或制表符作为字段分隔符</li><li>如果你有一个以逗号, 分隔的文件，并希望使用 awk 来处理它，你可以这样指定分隔符:<code>awk -F, &#39;&#123;print $1, $2&#125;&#39; filename</code></li><li>如果有都多个分隔符,用<code>[]</code>括起来,例如<code>-F&#39;[ab]&#39;</code></li></ul></li><li><code>$1~</code>字段匹配<ul><li><code>awk &#39;$2~/^D/&#123;print $1,$2&#125;&#39;</code>表示对字段2进行匹配,如果是以D开头的,就打印字段1,字段2</li><li><code>awk &#39;$2!~/^D/&#123;print $1,$2&#125;&#39;</code>表示对字段2不进行匹配以D开头的,就打印字段1,字段2</li></ul></li></ul></li><li><p><code>tr</code>命令(映射替换)</p><ul><li>tr 被映射域 映射域(可用区间表示)<br> <img src="/2024/06/21/linux-zhi-ling/tr.png" alt="alt text"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/\&lt;CS/&#123;print $1,$2&#125;&#x27; /tmp/student_record</span><br><span class="line"></span><br><span class="line">awk &#x27;$2~/^D/&#123;print $1,$2&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$2</span>~/^D/：这是一个条件，它检查第二列（由字段分隔符分隔，默认为空格或制表符）是否以字母 <span class="string">&quot;D&quot;</span> 开头,~ 是 awk 中用于模式匹配的操作符</span></span><br><span class="line"></span><br><span class="line">awk -F: &#x27;$2 !~ /916/ &#123;print $1&#125;&#x27; /tmp/donors</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这条命令将根据冒号分隔符(:)来解析文件中的内容，并打印出第二个字段中不包含916区号的人的名字。</span></span><br><span class="line"></span><br><span class="line">awk &#x27;&#123;print NR &quot;: &quot; $0&#125;&#x27; /tmp/donors</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请将<span class="string">&quot;文件名&quot;</span>替换为您要处理的文件名。这条命令将打印出每条记录的行号（记录号）后面跟着记录的内容。记录号由NR内置变量提供，表示当前处理的记录的序号。</span></span><br><span class="line"></span><br><span class="line"> awk  -F&#x27;[: ]&#x27; &#x27;$7 &lt;= 85 &#123;print $1,$2,$4&#125;&#x27; /tmp/donors</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="文件解压缩"><a href="#文件解压缩" class="headerlink" title="文件解压缩"></a>文件解压缩</h3><ul><li><p><code>gzip</code> 只能保留压缩或者未压缩二选一</p><ul><li>压缩命令格式<code>gzip filename</code></li><li>解压格式<code>gzip -d ziped_filename</code></li></ul></li><li><p><code>bzip2</code> .bz2后缀</p><ul><li>压缩命令格式<code>bzip2 filename</code></li><li>解压格式<code>bzip2 -d ziped_filename</code></li></ul></li><li><p><code>Linux</code>下文本文件和<code>Windows</code>下文本文件不同:<br> <code>Windows</code>下文本文件会每行包含一个<code>\r</code><br> <img src="/2024/06/21/linux-zhi-ling/linuxtxt_dif_windows.png" alt="alt text"></p></li></ul><h2 id="第七章-vim的使用"><a href="#第七章-vim的使用" class="headerlink" title="第七章 vim的使用"></a>第七章 vim的使用</h2><h3 id="7-1-vim的三种模式"><a href="#7-1-vim的三种模式" class="headerlink" title="7.1 vim的三种模式"></a>7.1 vim的三种模式</h3><ol><li>命令模式<br>命令模式下按i进入编辑模式（插入模式）</li><li>插入模式<br>在此模式下编辑文件内容，按esc退出，进入末行模式</li><li>末行模式<br>在此模式下输入<code>:q</code>表示直接退出，<code>:q！</code>强制退出<br><code>w</code>表示保存，<code>wq</code>保存且退出</li></ol><h3 id="7-2-vim的常用命令"><a href="#7-2-vim的常用命令" class="headerlink" title="7.2 vim的常用命令"></a>7.2 vim的常用命令</h3><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>p</td><td>粘贴</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>v</td><td>普通视图模式</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl+r</td><td>重做,反撤销</td></tr><tr><td>g</td><td>跳到文件头</td></tr><tr><td>G</td><td>跳到文件尾</td></tr><tr><td>数字+G</td><td>跳转到指定行</td></tr><tr><td>&#x2F;关键词</td><td>向下查找关键词</td></tr><tr><td>:&#x2F;搜索的内容</td><td>搜索指定内容</td></tr><tr><td>?关键词</td><td>向上查找关键词</td></tr><tr><td>n</td><td>查找下一个</td></tr><tr><td>N</td><td>查找上一个</td></tr><tr><td>:%s&#x2F;原字符串&#x2F;新字符串&#x2F;g</td><td>全局替换</td></tr><tr><td>:开始行数,结束行数s&#x2F;原字符串&#x2F;新字符串&#x2F;g</td><td>局部替换</td></tr></tbody></table><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>.</code></td><td>重复上一次命令操作</td></tr><tr><td><code>&gt;</code></td><td>跳至基地</td></tr><tr><td><code>shift</code>+<code>6</code></td><td>切换成蓝色主题的外观</td></tr><tr><td><code>shift</code>+<code>4</code></td><td>回到浅灰色主题</td></tr><tr><td><code>ctrl</code>+<code>f</code></td><td>回到黑暗主题</td></tr><tr><td><code>ctrl</code>+<code>b</code></td><td>上传一屏</td></tr></tbody></table><h2 id="第八章-File-Share"><a href="#第八章-File-Share" class="headerlink" title="第八章 File Share"></a>第八章 File Share</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><ul><li><p><code>ln 源文件名  链接文件名</code><br> 修改链接文件的内容,原文件也会改变</p></li><li><p>不能跨文件系统(设备)创建链接,也不能对目录创建硬链接</p></li><li><p>创建硬链接文件,链接文件与原文件分配同样的索引节点号(文件系统)</p></li></ul><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><ul><li><code>ln -s 源文件名  链接文件名</code><br> 分配<strong>不同于源文件的索引节点</strong>,当访问链接文件时,先去根据索引节点号找到链接文件所在硬盘位置,访问<strong>链接文件内容(源文件路径信息等)<strong>找到源文件,在根据源文件的文件名和索引节点号找到源文件索引节点,从而找到</strong>源文件路径,对源文件进行访问</strong>。<code>要访问两次硬盘</code></li></ul><h2 id="第九章-重定向和管道"><a href="#第九章-重定向和管道" class="headerlink" title="第九章 重定向和管道"></a>第九章 重定向和管道</h2><h3 id="1-文件描述符表"><a href="#1-文件描述符表" class="headerlink" title="1.文件描述符表"></a>1.文件描述符表</h3><p><strong>文件描述符表</strong>（File Descriptor Table）是操作系统中用于管理打开的文件、套接字、管道等文件类型对象的一种数据结构。在Unix和类Unix系统（如Linux）中，每一个进程都有一个与之关联的文件描述符表。</p><ol><li><strong>文件描述符</strong>：这是一个非负整数，用于在进程中唯一地标识一个打开的文件或套接字。例如，当你使用<code>open()</code>函数打开一个文件时，系统会返回一个文件描述符。</li><li><strong>文件描述符表</strong>：这个表是一个数组，其索引是文件描述符，数组的元素是指向打开文件的指针（在更底层，这通常是一个指向文件表项的指针）。</li><li><strong>文件表</strong>：每个打开的文件在内核中都有一个对应的文件表项（也称为v-node或inode）。这个表项包含了文件的详细信息，如文件的大小、访问权限、偏移量等。</li><li><strong>关系</strong>：文件描述符表是进程级别的，而文件表是系统级别的。一个文件表项可以被多个进程共享（通过不同的文件描述符），但每个进程都有自己的文件描述符表。</li><li><strong>操作</strong>：当进程执行如<code>read()</code>、<code>write()</code>等系统调用时，它会使用文件描述符作为参数。系统会根据文件描述符在文件描述符表中查找对应的文件表项，并执行相应的操作。</li><li><strong>关闭文件</strong>：当进程使用<code>close()</code>系统调用关闭一个文件时，它实际上是在文件描述符表中删除对应的条目，而不是删除文件表项。只有当所有引用该文件的进程都关闭了该文件时，文件表项才会被释放。</li></ol><p><img src="/2024/06/21/linux-zhi-ling/file_desc_specl.png" alt="alt text"></p><ul><li>有三个特殊的文件描述符,是系统自动打开的<ol><li>标准输入描述符<code>stdin</code> 0</li><li>标准输出描述符<code>stdout</code> 1</li><li>标准错误输出描述符<code>stderr</code> 2</li></ol></li></ul><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><h4 id="2-1标准输出重定向"><a href="#2-1标准输出重定向" class="headerlink" title="2.1标准输出重定向"></a>2.1标准输出重定向</h4><ul><li>格式: <code>command &lt; input_file</code></li><li>例子 把&#x2F;tmp&#x2F;studnet_record 里的所有小写字母变成大写<br><img src="/2024/06/21/linux-zhi-ling/input_rediect.png" alt="alt text"></li></ul><h4 id="2-2标准输出重定向"><a href="#2-2标准输出重定向" class="headerlink" title="2.2标准输出重定向"></a>2.2标准输出重定向</h4><p>重定向也称为输出重定向，把在终端执行命令的结果保存到目标文件。</p><ul><li>格式: <code>command &gt; output_file</code></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>如果文件存在，会覆盖原有文件内容，相当于文件操作中的’w’模式</td></tr><tr><td>&gt;&gt;</td><td>如果文件存在，会追加写入文件末尾，相当于文件操作中的’a’模式</td></tr></tbody></table><p><img src="/2024/06/21/linux-zhi-ling/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="alt text"></p><ul><li>可以使用输出重定向合并文件<ol><li>按列合并 cat filea fileb &gt; newfile</li><li>按行合并 paste filea fileb &gt; newfile</li></ol></li></ul><h4 id="2-2标准错误输出重定向"><a href="#2-2标准错误输出重定向" class="headerlink" title="2.2标准错误输出重定向"></a>2.2标准错误输出重定向</h4><ul><li>格式: <code>2 &gt; output_file</code><br> <code>2</code>表示标准错误输出</li><li>使用pipe出现错误输出时,<code>2&gt;/dev/null</code>放在出现错误命令的后面</li></ul><p><img src="/2024/06/21/linux-zhi-ling/stderr.png" alt="alt text"></p><ul><li><code>/dev/null</code> 空设备,一般不关心的错误输出就丢到空设备文件中</li></ul><h4 id="多种重定向结合"><a href="#多种重定向结合" class="headerlink" title="多种重定向结合"></a>多种重定向结合</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -name &quot;*.cpp&quot; 2&gt;/dev/null &gt;result </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">即丢弃结果也保存正常输出文件</span></span><br><span class="line"></span><br><span class="line">find /tmp -name &quot;*.cpp&quot; &gt;&amp;result </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把标准输出和标准错误输出都保存到文件result中</span></span><br></pre></td></tr></table></figure><ul><li><p>Redirecting stdin and stdout in OneCommand<br> Command <input-file > out-file</p></li><li><p>Redirecting stdout and stderr in OneCommand<br> Command &gt;out-file 2&gt;err-file<br> Command &gt;out-file 2&gt;&amp;1<br> Command &gt;&amp; out-file</p></li></ul><h3 id="进程间通信的方式"><a href="#进程间通信的方式" class="headerlink" title="进程间通信的方式"></a>进程间通信的方式</h3><ul><li>匿名管道：是一种半双工的通信方式，只能在有亲缘关系的进程之间使用。管道可以实现在一个进程中生成输出，而在另一个进程中读取该输出</li><li>命名管道：是一种有名的FIFO文件，在文件系统中以文件形式存在，可以在不相关的进程之间进行通信</li><li>消息队列：是一种进程间通信的方式，一方发送消息到队列，而另一方则从队列中接收消息</li><li>信号量：用于进程间的同步与互斥，可以实现进程对临界资源的访问控制</li><li>信号：是一种异步的通知机制，用于通知进程发生了某种事件，比如接收到了某种信号或者错误</li><li>共享内存：是一种高效的进程间通信方式，多个进程可以共享同一块内存区域，以实现数据的共享</li><li>socket：是一种网络编程的通信方式，通过网络套接字实现不同主机的进程间通信</li></ul><h3 id="KISS原则"><a href="#KISS原则" class="headerlink" title="KISS原则"></a><code>KISS</code>原则</h3><p>Linux设计时,遵循<code>KISS(Keep It Simple Stupid)</code>原则</p><h3 id="匿名-管道命令"><a href="#匿名-管道命令" class="headerlink" title="(匿名)管道命令"></a>(匿名)管道命令</h3><p>管道<code>|</code>相当于一个容器,可以把命令执行的结果存储到里面,在释放出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tree /bin/ | more</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计当前登陆主机人数</span></span><br><span class="line">who | wc -l </span><br><span class="line"></span><br><span class="line">du /tmp/* 2&gt; /dev/null | sort -n -k1 | tail -3| awk &#x27;&#123;print$2&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>tee</code>命令<br> 接收上一条命令的输出,拷贝保存到一个文件中,并把输出传入下一个管道命令的输入<br><img src="/2024/06/21/linux-zhi-ling/tee.png" alt="alt text"></li></ul><h3 id="命名管道FIFOs"><a href="#命名管道FIFOs" class="headerlink" title="命名管道FIFOs"></a>命名管道FIFOs</h3><ul><li><p>FIFOs（命名管道）可用于系统上两个进程之间的通信。它们允许两个进程在系统上独立执行时进行通信，而不像普通管道那样只能在同一个进程内进行通信。</p></li><li><p>FIFOs（命名管道）是在磁盘上创建的，并且有一个类似文件名的名称。这意味着像操作文件一样，必须先创建并打开 FIFOs（命名管道）才能用于进程间通信。</p></li><li><p>可以在独立执行的程序之间使用 FIFOs（命名管道），这使得它成为进程间跨应用程序通信的一种有效方式。</p></li></ul><h4 id="FIFOs的使用"><a href="#FIFOs的使用" class="headerlink" title="FIFOs的使用"></a>FIFOs的使用</h4><ul><li><code>mkfifo [option] file-list</code>创建命名管道命令<ul><li><code>-m 八进制权限数</code> 参数用来设定管道文件的权限<br><img src="/2024/06/21/linux-zhi-ling/fifo.png" alt="alt text"></li></ul></li></ul><h2 id="第十章-进程Processing"><a href="#第十章-进程Processing" class="headerlink" title="第十章 进程Processing"></a>第十章 进程Processing</h2><ul><li><code>进程</code>就是程序的一次运行</li><li>A process is a program in execution</li><li>A process is created every time you run an external command and is removed after the command finishes its execution</li></ul><h3 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h3><ul><li>先来先服务（FCFS）调度算法</li><li>短作业优先（SJF）调度算法</li><li>优先级调度算法</li><li>多优先级队列</li><li>高响应比优先调度算法</li><li>时间片轮转调度算法</li><li>多级反馈队列调度算法</li></ul><h3 id="Linux下的进程"><a href="#Linux下的进程" class="headerlink" title="Linux下的进程"></a>Linux下的进程</h3><p>Linux系统采用多级优先队列的方式</p><p><strong>1. Processor Scheduler（处理器调度器）</strong></p><ul><li><p><strong>定义</strong>：</p><ul><li>处理器调度器是操作系统中负责实现CPU调度算法的代码部分。</li></ul></li><li><p><strong>功能</strong>：</p><ul><li>确定下一个要运行哪个进程。</li><li>考虑多种因素，如进程优先级、等待时间、I&#x2F;O需求等。</li></ul></li><li><p><strong>目标</strong>：</p><ul><li>确保系统资源的公平分配。</li><li>提高系统的吞吐量和响应速度。</li></ul></li></ul><p><strong>2. Dispatcher（调度器）</strong></p><ul><li><p><strong>定义</strong>：</p><ul><li>调度器是操作系统中负责将CPU控制权从当前进程转移到新调度进程的组件。</li></ul></li><li><p><strong>功能</strong>：</p><ul><li>停止当前进程的执行。</li><li>保存当前进程的上下文（如程序计数器、寄存器状态等）。</li><li>加载新进程的上下文。</li><li>将新进程置于就绪状态，以便其可以开始执行。</li></ul></li><li><p><strong>要求</strong>：</p><ul><li>上下文切换过程需要快速且准确，以确保系统的稳定性和性能。</li></ul></li></ul><p><strong>3. 进程优先级值计算</strong></p><ul><li><p><strong>影响因素</strong>：</p><ul><li>Nice值：一个介于-20（最高优先级）和19（最低优先级）之间的整数。</li><li>CPU使用情况：进程占用的CPU资源量。</li></ul></li><li><p><strong>调整方式</strong>：</p><ul><li>用户可以使用<code>nice</code>命令或<code>renice</code>命令来调整进程的Nice值。</li><li>操作系统根据进程的CPU使用情况动态地调整其优先级值。</li></ul></li><li><p><strong>目的</strong>：</p><ul><li>确保所有进程能够公平地获得CPU资源。</li><li>防止某个进程长时间占用过多CPU资源，影响其他进程的执行。</li></ul></li><li><p>怎么改变Nice_Value值</p><ul><li><code>nice -n nice_value</code>命令</li></ul></li></ul><h3 id="进程相关命令"><a href="#进程相关命令" class="headerlink" title="进程相关命令"></a>进程相关命令</h3><ul><li><code>ps</code>命令<ul><li><code>-l</code>参数: 显示详细信息</li><li><code>-e</code>选项: 显示系统中所有进程</li></ul></li></ul><p><img src="/2024/06/21/linux-zhi-ling/ps.png" alt="alt text"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改进程优先级(普通用户只能降低优先级---&gt;给nice_value赋正值)</span></span><br><span class="line">nice -n -20 ps -l </span><br></pre></td></tr></table></figure><p><img src="/2024/06/21/linux-zhi-ling/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6.png" alt="alt text"></p><p><strong>Shell命令</strong>可以是内部的（内建的）或外部的。</p><ul><li><p><strong>内部（内建）命令</strong>：这些命令的代码是shell进程的一部分。内部命令直接由shell解释和执行，不需要创建新的进程。您列举的内部命令包括<code>bg</code>（将后台暂停的任务继续执行）、<code>cd</code>（更改目录）、<code>continue</code>（在循环中跳过当前迭代的剩余部分）、<code>echo</code>（在终端显示文本或将文本写入文件）、<code>exec</code>（替换当前shell进程为新的进程）。</p></li><li><p><strong>外部命令</strong>：这些命令的代码存储在文件中，文件内容可以是二进制代码或shell脚本。外部命令需要shell创建一个新的子进程来执行。您列举的外部命令包括<code>grep</code>（搜索文件中的文本模式）、<code>more</code>（分页查看文件内容）、<code>cat</code>（连接并打印文件内容）、<code>mkdir</code>（创建目录）、<code>rmdir</code>（删除空目录）和<code>ls</code>（列出目录内容）。</p></li></ul><p>在UNIX系统中，一个进程可以通过使用<strong>fork系统调用</strong>来创建另一个进程。这个系统调用会创建一个与原始进程完全相同的内存映射。</p><ul><li><strong>父进程</strong>：执行fork系统调用的原始进程被称为父进程。</li><li><strong>子进程</strong>：通过fork系统调用创建的新进程被称为子进程。</li></ul><p>可以使用type命令来查看是内部命令还是外部命令</p><ul><li><code>type</code>命令</li></ul><p><img src="/2024/06/21/linux-zhi-ling/type.png" alt="alt text"></p><h3 id="shell环境下执行命令"><a href="#shell环境下执行命令" class="headerlink" title="shell环境下执行命令"></a>shell环境下执行命令</h3><ul><li>命令执行</li></ul><p>在Linux下，Bash执行外部命令的过程涉及多个步骤。以下是该过程的大致描述：</p><ol><li><p><strong>命令输入</strong>：</p><ul><li>用户在Bash shell中输入一个命令，例如<code>ls</code>。</li></ul></li><li><p><strong>词法分析</strong>：</p><ul><li>Bash首先对输入的命令进行词法分析，将命令分解为单词或标记（tokens），例如命令名、选项、参数等。</li></ul></li><li><p><strong>路径搜索</strong>：</p><ul><li>Bash需要确定输入的是内部命令（如<code>cd</code>、<code>echo</code>等Bash内置的命令）还是外部命令。</li><li>对于外部命令，Bash会在环境变量<code>PATH</code>指定的目录中搜索该命令的可执行文件。<code>PATH</code>环境变量包含了一系列用冒号分隔的目录路径，Bash会按照这些路径的顺序进行搜索。</li></ul></li><li><p><strong>创建子进程</strong>：</p><ul><li>一旦找到可执行文件，Bash会使用<code>fork()</code>系统调用来创建一个新的子进程。这个子进程是当前Bash进程的副本，它将用于执行外部命令。</li></ul></li><li><p><strong>执行外部命令</strong>：</p><ul><li>在子进程中，Bash使用<code>exec()</code>系统调用来替换当前进程的映像为外部命令的可执行文件映像，从而开始执行该命令。</li><li><code>exec()</code>调用会导致子进程完全变成另一个程序（即外部命令），执行完毕后不会返回到原Bash进程，除非遇到错误或外部命令执行完成。</li></ul></li><li><p><strong>等待命令完成</strong>：</p><ul><li>父进程（即原始的Bash进程）会等待子进程（执行外部命令的进程）完成。这通常是通过<code>wait()</code>系统调用来实现的，它允许父进程挂起执行，直到子进程结束。</li></ul></li><li><p><strong>处理命令输出</strong>：</p><ul><li>外部命令执行过程中可能会产生标准输出（stdout）和标准错误输出（stderr）。这些输出通常会被打印到终端上，除非用户通过重定向（<code>&gt;</code>、<code>&gt;&gt;</code>、<code>2&gt;</code>等）或管道（<code>|</code>）改变了输出的方向。</li></ul></li><li><p><strong>命令结束</strong>：</p><ul><li>当外部命令执行完毕后，控制权会返回到Bash进程。如果命令成功执行，Bash通常会返回一个成功的退出状态（通常是0）；如果命令执行失败，则会返回一个非零的退出状态。</li></ul></li></ol><ul><li><p>脚本文件执行<br><img src="/2024/06/21/linux-zhi-ling/script.png" alt="alt text"></p></li><li><p><code>top</code>命令<br>动态实时的显示系统中进程变化<br><img src="/2024/06/21/linux-zhi-ling/top.png" alt="alt text"></p><ul><li><code>d</code>: 按D键切换刷新时间</li><li><code>h</code>: 显示可选项</li><li><code>q</code>: 退出</li></ul></li><li><p><code>pstree</code>命令<br>用树的方式显示进程之间的关系</p></li></ul><h3 id="对进程进行控制"><a href="#对进程进行控制" class="headerlink" title="对进程进行控制"></a>对进程进行控制</h3><p>前台进程的概念:<br>   前台进程是与用户直接交互的进程。以下是对前台进程的详细解释：</p><ol><li><strong>定义</strong>：前台进程指的是那些当前正在与用户进行直接交互的进程。这类进程通常位于屏幕的最前端，接收用户的输入并显示输出结果。</li><li><strong>特性</strong>：<ul><li>交互性：前台进程能够直接响应用户的操作，如点击、输入等。</li><li>阻塞性：当一个前台进程正在运行时，它通常会阻塞用户终端，意味着用户无法进行其他操作，直到该进程完成。</li><li>单一性：在任何时刻，通常只有一个进程（或进程组）可以在前台运行。</li></ul></li><li><strong>与后台进程的区别</strong>：与前台进程不同，后台进程在后台运行，不会阻塞用户终端，允许用户在同一终端启动新的前台或后台进程。后台进虽&gt;然可以向终端发送输出，但通常不能从终端接收输入。</li><li><strong>操作系统中的表现</strong>：在Unix-like操作系统中，用户可以通过特定的命令在前台和后台之间切换进程。</li><li><strong>实例</strong>：以Oracle数据库为例，当用户运行一个应用进程时，系统会为该应用建立一个服务进程，这个服务进程可以被视为前台进程，用于处理连接到数据库实例的用户进程的请求。</li><li><strong>其他系统中的应用</strong>：在Android系统中，前台进程也是极其重要的，它代表当前正在与用户交互的应用程序。这类进程在系统资源分配中通常享有优先级，以确保流畅的用户体验。<br>   总的来说，前台进程是计算机系统中直接与用户进行交互的进程，它具有高度的交互性和实时性要求。在不同的操作系统和应用场景中，前台进程的具体表现和管理方式可能会有所不同。</li></ol><ul><li>执行命令时指定其为后台进程<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/loop &amp;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时后台进程loop不断输出数字,按CTRL+C无效,因为是后台进程</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>jobs命令</strong>是Linux系统中的一个内置命令，它用于显示当前shell中正在运行或已经挂起的任务列表。</p><ol><li><p><strong>基本功能</strong>：</p><ul><li>显示当前shell中所有正在运行或挂起的任务。</li><li>通过任务编号、状态、进程编号和任务名称来展示任务信息。</li></ul></li><li><p><strong>常用操作</strong>：</p><ul><li>使用<code>jobs</code>命令直接查看任务列表。</li><li><code>fg [%n]</code>用于将后台执行的进程调到前台。</li><li><code>bg [%n]</code>用于将后台暂停的进程继续运行。</li><li><code>Ctrl+Z</code>可以将当前正在运行的前台进程暂停，并将其移动到后台。</li></ul></li><li><p><strong>任务状态</strong>：</p><ul><li>任务的状态可以是停止状态(S)、运行状态(R)或已完成状态(D)。</li></ul></li><li><p><strong>命令参数</strong>：</p><ul><li><code>-l</code>选项：显示详细的任务信息，包括进程ID（PID）、状态、作业编号、命令和进程组ID。</li><li><code>-n</code>选项：只显示上次显示过的已经停止的或已经退出的作业。</li><li><code>-p</code>选项：仅显示选定作业的进程组的进程ID。</li><li><code>-r</code>选项：仅显示正在运行的作业。</li><li><code>-s</code>选项：仅显示停止的作业。</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li>当你在终端中运行了多个命令或脚本，并且想要查看或管理这些任务时，可以使用jobs命令。</li><li>特别是当你需要切换任务的执行前后台，或者查看哪些任务正在运行、哪些已经暂停时，jobs命令会非常有用。</li></ul></li></ol><p><img src="/2024/06/21/linux-zhi-ling/loop.png" alt="alt text"></p><ul><li><code>fg</code><br>   把后台进程变成前台进程<ul><li>默认把带<code>+</code>的进程调到前台</li><li><code>%1</code>: 指定把哪个(进程id)进程变成前台进程</li></ul></li></ul><p><img src="/2024/06/21/linux-zhi-ling/fg.png" alt="alt text"></p><ul><li><code>bg</code><br>   挂起前台任务使用<code>CTRL+Z</code>，<code>bg</code>命令来把后台挂起的任务唤醒</li></ul><h3 id="命令的顺序和并行执行（Sequential-and-Parallel-Execution-of-Commands）"><a href="#命令的顺序和并行执行（Sequential-and-Parallel-Execution-of-Commands）" class="headerlink" title="命令的顺序和并行执行（Sequential and Parallel Execution of Commands）"></a>命令的顺序和并行执行（Sequential and Parallel Execution of Commands）</h3><ul><li>串行: cmd1 ; cmd2</li><li>并行: cmd1 &amp; cmd2</li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E5%91%BD%E4%BB%A4%E4%B8%B2%E5%B9%B6%E8%A1%8C.png" alt="alt text"></p><h3 id="如何终止进程"><a href="#如何终止进程" class="headerlink" title="如何终止进程"></a>如何终止进程</h3><ul><li>终止前台进程<ul><li>CTRL+C</li></ul></li><li>终止后台进程<ul><li><code>kill</code>命令<br><img src="/2024/06/21/linux-zhi-ling/kill.png" alt="alt text"></li></ul></li></ul><h4 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a><code>kill</code>命令</h4><p><code>kill</code> 命令在 Unix 和 Linux 系统中用于向进程发送信号。其基本语法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-信号编号] 进程ID</span><br></pre></td></tr></table></figure><ul><li><code>信号编号</code> 是一个可选参数，用于指定要发送给进程的信号。如果省略，则默认信号是 SIGTERM（软件终止信号，通常为编号 15）。</li><li><code>进程ID</code> 是要发送信号的进程的 ID。</li></ul><p><code>kill -l</code> 命令会列出所有可用的信号。</p><p>目的：将 <code>信号编号</code> 指定的信号发送给 <code>proc-list</code> 中指定的进程ID（PID）对应的进程。作业ID通常用于 shell 作业控制，必须以 <code>%</code> 符号开头。</p><p><code>kill -l</code> 命令返回所有信号及其名称的列表。在某些系统上，信号编号可能不会与名称一起显示。</p><p>常用的信号编号包括：</p><ul><li>HUP（挂起，通常为信号编号 1）</li><li>INT（中断，通常由按 Ctrl+C 发送，信号编号 2）</li><li>QUIT（退出，通常由按 Ctrl+\ 发送，信号编号 3）</li><li>KILL（强制杀死，信号编号 9）</li><li>TERM（软件信号，如果没有指定则为默认信号，通常为编号 15）</li></ul><p>请注意，向进程发送某些信号，尤其是 KILL（信号 9），应该谨慎进行，因为它可以在不给进程机会适当清理资源的情况下突然终止进程。</p><p>如果你想向多个进程发送信号，可以通过空格分隔指定多个 PID，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -SIGTERM 1234 5678 9012</span><br></pre></td></tr></table></figure><p>此命令将 SIGTERM 信号发送给 PID 为 1234、5678 和 9012 的进程。</p><h4 id="信号的处理"><a href="#信号的处理" class="headerlink" title="信号的处理"></a>信号的处理</h4><p>命令和进程的异常终止（续）</p><p><code>kill</code>命令的主要目的是向进程发送信号（软件中断）。进程在接收到信号时可以采取以下三种行动之一：</p><ol><li>接受由UNIX内核决定的默认操作。</li><li>忽略该信号。</li><li>拦截信号并执行用户定义的操作。</li></ol><p>由进程内部事件引起的信号被称为内部信号或陷阱（trap）。由进程外部事件引起的信号被称为外部信号。</p><h2 id="第十一章-Shell脚本编程"><a href="#第十一章-Shell脚本编程" class="headerlink" title="第十一章 Shell脚本编程"></a>第十一章 Shell脚本编程</h2><ol><li><p><strong>Shell Script (Shell 程序)</strong>:</p><ul><li>一个Shell脚本是一个包含一系列Shell命令的文本文件。这些命令可以由Shell（如bash, zsh, sh等）解释并执行。</li><li>Shell脚本通常用于自动化任务和简化复杂的命令序列。</li></ul></li><li><p><strong>Shell Variable (Shell 变量)</strong>:</p><ul><li>Shell变量是用户或程序员在Shell环境中用于存储和引用数据的机制。</li><li>变量可以存储字符串、数字或其他数据类型（取决于Shell）。</li><li>Shell变量通常用于在脚本中传递和存储数据，以及动态地构建命令。</li></ul></li><li><p><strong>Program Control Flow Commands (程序控制流命令)</strong>:</p><ul><li>这些命令允许在Shell脚本中执行非顺序的命令，以及重复执行命令块。</li><li>常见的控制流命令包括<code>if</code>、<code>for</code>、<code>while</code>、<code>until</code>、<code>case</code>等。</li><li>这些命令使得脚本能够基于条件执行不同的命令序列，或者重复执行某个命令块，直到满足某个条件为止。</li></ul></li></ol><p>总结：Shell脚本是包含一系列Shell命令的文本文件，用于自动化任务和简化命令序列。Shell变量用于存储和引用数据，而程序控制流命令则允许在脚本中执行非顺序的命令和重复执行命令块。</p><p>Shell脚本也是一种编程语言(解释型)<br>编程语言分为两种</p><ul><li>编译型: 如C++这种,通过g++先生成可执行文件</li><li>解释型: python或java,读一行命令,解释执行一行</li></ul><p><img src="/2024/06/21/linux-zhi-ling/shellscript.png" alt="alt text"></p><h3 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim first.sh</span><br><span class="line"></span><br><span class="line">date</span><br><span class="line">echo &quot;Hello world&quot;</span><br></pre></td></tr></table></figure><p>shell脚本有三种执行方式</p><ol><li><code>bash first.sh</code> 指定运行shell来执行脚本</li><li><code>first.sh</code> 直接执行shell脚本</li><li><code>. first.sh</code>或<code>source first.sh</code></li></ol><ul><li>在脚本文件第一行指定shell环境<code>#! /bin/bash</code>表示把<code>/bin/bash</code>程序加载进来,由它来解释执行脚本文件<br><img src="/2024/06/21/linux-zhi-ling/%E6%8C%87%E5%AE%9A%E8%84%9A%E6%9C%AC%E8%A7%A3%E9%87%8A%E5%99%A8.png" alt="alt text"></li></ul><h3 id="shell变量分类及操作"><a href="#shell变量分类及操作" class="headerlink" title="shell变量分类及操作"></a>shell变量分类及操作</h3><ul><li>环境变量(子进程无法修改父进程的环境变量)<br> 使用<code>env</code>命令直接显示环境变量</li><li>用户自定义变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义变量,不能加空格</span></span><br><span class="line">nam=&quot;Jack&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不能使用双引号</span></span><br><span class="line">echo &quot;Hello, $nam&quot;</span><br></pre></td></tr></table></figure><ul><li><code>readonly</code>: 把一个变量变成只读</li><li><code>export</code>: 把一个用户定义变量变成环境变量</li><li><code>source</code>: 允许脚本修改环境变量值(使用<code>source</code>或者<code>.</code>执行脚本文件时,不会再创建子进程来执行,使用当前shell进程来解释执行脚本)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置父(当前)进程环境变量值</span></span><br><span class="line">PS1=&#x27;Study Hard/$&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行时使用 . first.sh  或者 <span class="built_in">source</span> first.sh</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内置的环境变量"><a href="#内置的环境变量" class="headerlink" title="内置的环境变量"></a>内置的环境变量</h3><ol><li><p><code>PATH</code></p><ul><li><strong>Purpose</strong>: 包含目录名称的列表，shell在查找外部命令或程序时会搜索这些目录。</li><li><strong>Default</strong>: 通常包括<code>/usr/bin</code>, <code>/bin</code>, <code>/usr/local/bin</code>等目录。</li></ul></li><li><p><code>EDITOR</code></p><ul><li><strong>Purpose</strong>: 指定默认文本编辑器，如<code>vi</code>, <code>nano</code>, <code>emacs</code>等。</li><li><strong>Default</strong>: 根据系统配置和用户偏好而定。</li></ul></li><li><p><code>ENV</code></p><ul><li><strong>Purpose</strong>: 指定shell启动时要读取的初始化文件。在某些shell中，如<code>ksh</code>，它可能用于指定环境设置文件。</li><li><strong>Default</strong>: 通常不设置，但在某些shell配置中可能使用。</li></ul></li><li><p><code>HOME</code></p><ul><li><strong>Purpose</strong>: 用户的主目录路径。当用户首次登录时，shell通常会切换到这个目录。</li><li><strong>Default</strong>: <code>/home/username</code>（其中<code>username</code>是用户的登录名）。</li></ul></li><li><p><code>MAIL</code></p><ul><li><strong>Purpose</strong>: 用户的系统邮箱文件的路径。当有新邮件时，某些shell会显示通知。</li><li><strong>Default</strong>: <code>/var/spool/mail/username</code>（其中<code>username</code>是用户的登录名）。</li></ul></li><li><p><code>MAILCHECK</code></p><ul><li><strong>Purpose</strong>: 指定shell检查用户邮箱以查找新邮件的频率（以秒为单位）。</li><li><strong>Default</strong>: 通常设置为60秒，但可能因系统而异。</li></ul></li><li><p><code>PPID</code></p><ul><li><strong>Purpose</strong>: 当前进程的父进程ID（PID）。这不是一个通常设置的环境变量，而是可以通过shell命令（如<code>$!</code>或<code>$PPID</code>在某些shell中）或程序内部API获取的。</li><li><strong>Default</strong>: 由操作系统在进程创建时设置。</li></ul></li><li><p><code>PS1</code></p><ul><li><strong>Purpose</strong>: 主shell提示符，显示在命令行上。</li><li><strong>Default</strong>: 通常设置为类似<code>$</code>或<code>#</code>（对于root用户）的字符，但用户可以通过修改<code>.bashrc</code>、<code>.bash_profile</code>等文件来定制它。</li></ul></li><li><p><code>PWD</code></p><ul><li><strong>Purpose</strong>: 当前工作目录的路径。</li><li><strong>Default</strong>: 由shell在每次更改目录时设置。</li></ul></li><li><p><code>TERM</code></p><ul><li><strong>Purpose</strong>: 终端类型。它告诉应用程序（如文本编辑器、终端仿真器等）关于终端的功能和特性。</li><li><strong>Default</strong>: 根据用户使用的终端仿真器而定，如<code>xterm</code>, <code>vt100</code>, <code>linux</code>等。</li></ul></li></ol><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$0</code></td><td>程序的名称</td></tr><tr><td><code>$1 - $9</code></td><td>命令行参数1到9的值</td></tr><tr><td><code>$@</code></td><td>所有命令行参数的值</td></tr><tr><td><code>$*</code></td><td>所有命令行参数的值,单一字符串<code>&quot;a b c d&quot;</code></td></tr><tr><td><code>&quot;$@&quot;</code></td><td>所有命令行参数的值；每个参数都单独引用 <code>&quot;a&quot; &quot;b&quot; &quot;c&quot; &#39;d&quot;</code></td></tr><tr><td><code>$#</code></td><td>命令行参数的总数</td></tr><tr><td><code>$$</code></td><td>当前进程的进程ID（PID）</td></tr><tr><td><code>$?</code></td><td>最近命令的退出状态,执行成功返回值0</td></tr><tr><td><code>$!</code></td><td>最近后台进程的PID</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Study Hard:$cat first.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line"></span><br><span class="line">Study Hard:$first.sh a b c</span><br><span class="line"></span><br><span class="line">./first.sh</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">Study Hard:$vim first.sh</span><br><span class="line">Study Hard:$cat first.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bashecho <span class="variable">$1</span></span></span><br><span class="line"></span><br><span class="line">Study Hard:$first.sh Tom</span><br><span class="line">Tom</span><br></pre></td></tr></table></figure><h3 id="shell变量的数据类型"><a href="#shell变量的数据类型" class="headerlink" title="shell变量的数据类型"></a>shell变量的数据类型</h3><p><strong>变量声明</strong></p><p><strong>语法：</strong></p><ul><li><code>declare [选项][名称[=值]]</code></li><li><code>typeset [选项][名称[=值]]</code></li></ul><p><strong>目的：</strong><br>声明变量并初始化它们，设置它们的属性。在函数内部，会创建新的变量副本。使用<code>+</code>代替<code>-</code>关闭属性。</p><p><strong>输出：</strong></p><ul><li>没有名称和选项时，在当前shell环境中显示所有shell变量的名称和值。</li><li>使用选项时，显示具有特定属性的变量名称和其值。</li></ul><p><strong>常用选项&#x2F;特性：</strong></p><ul><li><code>-a</code>：将每个“名称”标记为数组</li><li><code>-f</code>：将每个“名称”标记为函数</li><li><code>-i</code>：将“名称”标记为整数</li><li><code>-r</code>：将“名称”标记为只读（无法通过<code>+x</code>关闭）</li><li><code>-x</code>：将“名称”标记为环境变量</li></ul><p>shell变量被默认为是字符串类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: a=1</span><br><span class="line">Input: b=2</span><br><span class="line">Input: c=$a+$b</span><br><span class="line">Input: echo $c</span><br><span class="line"></span><br><span class="line">Output: 1+2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正确输出加法公式</span></span><br><span class="line">Input: declare -i z</span><br><span class="line">Input: z=a+b</span><br><span class="line">Iuput: echo $z</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><h3 id="算数拓展"><a href="#算数拓展" class="headerlink" title="算数拓展"></a>算数拓展</h3><ol><li><code>$()</code>: 这是命令替换（Command Substitution）的语法。当你想要将命令的输出赋值给一个变量，或者将命令的输出作为另一个命令的参数时，你会使用它。<code>$()</code> 的结果会被替换为括号内命令的输出。例如：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">files=$(<span class="built_in">ls</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$files</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>ls</code> 命令的输出会被赋值给变量 <code>files</code>，然后 <code>echo</code> 命令会打印出这个输出。</p><p>另外，<code>$()</code> 是反引号（<code>...</code>）的现代替代方式，两者在功能上是等价的。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">files=`<span class="built_in">ls</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$files</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>$((...))</code>: 这是算术扩展（Arithmetic Expansion）的语法。当你需要在 Bash 脚本中执行算术运算时，你会使用它。<code>$((...))</code> 的结果会被替换为括号内算术表达式的结果。例如：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line">b=10</span><br><span class="line"><span class="built_in">sum</span>=$((a + b))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><p>在这个例子中，算术表达式 <code>a + b</code> 的结果（即 15）会被赋值给变量 <code>sum</code>，然后 <code>echo</code> 命令会打印出这个结果。</p><h3 id="命令替换-把命令结果存储成变量"><a href="#命令替换-把命令结果存储成变量" class="headerlink" title="命令替换(把命令结果存储成变量)"></a>命令替换(把命令结果存储成变量)</h3><ul><li><strong>变量名&#x3D;`cmd`</strong></li><li><code>cmd1 &quot;$(cmd2)&quot;</code><ul><li><code>$(...)</code>: 这是一个命令替换的语法，它允许你执行一个命令，并将该命令的输出作为另一个命令的输入。在这个例子中，<code>$(sort &quot;$filename&quot;)</code> 会执行 <code>sort &quot;$filename&quot;</code> 命令，该命令会对 <code>$filename</code> 文件的内容进行排序，并输出排序后的结果。这个输出随后被用作 <code>nl</code> 命令的输入。</li></ul></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2.png" alt="alt text"></p><h3 id="变量的输入输出"><a href="#变量的输入输出" class="headerlink" title="变量的输入输出"></a>变量的输入输出</h3><h4 id="变量的输入"><a href="#变量的输入" class="headerlink" title="变量的输入"></a>变量的输入</h4><p><code>read</code> 是一个在Linux中常用的命令，用于从标准输入或其他文件描述符中读取输入并赋值给变量。它的基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> [选项] 变量名(列表)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>选项</code> 是可选的，可以用来指定read命令的特定行为。</li><li><code>变量名</code> 是要将输入赋值给的变量。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Please enter your name:&quot;</span></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$name</span>. Welcome!&quot;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，当用户输入其名字并按下回车后，<code>read</code> 命令将输入的内容赋值给变量 <code>name</code>，然后 <code>echo</code> 命令使用这个变量进行输出。</p><p>常用选项包括：</p><ul><li><code>-p</code> ：用于显示提示信息而不是使用<code>echo</code>命令来显示。</li><li><code>-a</code> ：将输入分配到数组而不是普通变量。</li><li><code>-n</code> ：限制输入的字符数。</li><li><code>-s</code> ：用于静默模式，输入时不显示在屏幕上。</li><li><code>-t</code> ：设置等待时间，如果超过指定秒数没有输入，则读取终止。</li></ul><p><img src="/2024/06/21/linux-zhi-ling/read.png" alt="alt text"></p><h4 id="变量的输出-echo"><a href="#变量的输出-echo" class="headerlink" title="变量的输出-&gt;echo"></a>变量的输出-&gt;<code>echo</code></h4><p><code>echo</code> 命令用于在终端中显示文本或变量的内容。它的基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [选项] [字符串或变量]</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>[选项]</code> 是可选的，可以用来指定特定行为，比如 <code>-e</code> 用于解释转义字符。</li><li><code>[字符串或变量]</code> 是要显示的文本或变量的内容。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>echo</code> 命令会在终端中显示 “Hello, World!”。</p><p>常用选项包括：</p><ul><li><code>-e</code> ：允许使用反斜杠转义字符。</li><li><code>-n</code> ：不在结尾添加换行符。</li><li><code>-E</code> ：关闭反斜杠转义功能，将反斜杠字符输出为原始字符。</li><li><code>&gt;&gt; 文件</code> ：将输出追加到指定文件。</li><li><code>-E</code> ：关闭 <code>-e</code> 选项开启的转义字符解释功能。</li></ul><h3 id="对数值进行处理"><a href="#对数值进行处理" class="headerlink" title="对数值进行处理"></a>对数值进行处理</h3><p>因为shell变量被默认为是字符串类型</p><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ul><li><code>declare</code></li><li><code>expr 表达式</code></li><li><code>let</code>命令<br><img src="/2024/06/21/linux-zhi-ling/expr&let.png" alt="alt text"></li></ul><h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><ul><li><code>bc</code>命令: 默认从标准输入读取小数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=1.1</span><br><span class="line">b=2.1</span><br><span class="line">echo $a + $b | bc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从标准输出中通过管道变成标准输入在交给bc命令</span></span><br><span class="line"></span><br><span class="line">Output: 3.2</span><br></pre></td></tr></table></figure></li></ul><h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><ul><li>Write a script that take a directory as a command-line argument and output the names of all directorie swithin that directory.(1.sh)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dirname=$1</span><br><span class="line">ls -l $dirname | awk &#x27;/^d/&#123;print $9&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li>Write a script that read a text filename from the keybard, sort the file and display it with the line number(2.sh)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;Please input a file name:&quot; filename</span><br><span class="line">sort $filename | nl</span><br></pre></td></tr></table></figure></li></ul><h3 id="shell脚本的注释"><a href="#shell脚本的注释" class="headerlink" title="shell脚本的注释"></a>shell脚本的注释</h3><p><code>#</code>用来注释一行,类似于python(除第一行外)</p><h3 id="编写shell脚本-1"><a href="#编写shell脚本-1" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><h4 id="shell表达式"><a href="#shell表达式" class="headerlink" title="shell表达式"></a>shell表达式</h4><p><img src="/2024/06/21/linux-zhi-ling/shell%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="alt text"></p><ul><li><p><code>-eq</code>: 两个整数相等</p></li><li><p><code>-ge</code>: 大于等于</p></li><li><p><code>-gt</code>: 大于</p></li><li><p><code>-le</code>: 小于等于</p></li><li><p><code>-lt</code>: 小于</p></li><li><p><code>-a</code>: AND</p></li><li><p><code>-o</code>: OR</p></li><li><p><code>!</code>: 非</p></li></ul><p>对表达式求值有两种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if test $a -eq $b</span><br><span class="line"></span><br><span class="line">if [ $a -eq $b ]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要有空格</span></span><br></pre></td></tr></table></figure><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line">read a</span><br><span class="line">if [ $a -eq 0 ]</span><br><span class="line">then echo &#x27;zero&#x27;</span><br><span class="line">elif [ $a -gt 0 ]</span><br><span class="line">then echo &quot;is Postive&quot;</span><br><span class="line">elif [ $a -lt 0 ]</span><br><span class="line">then echo &quot; is Negative&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">if.sh</span></span><br></pre></td></tr></table></figure><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p><img src="/2024/06/21/linux-zhi-ling/%E5%BE%AA%E7%8E%AF%E8%AF%BB%E5%8F%96.png" alt="alt text"></p><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p><img src="/2024/06/21/linux-zhi-ling/if%E7%BB%93%E6%9E%84.png" alt="alt text"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span>循环格式 <span class="keyword">in</span>可以不写,表示从命令行取参数列表</span></span><br><span class="line">for variable [in argument-list]</span><br><span class="line">do</span><br><span class="line">   command-list</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例</span></span><br><span class="line">for name in tom jack marry</span><br><span class="line">do</span><br><span class="line">   echo &quot;hello $name&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>题目: 从1加到100,输出结果<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read n</span><br><span class="line">sum=0</span><br><span class="line">for i in $(seq 1 $n)</span><br><span class="line">do</span><br><span class="line">        sum=`expr $sum + $i`</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure></li><li>题目: 批量的给文件改名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">  </span><br><span class="line">read -p &quot;请输入目录（默认为当前目录）: &quot; dir  </span><br><span class="line">if [ -z &quot;$dir&quot; ]; then  </span><br><span class="line">    dir=&quot;./&quot;  # 如果目录为空，则默认为当前目录  </span><br><span class="line">fi  </span><br><span class="line">  </span><br><span class="line">i=1  </span><br><span class="line">for filename in &quot;$dir&quot;*.txt; do  # 注意这里使用引号包围变量和模式  </span><br><span class="line">    echo &quot;重命名 $filename 到 $i.txt，y 或 n&quot;  </span><br><span class="line">    read choice  </span><br><span class="line">    if [ &quot;$choice&quot; = &quot;y&quot; ]; then  </span><br><span class="line">        mv &quot;$filename&quot; &quot;$dir$i.txt&quot;  # 确保重命名后的文件路径正确  </span><br><span class="line">        i=$((i+1))  </span><br><span class="line">    fi  </span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while expression</span><br><span class="line">do</span><br><span class="line">   command-list</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>题目: 输入密码检验<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line">passwd=&quot;007&quot;</span><br><span class="line">read -p &quot;Please input your password&quot; password</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变量要加双引号,防止用户输入出现空格导致异常</span></span><br><span class="line">while [ &quot;$password&quot; != &quot;$passwd&quot; ]</span><br><span class="line">do</span><br><span class="line">        read -p &quot;Please input your password&quot; password</span><br><span class="line">done</span><br><span class="line">echo &quot;Congradulations!&quot;</span><br></pre></td></tr></table></figure></li><li>while循环中的break和continue<br><img src="/2024/06/21/linux-zhi-ling/break_continue.png" alt="alt text"></li></ul><h4 id="case分支语句"><a href="#case分支语句" class="headerlink" title="case分支语句"></a>case分支语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式</span></span><br><span class="line">case test-string in</span><br><span class="line">pattern1)   command-list1</span><br><span class="line">            ;;</span><br><span class="line"></span><br><span class="line">pattern2)   command-list2</span><br><span class="line">            ;;</span><br><span class="line">patternN)   command-listN</span><br><span class="line">            ;;</span><br></pre></td></tr></table></figure><h2 id="PTA习题"><a href="#PTA习题" class="headerlink" title="PTA习题"></a>PTA习题</h2><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9801.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">read a b other  </span><br><span class="line">sum=$((a + b))  </span><br><span class="line">echo $sum</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解法2</span></span><br><span class="line">read a b other  </span><br><span class="line">sum=`expr $a + $b`  </span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9802.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提示用户输入密码</span>  </span><br><span class="line">echo -n &quot;输入密码password: &quot;  </span><br><span class="line">read -s password  # -s 选项使输入不回显到屏幕上  </span><br><span class="line">echo  # 打印一个空行以分隔密码输入和后续输出  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查密码是否正确</span>  </span><br><span class="line">if [ &quot;$password&quot; = &quot;pta12345&quot; ]; then  </span><br><span class="line">    echo &quot;密码正确&quot;  </span><br><span class="line">else  </span><br><span class="line">    echo &quot;密码错误&quot;  </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9803.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read n</span><br><span class="line">if [ $n -eq 0 -o $n -eq 1 ]</span><br><span class="line">then </span><br><span class="line">    echo &quot;$n indian boy.&quot;</span><br><span class="line">elif [ $n -gt 1 ]; then </span><br><span class="line">    echo &quot;$n indian boys.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9804.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read n</span><br><span class="line">if [ $n -lt 0 -o $n -gt 100 ]; then</span><br><span class="line">    echo &quot;输入整数小于0或大于100&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;输入整数在0到100之间（含）&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9805.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">算数拓展</span></span><br><span class="line">if [ $(($a % 2)) -eq 0 ]; then</span><br><span class="line">    echo &quot;$a是偶数&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a是奇数&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9806.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取用户输入的文件名</span></span><br><span class="line">read -p &quot;请输入文件名：&quot; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否为目录</span></span><br><span class="line">if [ -d &quot;$filename&quot; ]; then</span><br><span class="line">    echo &quot;Yes&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;No&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9807.png" alt="alt text"></p><ul><li><code>解答</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">![alt text](习题08.png)</span><br><span class="line">* `解答`</span><br><span class="line">```shell</span><br><span class="line">chance=3</span><br><span class="line">while [ $chance -gt 0 ]; do</span><br><span class="line">    read -p &quot;Enter password: &quot; passwd</span><br><span class="line">    if [ &quot;$passwd&quot; = &quot;zust&quot; ]; then</span><br><span class="line">        echo &quot;Success&quot;</span><br><span class="line">        exit</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Password error&quot;</span><br><span class="line">        chance=$((chance - 1))</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">echo &quot;Login failed&quot;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><h1 id="期末考试exam程序源代码"><a href="#期末考试exam程序源代码" class="headerlink" title="期末考试exam程序源代码"></a>期末考试exam程序源代码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">paperdir=&quot;/tmp&quot;</span><br><span class="line">select_first=True</span><br><span class="line">command_first=True</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">        clear</span><br><span class="line"></span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                cat &lt;&lt;- MENU</span><br><span class="line">                        1) select</span><br><span class="line">                        2) command</span><br><span class="line">                        3) script</span><br><span class="line">                        0) quit</span><br><span class="line">MENU</span><br><span class="line">                read -p &quot;please input your selection:&quot; section</span><br><span class="line">                echo</span><br><span class="line">                case &quot;$section&quot; in</span><br><span class="line">                        1) selection;;</span><br><span class="line">                        2) command ;;</span><br><span class="line">                        3) script ;;</span><br><span class="line">                        0) exit 0 ;;</span><br><span class="line">                        *) echo &quot;input error!&quot; ;;</span><br><span class="line">                esac</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">selection() &#123;</span><br><span class="line">        paper=&quot;$paperdir/p1&quot;</span><br><span class="line">        grep &quot;^#&quot; $paper</span><br><span class="line">        select_ans=~/1.ans</span><br><span class="line">        if [ &quot;$select_first&quot; = &quot;True&quot; ]; then</span><br><span class="line">                snum=`grep -c &#x27;^[0-9]\&#123;1,2\&#125;\.&#x27; $paperdir/p1`</span><br><span class="line">                gen_ans 1 $snum</span><br><span class="line">        fi</span><br><span class="line">        select_first=False</span><br><span class="line">        curr=1;</span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                echo</span><br><span class="line">                pid=`sed -n &quot;$&#123;curr&#125;p&quot; $select_ans | cut -d&#x27;.&#x27; -f1`</span><br><span class="line">                sed -n &quot;/^$pid\./,/^$/p&quot; $paper | sed &quot;s/^[0-9]\&#123;1,2\&#125;./$curr./&quot;</span><br><span class="line">                youranswer=`grep &quot;^&quot;$pid&quot;\.&quot; $select_ans | cut -f2 -d&quot; &quot;`</span><br><span class="line">                read -p &quot;input your answer($youranswer): &quot; answer</span><br><span class="line">                case $answer in</span><br><span class="line">                0)</span><br><span class="line">                        main</span><br><span class="line">                        ;;</span><br><span class="line">                [1-9]|[1-2][0-9])</span><br><span class="line">                        if [ $curr -ge 1 -a $curr -le $snum ]; then</span><br><span class="line">                                curr=&quot;$answer&quot;</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                [a-d]|[A-D])</span><br><span class="line">                        answer=`echo $answer | tr &quot;[a-z]&quot; &quot;[A-Z]&quot;`</span><br><span class="line">                        sed  -i &quot;s/^$pid\. .*/$pid\. $answer/&quot; $select_ans</span><br><span class="line">                        if [ $curr -lt $snum ]; then</span><br><span class="line">                                curr=`expr $curr + 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                -)</span><br><span class="line">                        if [ $curr -gt 1 ]; then</span><br><span class="line">                                curr=`expr $curr - 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                &quot;&quot;)</span><br><span class="line">                        if [ $curr -lt $snum ]; then</span><br><span class="line">                                curr=`expr $curr + 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                *)</span><br><span class="line">                        echo &quot;input the correct problem number or answer!&quot;</span><br><span class="line">                        ;;</span><br><span class="line">                esac</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">command() &#123;</span><br><span class="line">        paper=&quot;$paperdir/p2&quot;</span><br><span class="line">        cmd_ans=~/2.ans</span><br><span class="line">        grep &quot;^#&quot; $paper</span><br><span class="line">        if [ &quot;$command_first&quot; = &quot;True&quot; ]; then</span><br><span class="line">                cnum=`grep -c &#x27;^[0-9]\&#123;1,2\&#125;\.&#x27; $paperdir/p2`</span><br><span class="line">                #gen_ans 2 8 $cnum</span><br><span class="line">                gen_ans 2 $cnum</span><br><span class="line">        fi</span><br><span class="line">        command_first=False</span><br><span class="line">        curr=1;</span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                echo</span><br><span class="line">                pid=`sed -n &quot;$&#123;curr&#125;p&quot; $cmd_ans | cut -d&#x27;.&#x27; -f1`</span><br><span class="line">                sed -n &quot;/^$pid\./,/^$/p&quot; $paper | sed &quot;s/^$pid\./$curr./&quot;</span><br><span class="line">                echo -n &quot;ANS: &quot;</span><br><span class="line">                grep &quot;^$pid\.&quot; $cmd_ans | sed &quot;s/^$pid\.//&quot;</span><br><span class="line">                echo</span><br><span class="line">                read -rep &quot;input your answer: &quot; answer</span><br><span class="line">                if [ $curr -eq $cnum ]</span><br><span class="line">                then</span><br><span class="line">                   echo &#x27;============  Last problem. This is my bottom line. ================&#x27;</span><br><span class="line">                fi</span><br><span class="line">                case $answer in</span><br><span class="line">                0)</span><br><span class="line">                        main</span><br><span class="line">                        ;;</span><br><span class="line">                [1-9]|1[0-9])</span><br><span class="line">                        if [ $answer -le $cnum ]; then</span><br><span class="line">                                curr=&quot;$answer&quot;</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                -)</span><br><span class="line">                        if [ $curr -gt 1 ]; then</span><br><span class="line">                                curr=`expr $curr - 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                &quot;&quot;)</span><br><span class="line">                        if [ $curr -lt $cnum ]; then</span><br><span class="line">                                curr=`expr $curr + 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                *)</span><br><span class="line"></span><br><span class="line">                        #answer=$&#123;answer//\\/\\\\&#125;</span><br><span class="line">                        answer=$&#123;answer//#/\\#&#125;</span><br><span class="line">                        answer=$&#123;answer//&amp;/\\&amp;&#125;</span><br><span class="line">                        echo $answer</span><br><span class="line">                        sed  -i &quot;s#^$pid\. .*#$pid\. $answer#&quot; $cmd_ans</span><br><span class="line">                        if [ $curr -lt $cnum ]; then</span><br><span class="line">                                curr=`expr $curr + 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                esac</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">script() &#123;</span><br><span class="line">        paper=&quot;$paperdir/p3&quot;</span><br><span class="line">        grep &quot;^#&quot; $paper</span><br><span class="line">        curr=1;</span><br><span class="line">        scnum=`grep -c &#x27;^[0-9]\&#123;1,2\&#125;\.&#x27; $paperdir/p3`</span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                echo</span><br><span class="line">                sed -n &quot;/^$curr\./,/^$/p&quot; $paper</span><br><span class="line">                read -p &quot;input your selection( n(nano)/v(vim) to edit the file ): &quot; answer</span><br><span class="line">                case $answer in</span><br><span class="line">                0)</span><br><span class="line">                        main</span><br><span class="line">                        ;;</span><br><span class="line">                [1-$scnum])</span><br><span class="line">                        curr=&quot;$answer&quot;</span><br><span class="line">                        ;;</span><br><span class="line">                -)</span><br><span class="line">                        if [ $curr -gt 1 ]; then</span><br><span class="line">                                curr=`expr $curr - 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                n)</span><br><span class="line">                        nano ~/$curr.sh</span><br><span class="line">                        ;;</span><br><span class="line">                v)</span><br><span class="line">                        vim ~/$curr.sh</span><br><span class="line">                        ;;</span><br><span class="line">                &quot;&quot;)</span><br><span class="line">                        if [ $curr -lt $scnum ]; then</span><br><span class="line">                                curr=`expr $curr + 1`</span><br><span class="line">                        fi</span><br><span class="line">                        ;;</span><br><span class="line">                *)</span><br><span class="line">                        echo &quot;input the correct number&quot;</span><br><span class="line">                        ;;</span><br><span class="line">                esac</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makefile() &#123;</span><br><span class="line">        paper=&quot;$paperdir/p4&quot;</span><br><span class="line">        cat $paper</span><br><span class="line">        read -p &quot;press 0 to quit or any other key to start edit the makefile...: &quot; choice</span><br><span class="line">        if [ $choice = &quot;0&quot; ]; then</span><br><span class="line">                main</span><br><span class="line">        else</span><br><span class="line">                vi makefile</span><br><span class="line">                main</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gen_ans() &#123;</span><br><span class="line">        ans_file=~/$1.ans</span><br><span class="line">        if [ -f &quot;$ans_file&quot; ]; then</span><br><span class="line">                return</span><br><span class="line">                echo -ne  &quot;There is a answer sheet in your home directory.\nDo you want to recreate it? (y/n): &quot;</span><br><span class="line">                read ans</span><br><span class="line">                if [ &quot;$ans&quot; = &quot;Y&quot; -o &quot;$ans&quot; = &quot;y&quot; ]; then</span><br><span class="line">                        shuf -i 1-$2 | sed &#x27;s/$/. /&#x27;  &gt; $ans_file</span><br><span class="line">                fi</span><br><span class="line">        else</span><br><span class="line">                shuf -i 1-$2 | sed &#x27;s/$/. /&#x27;  &gt;&gt; $ans_file</span><br><span class="line">        fi</span><br><span class="line">        if [ $# -gt 2 ]; then</span><br><span class="line">                seq `expr $2 + 1` $3 | sed &#x27;s/$/. /&#x27;  &gt;&gt; $ans_file</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        #seq -f &#x27;%g. &#x27; 1 $2  &gt;&gt; $select_ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/06/21/shu-ju-ku/"/>
      <url>/2024/06/21/shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系数据库，是指采用了关系模型来组织数据的数据库简单来说，关系模型指的就是二维表格模型</p><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>非关系型数据库，又被称为NoSQL(Not Only SQL),意为不仅仅是SQL,对<code>NOSQL</code>最普遍的定义是<code>非关联型的</code>，强调Key-Value的方式存储。</p><h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p><code>数据库管理系统</code>(Database Management System,简称<code>DBMS</code>)是为管理数据库而设计的软件系统</p><ul><li>包括三大部分构成。<ul><li>数据库文件集合:主要是一系列的数据文件，作用是存储数据。</li><li>数据库服务器:主要负责对数据文件以及文件中的数据进行管理。</li><li>数据库客户端:主要负责和服务端通信，向服务端传输数据或者从服务端获取数据。</li></ul></li></ul><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>数据库客户端和数据库服务端怎么通讯呢?<br>数据库客户端通过“特殊的语言”告诉服务端，客户端想要做什么.这个专门的语言就是SQL语句</p><ul><li><code>SQL(Structured Query Language)</code>是结构化査询语言，是一种用来操作<code>RDBMS(Relational Database Management System 所谓的关系型数据库管理系统RDBMS)</code>的数据库语言。</li><li>当前几乎所有关系型数据库都支持使用SQL语言进行操作,也就是说可以通过 SQL 操作 oracle,sql server,mysql,sqlite 等等所有的关系型的数据库。</li></ul><h2 id="关系型数据库中核心元素（主键定义）"><a href="#关系型数据库中核心元素（主键定义）" class="headerlink" title="关系型数据库中核心元素（主键定义）"></a>关系型数据库中核心元素（主键定义）</h2><ul><li>字段:一列数据类型相同的数据</li><li>记录:一行记录某个事物的完整信息的数据</li><li>数据表:有若干字段和记录组成</li><li>数据库:由若干数据表组成</li><li>主键:唯一标识一行记录的字段（可以由多个字段组成）<br> <img src="/2024/06/21/shu-ju-ku/main_element.png" alt="alt text"></li></ul><h2 id="搭建mysql环境"><a href="#搭建mysql环境" class="headerlink" title="搭建mysql环境"></a>搭建mysql环境</h2><ul><li><p>安装 MySQL 数据库服务端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li><li><p>安装 MySQL 数据库客户端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-client</span><br></pre></td></tr></table></figure></li><li><p>启动 MySQL 数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure></li><li><p>停止 MySQL 数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure></li><li><p>查看 MySQL 数据库启动状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps ajx|grep mysql</span><br></pre></td></tr></table></figure></li></ul><h3 id="MySQL配置文件-了解"><a href="#MySQL配置文件-了解" class="headerlink" title="MySQL配置文件(了解)"></a>MySQL配置文件(了解)</h3><p>配置文件目录为&#x2F;etc&#x2F;mysql&#x2F;mysql.cnf:<br>进入mysql.conf.d目录，打开mysql.cnf，可以看到配置项:</p><h4 id="主要配置选项"><a href="#主要配置选项" class="headerlink" title="主要配置选项"></a>主要配置选项</h4><ul><li>bind-address表示服务器绑定的ip，默认为127.0.0.1</li><li>port表示端口，默认为3306</li><li>datadir表示数据库目录，默认为&#x2F;var&#x2F;lib&#x2F;mysql</li><li>general_log_file表示普通日志，默认为&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql.log</li><li>log_error表示错误日志，默认为&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log</li></ul><h2 id="MySql数据类型"><a href="#MySql数据类型" class="headerlink" title="MySql数据类型"></a>MySql数据类型</h2><ul><li>枚举类型<br>枚举类型enum，在定义字段时就预告规定好固定的几个值，然后插入记录时值只能在这几个固定好的值中选择一个<ul><li>语法定义:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gender enum(&#x27;男&#x27;,&#x27;女&#x27;,&#x27;妖&#x27;)</span><br></pre></td></tr></table></figure></li><li>应用场景:<br>当值是几个固定可选时，比如:性别、星期、月份、表示状态时(比如:是、否)</li></ul></li><li>decimal: 定点数<ul><li>decimal(5,2)代表共5位数字，其中2位是小数，比如:888.88</li></ul></li><li>char:定长字符串<ul><li>char(10):不管实际使用,必然占用10个字符空间</li></ul></li><li>varchar:变长字符串<ul><li>varchar(10):根据实际使用占用空间</li></ul></li></ul><h2 id="数据完整性和约束"><a href="#数据完整性和约束" class="headerlink" title="数据完整性和约束"></a>数据完整性和约束</h2><h3 id="1-数据完整性"><a href="#1-数据完整性" class="headerlink" title="1.数据完整性"></a>1.数据完整性</h3><p><code>数据完整性</code>用于保证数据的<code>正确性</code>。系统在更新、插入或除等操作时都要检查数据的完整性，核实其约束条件。<br>参照完整性<br><strong>参照完整性</strong>属于表间规则。在更新、插入或者删除记录时，如果只改其一，就会影响数据的完整性。如<strong>删除表2的某记录后</strong>，表1的相应记录未删除，致使这些记录成为孤立记录。</p><h3 id="2-约束"><a href="#2-约束" class="headerlink" title="2.约束"></a>2.约束</h3><table><thead><tr><th>约束类型</th><th>约束说明</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束(设置非空约束，该字段不能为空)</td></tr><tr><td>PRIMARY KEY</td><td>主键约束(唯一性，非空性)</td></tr><tr><td>UNIQUE KEY</td><td>唯一约束(唯一性，可以空，但只能有一个)</td></tr><tr><td>DEFAULT</td><td>默认约束(该数据的默认值)</td></tr><tr><td>FOREIGN KEY</td><td>外键约束(需要建立两表间的关系)</td></tr></tbody></table><h2 id="MySql基本操作"><a href="#MySql基本操作" class="headerlink" title="MySql基本操作"></a>MySql基本操作</h2><ul><li>快捷键<ol><li><code>ctrl + a</code>  快速回到行首</li><li><code>ctrl + e</code>  快速回到行尾</li><li><code>ctrl + l</code>  清屏</li><li><code>ctrl + c</code>  回车 结束</li></ol></li><li>数据库登陆和连接<ol><li><code>mysql -uroot -p密码</code>  root是根用户(超级用户)</li><li><code>quit/exit/ctrl + d</code>  退出mysql</li></ol></li><li>显示数据库信息<ol><li><code>select version();</code>  显示数据库版本</li><li><code>select now();</code>  显示时间</li></ol></li></ul><h2 id="数据库基本操作命令"><a href="#数据库基本操作命令" class="headerlink" title="数据库基本操作命令"></a>数据库基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>show databases;</td><td>查看所有数据库</td><td>show databases;</td></tr><tr><td>select database();</td><td>查看当前使用的数据库</td><td>select database();</td></tr><tr><td>create database数据库名 charset&#x3D;utf8;</td><td>创建数据库</td><td>create database python charset&#x3D;utf8;</td></tr><tr><td>use 数据库名;</td><td>使用数据库</td><td>use python;</td></tr><tr><td>drop database 数据库名;</td><td>删除数据库-慎重</td><td>drop database python;</td></tr></tbody></table><p>在MySQL中，您可以使用以下SQL语句来查看创建数据库的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE database_name;</span><br></pre></td></tr></table></figure><p>这条SQL语句将显示创建指定数据库的SQL语句，包括数据库名称和其默认字符集。您可以将 <code>database_name</code> 替换为实际的数据库名称来查看该数据库的创建语句。</p><h2 id="数据表基本操作命令"><a href="#数据表基本操作命令" class="headerlink" title="数据表基本操作命令"></a>数据表基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>show tables;</td><td>查看当前数据库中所有表</td></tr><tr><td>desc 表名;</td><td>查看表结构</td></tr><tr><td>show create table 表名</td><td>查看表的创建语句-详细过程</td></tr></tbody></table><ul><li>创建表<ul><li>int unsigned 无符号整形</li><li>auto_increment 表示自动增长</li><li>not null 表示不能为空</li><li>primary key 表示主键</li><li>default 默认值</li><li>create table 数据表名字(字段 类型 约束[，字段 类型 约束]);</li></ul></li></ul><h2 id="数据表基本操作命令-1"><a href="#数据表基本操作命令-1" class="headerlink" title="数据表基本操作命令"></a>数据表基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>ALTER TABLE 表名 ADD 列名 类型;</code></td><td><strong>添加字段</strong>：向表中增加一个新的列，需指定列名和数据类型。</td></tr><tr><td><code>ALTER TABLE 表名 CHANGE 原名 新名 类型及约束;</code></td><td><strong>重命名字段</strong>：更改现有列的名字，并可同时修改其数据类型和约束条件。</td></tr><tr><td><code>ALTER TABLE 表名 MODIFY 列名 类型及约束;</code></td><td><strong>修改字段类型</strong>：更改指定列的数据类型及约束条件，不改变列名。</td></tr><tr><td><code>ALTER TABLE 表名 DROP 列名;</code></td><td><strong>删除字段</strong>：从表中移除指定的列。</td></tr><tr><td><code>DROP TABLE 表名;</code></td><td><strong>删除表</strong>：完全删除指定的表及其所有数据，这是一个不可逆的操作。</td></tr></tbody></table><h2 id="数据增删改查操作"><a href="#数据增删改查操作" class="headerlink" title="数据增删改查操作"></a>数据增删改查操作</h2><ul><li>增加数据</li></ul><table><thead><tr><th>命令形式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>INSERT INTO 表名 VALUES (...);</code></td><td><strong>全列插入</strong>：值的顺序需与表结构中的字段顺序一致。</td><td><code>INSERT INTO Students VALUES (&#39;John Doe&#39;, 20, &#39;Computer Science&#39;);</code></td></tr><tr><td><code>INSERT INTO 表名 (列1,...) VALUES (值1,...);</code></td><td><strong>部分列插入</strong>：仅指定列和对应的值，值的顺序与列出的列顺序对应。</td><td><code>INSERT INTO Students (Name, Major) VALUES (&#39;Jane Doe&#39;, &#39;Mathematics&#39;);</code></td></tr><tr><td><code>INSERT INTO 表名 VALUES (...),(...)...;</code></td><td><strong>一次性插入多行数据</strong>：在单个命令中插入多行，每行数据用逗号分隔。所有行都必须遵循全列插入的规则。</td><td><code>INSERT INTO Students VALUES (&#39;Alice Smith&#39;, 19, &#39;Physics&#39;), (&#39;Bob Johnson&#39;, 21, &#39;Chemistry&#39;);</code></td></tr><tr><td><code>INSERT INTO 表名 (列1,...) VALUES (值1,...),(值1,...)...;</code></td><td><strong>部分列多行插入</strong>：结合了部分列插入和一次性插入多行的特点，每对值集对应一行，并指定了列。</td><td><code>INSERT INTO Students (Name, Major) VALUES (&#39;Eva Brown&#39;, &#39;Biology&#39;), (&#39;Sam Wilson&#39;, &#39;Engineering&#39;);</code></td></tr></tbody></table><ul><li>修改查询数据</li></ul><table><thead><tr><th>命令形式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>SELECT * FROM 表名;</code></td><td><strong>查询所有列数据</strong>：从指定表中选取所有列的所有数据行。</td><td><code>SELECT * FROM Employees;</code></td></tr><tr><td><code>SELECT 列1,列2... FROM 表名;</code></td><td><strong>查询指定列数据</strong>：仅选取指定列的数据行。</td><td><code>SELECT FirstName, LastName FROM Employees;</code></td></tr><tr><td><code>UPDATE 表名 SET 列1=值1,列2=值2... WHERE 条件;</code></td><td><strong>修改数据</strong>：更新表中满足指定条件的行的列值。</td><td><code>UPDATE Employees SET Salary=50000 WHERE Department=&#39;Sales&#39;;</code></td></tr><tr><td><code>SELECT 字段 as &quot;别名&quot;, 字段 as &quot;别名&quot;... FROM 表名;</code></td><td><strong>查询指定列(可以使用as为列或表指定别名)数据</strong>：仅选取指定列的数据行,并起别名</td><td><code>SELECT FirstName as &quot;姓&quot;, LastName as &quot;名&quot; FROM Employees;</code></td></tr><tr><td><code>SELECT 别名.字段 FROM 表名 AS 表的别名</code></td><td><strong>给表起别名</strong></td><td><code>SELECT s.name FROM students AS s;</code></td></tr><tr><td><code>SELECT DISTINCT 字段 FROM 表名;  </code></td><td><strong>去重查询</strong></td><td><code>SELECT DISTINCT gender FROM students;</code></td></tr></tbody></table><ul><li>删除数据</li></ul><ol><li>物理删除</li></ol><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>delete from 表名 where 条件;</td><td>删除数据</td></tr></tbody></table><ol><li>逻辑删除<br>用一个字段来表示 这条信息是否已经不能再使用了<br>给 students 表添加<code>is_delete</code> 字段 bit 类型<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举例:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">add</span> is_delete BIT <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> is_delete<span class="operator">=</span>l <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-WHERE关键字"><a href="#1-WHERE关键字" class="headerlink" title="1.WHERE关键字"></a>1.WHERE关键字</h3><h4 id="1-1-where语句的作用"><a href="#1-1-where语句的作用" class="headerlink" title="1.1 where语句的作用"></a>1.1 where语句的作用</h4><p>使用where子句对表中的数据筛选，结果为true的记录会出现在结果集中</p><ul><li><p>条件查询语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="comment">-- eg:  </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>where</strong>后面支持<strong>多种运算符</strong>，进行条件的处理:</p><ul><li>比较运算符</li><li>逻辑运算符</li><li>模糊查询</li><li>范围查询</li><li>空判断</li></ul></li></ul><h4 id="1-2-比较运算符"><a href="#1-2-比较运算符" class="headerlink" title="1.2 比较运算符"></a>1.2 比较运算符</h4><p>常见的比较运算符</p><ul><li>等于: <code>=</code></li><li>大于: <code>&gt;</code></li><li>大于等于: <code>&gt;=</code></li><li>小于: <code>&lt;</code></li><li>小于等于: <code>&lt;=</code></li><li>不等于: <code>!=</code> 或 <code>&lt;&gt;</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- eg:  其他运算符类似</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3-逻辑运算符"><a href="#1-3-逻辑运算符" class="headerlink" title="1.3 逻辑运算符"></a>1.3 逻辑运算符</h4><ul><li><code>AND</code> 表示有多个条件时，多个条件必须同时成立(值为True)</li><li><code>OR</code>表示有多个条件时，满足任意一个条件时成立</li><li><code>NOT</code>表示取反操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 18和28岁之间的所有学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">28</span>;</span><br><span class="line"><span class="comment">-- 失败(错误格式):</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="number">18</span><span class="operator">&lt;</span>age<span class="operator">&lt;</span><span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 18岁以上的女性</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> l8 <span class="keyword">and</span> gender<span class="operator">=</span>&quot;女&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 18以上或者身高高过180(包含)以上</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">or</span> height <span class="operator">&gt;=</span> <span class="number">180</span>;</span><br><span class="line"><span class="comment">-- not</span></span><br><span class="line"><span class="comment">-- 不在 18岁以上的女性 这个范围内的信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">not</span>(age <span class="operator">&gt;</span> l8 <span class="keyword">and</span> gender<span class="operator">=</span>&quot;女&quot;);</span><br><span class="line"><span class="comment">-- 注意:使用 &quot;()&quot;   运算符优先级问题</span></span><br></pre></td></tr></table></figure><h4 id="1-4-模糊查询"><a href="#1-4-模糊查询" class="headerlink" title="1.4 模糊查询"></a>1.4 模糊查询</h4><ul><li><code>like</code>关键字</li><li>like后跟<code>% </code>表示任意多个任意字符,<code>_</code>表示一个任意字符<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询姓名中 以“小”开始的名字</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> &quot;小%&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-5-范围查询"><a href="#1-5-范围查询" class="headerlink" title="1.5 范围查询"></a>1.5 范围查询</h4><ul><li>知道<code>between-and</code>和<code>in</code>的区别</li><li>范围查询分为连续范围查询和非连续范围查询:<br>in 表示在一个非连续的范围内<br>between .. and .. 表示在一个连续的范围内</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询编号为3至8的学生:</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">-- 注意:select* from students where age not(petween 18 and 34);是错误的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄为18、34的姓名</span></span><br><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">18</span>,<span class="number">34</span>);</span><br></pre></td></tr></table></figure><h4 id="1-6-where之空值判断"><a href="#1-6-where之空值判断" class="headerlink" title="1.6 where之空值判断"></a>1.6 where之空值判断</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="order排序查询"><a href="#order排序查询" class="headerlink" title="order排序查询"></a>order排序查询</h3><ul><li><code>asc</code> 升序</li><li><code>desc</code> 降序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">18</span>,<span class="number">34</span>) <span class="keyword">and</span> gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> height <span class="keyword">desc</span>, age <span class="keyword">desc</span>; </span><br><span class="line"><span class="comment">-- 字段1 排序规则 ，字段2 排序规则</span></span><br></pre></td></tr></table></figure>可以按照多个字段排序，当第一字段数值相同，比较第二个字段，以此类推</li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>count(字段)</code></td><td>计算包含非NULL值的指定字段的总行数</td></tr><tr><td><code>max(字段)</code></td><td>求指定字段的最大值</td></tr><tr><td><code>min(字段)</code></td><td>求指定字段的最小值</td></tr><tr><td><code>sum(字段)</code></td><td>求指定字段所有值的总和</td></tr><tr><td><code>avg(字段)</code></td><td>求指定字段的平均值</td></tr></tbody></table><h4 id="7-2-聚合函数的作用和特点"><a href="#7-2-聚合函数的作用和特点" class="headerlink" title="7.2 聚合函数的作用和特点"></a>7.2 聚合函数的作用和特点</h4><p><strong>聚合函数作用:聚合函数会把当前所在表当做一个组进行统计</strong><br>聚合函数有以下几个特点:</p><ul><li>每个组函数接收一个参数(字段名或者表达式)</li><li>统计结果中默认忽略字段为NULL的记录</li><li>不允许出现嵌套 比如sum(max(xx))<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询男性有多少人</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算平均年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li><li><code>round</code>函数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- round(123.23, 1)表示保留1位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对年龄求平均值并保留两位小数</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="built_in">avg</span>(age),<span class="number">2</span>) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><h3 id="group分组查询"><a href="#group分组查询" class="headerlink" title="group分组查询"></a>group分组查询</h3><h4 id="1-1-什么是分组"><a href="#1-1-什么是分组" class="headerlink" title="1.1 什么是分组"></a>1.1 什么是分组</h4><p>什么是分组?</p><p>所谓的分组就是将一个“数据集”划分成若干个“小区域”,然后针对若干个“小区域”进行数据处理。</p><p><strong>group by分组</strong></p><blockquote><p><strong>使用特点</strong><br>  <em>group by的含义</em>:将查询结果按照1个或多个字段进行分组，字段值相同的为一组<br>  <em>group by</em>可用于<strong>单个字段</strong>分组，也可用于<strong>多个字段</strong>分组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组，查询所有的性别</span></span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="keyword">select</span> name,gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;错误</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算每种性别中的人数</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- group_concat()函数</span></span><br><span class="line"><span class="comment">-- 查询同种性别中的姓名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group</span> concat(name),gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询平均年龄超过30岁的性别，以及姓名 having avg(age)&gt; 30(重点)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group</span> concat(name),gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> <span class="built_in">avg</span>(age) <span class="operator">&gt;</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- with rollup 汇总的作用(了解)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br><span class="line"><span class="comment">-- with rollup的作用是:在数据表最后新增一行，来记录当前表中该字段对应的操作结果，一般是汇总结果</span></span><br></pre></td></tr></table></figure><h3 id="limit-限制-分页查询"><a href="#limit-限制-分页查询" class="headerlink" title="limit(限制)分页查询"></a>limit(限制)分页查询</h3><h4 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h4><p><code>Q</code> select * from 淘宝某个数据表，会产生什么现象?<br><code>A</code> 由于数据过多很有可能直接死机了</p><h4 id="2-limit限制查询"><a href="#2-limit限制查询" class="headerlink" title="2.limit限制查询"></a>2.limit限制查询</h4><p>可以使用 <strong>limit</strong> 限制取出记录的数量，但 <strong>limit</strong> 要写在 sql语句的最后</p><p><strong>语法</strong></p><ul><li>limit 起始记录,记录数</li></ul><p><strong>说明:</strong></p><ul><li>起始记录是指从第几条记录开始取，第一条记录的下标是0</li><li>记录数是指从起始记录开始向后依次取的记录数</li></ul><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="1-为什么要使用连接查询"><a href="#1-为什么要使用连接查询" class="headerlink" title="1.为什么要使用连接查询"></a>1.为什么要使用连接查询</h4><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接查询:查询的结果为两个表符合条件匹配到的数据<br><img src="/2024/06/21/shu-ju-ku/%E5%86%85%E8%BF%9E%E6%8E%A5.png" alt="alt text"></p><ul><li>语法:<br>select 字段 from 表1 inner join 表2 on 表1.字段1&#x3D;表2.字段2</li><li>注意:<ol><li>内连接:根据连接条件取出两个表“交集”</li><li>on 是连接条件， where是连接后筛选条件</li></ol></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><strong>左外连接查询</strong>:查询数据为两个表匹配到的数据和左表的数据</p><ul><li>注意: 对于右表中不存在的数据使用null填充<br><img src="/2024/06/21/shu-ju-ku/%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5.png" alt="alt text"></li><li>语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左连接:</span></span><br><span class="line">主表 <span class="keyword">left</span> <span class="keyword">join</span> 从表 <span class="keyword">on</span> 连接条件;</span><br><span class="line"><span class="comment">-- 右连接:</span></span><br><span class="line">主表 <span class="keyword">right</span> <span class="keyword">join</span> 从表 <span class="keyword">on</span> 连接条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 能够使用连接的前提是，多表之间有字段上的关联</span></span><br><span class="line"><span class="comment">-- 左连接和右连接区别在于主表在SQL语句中的位置,因此实际左连接就可以满足常见需求</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>使用自身和自身连接,第一次查询的结果被第二次查询时用到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> city.<span class="operator">*</span> <span class="keyword">from</span> areas <span class="keyword">as</span> city <span class="keyword">inner</span> <span class="keyword">join</span> areas <span class="keyword">as</span> province <span class="keyword">on</span> city.pid<span class="operator">=</span>province.aid <span class="keyword">where</span> province.atitle<span class="operator">=</span>&quot;广东省&quot;;</span><br></pre></td></tr></table></figure><p>使用自连接査询 只需要使用一个表 可以加开査询速度 减少数据表占用空间<br>自连接查询本质就还是连接查询</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p><strong>子查询</strong>:把一个查询的结果当做另一查询的条件</p><p>子查询分为三类</p><ul><li>标量子查询:子查询返回的结果是一个数据(一行一列)</li><li>列子查询:返回的结果是一列(一列多行)</li><li>行子查询:返回的结果是一行(一行多列)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查出高于平均身高的信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(height) <span class="keyword">from</span> students);</span><br><span class="line"><span class="comment">-- 查出能够对应上班级号的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> students <span class="keyword">where</span> cls_id <span class="keyword">in</span>(<span class="keyword">select</span> id <span class="keyword">from</span> classes);</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySql高级"><a href="#MySql高级" class="headerlink" title="MySql高级"></a>MySql高级</h2><h3 id="删除异常"><a href="#删除异常" class="headerlink" title="删除异常"></a>删除异常</h3><p><img src="/2024/06/21/shu-ju-ku/%E5%88%A0%E9%99%A4%E5%BC%82%E5%B8%B8.png" alt="alt text"></p><p>由于只存在<strong>商品信息一张表</strong>，其中既有商品信息又有<strong>分类名称</strong>和<strong>品牌名称</strong>。</p><p>当把某个<strong>商品信息</strong>删除后，本不应该删除的 <strong>&lt;独立于商品信息的分类和品牌&gt;</strong> 等信息结果也随着删除商品信息而删除，那么此时存在<strong>删除异常</strong>。</p><p><img src="/2024/06/21/shu-ju-ku/%E6%9C%80%E7%BB%88%E8%A1%A8.png" alt="alt text"></p><h4 id="信息表优化"><a href="#信息表优化" class="headerlink" title="信息表优化"></a>信息表优化</h4><ul><li>第一步: 创建商品种类表</li><li>第二步: 同步数据到商品种类表中</li><li>第三步: 更新商品信息表数据</li><li>第四步: 修改商品信息表表结构</li></ul><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><h4 id="1-什么是外键？"><a href="#1-什么是外键？" class="headerlink" title="1.什么是外键？"></a>1.什么是外键？</h4><ul><li>外键的作用<ul><li>外键有一个很重要的作用: 防止无效信息的插入</li></ul></li><li>注意:<ul><li>关键字: foreign key,只有 innodb 数据库引擎才能使用外键</li><li>外键本身也是一种约束 和 not null 等约束一样</li></ul></li></ul><h4 id="2-外键的使用"><a href="#2-外键的使用" class="headerlink" title="2.外键的使用"></a>2.外键的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> <span class="keyword">foreign</span> key(cate_id) <span class="keyword">references</span> goods_cates(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何取消外键约束</span></span><br><span class="line"><span class="comment">-- 需要先获取外键约束名称，该名称系统会自动生成,可以通过查看表创建语句来获取名称</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> goods;</span><br><span class="line"><span class="comment">-- 获取名称之后就可以根据名称来删除外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">drop</span> <span class="keyword">foreign</span> key goods_ibfk_1;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">drop</span> <span class="keyword">foreign</span> key goods_ibfk_2;</span><br><span class="line"><span class="comment">-- 注意:使用到外键约束会极大的降低表更新的效率,所以在追求读写效率优先的场景下一般很少使用外键</span></span><br></pre></td></tr></table></figure><ul><li>在创建数据表的时候设置外键约束<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表的同时直接创建外键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">default</span> <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">  price <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">  cate_id <span class="type">int</span> unsigned,</span><br><span class="line">  brand_id <span class="type">int</span> unsigned,</span><br><span class="line">  is_show bit <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">  is_saleoff bit <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreign</span> key(cate_id)<span class="keyword">references</span> goods_cates(id),<span class="keyword">foreign</span> key(brand_id) <span class="keyword">references</span> goods_brands(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="1-什么是视图"><a href="#1-什么是视图" class="headerlink" title="1.什么是视图"></a>1.什么是视图</h4><p>视图就是一个能够把复杂SQL语句的功能封装起来的一个虚表。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上</p><p>视图是对若干张基本表的引用，一张虚表，不存储具体的数据(基本表数据发生了改变，视图也会跟着改变)</p><p>视图的好处:方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性，复用性;</p><h4 id="2-视图的使用"><a href="#2-视图的使用" class="headerlink" title="2.视图的使用"></a>2.视图的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义(创建)视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名字(一般使用v开头) <span class="keyword">as</span> <span class="keyword">select</span>语句;</span><br><span class="line"><span class="comment">-- 查看视图</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="comment">-- 使用视图</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_goods_info,</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名称;</span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><ol><li>视图封装了对多张基本表的复杂操作，简化用户操作</li><li>视图只是一个虚表,并不存储任何基本表的表数据,当用户使用视图的时候。视图会从基本表中取出</li><li>通过视图可以对用户展示指定字段从而屏蔽其他字段数据，更加安全</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1. 事务的概念"></a>1. 事务的概念</h4><p>事务Transaction,是指作为一个基本工作单元执行的一系列SQL语句的操作,要么完全地执行,要么完全地都不执行。</p><p>事务回滚</p><h4 id="2-事务四大特性"><a href="#2-事务四大特性" class="headerlink" title="2.事务四大特性"></a>2.事务四大特性</h4><ol><li>原子性(Atomicity)<ul><li>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</li></ul></li><li>一致性(Consistency)<ul><li>数据库总是从一致性的状态转换到另一个一致性的状态。(在前面的例子中，一致性确保了即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失500元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中)</li></ul></li><li>隔离性(Isolation)<ul><li>通常来说，个事务所做的修改在最终提交以前，对其他事务是不可见的。(在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去500元)</li></ul></li><li>持久性(Durability)<ul><li>一旦事务提交，则其所做的修改会永久保存到数据库。(此时即使系统崩溃，修改的数据也不会丢失。)</li></ul></li></ol><h4 id="3-事务的使用"><a href="#3-事务的使用" class="headerlink" title="3.事务的使用"></a>3.事务的使用</h4><ul><li>开启事务</li></ul><p>开启事务后执行修改命令变更会维护到本地缓存中，而不维护到物理表中<br><code>begin;</code> 或者<code>start transaction;</code></p><ul><li>提交事务</li></ul><p>将缓存中的数据变更维护到物理表中<br><code>commit;</code></p><ul><li>回滚事务</li></ul><p>放弃缓存中变更的数据 表示事务执行失败 应该回到开始事务前的状态<br><code>rollback;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> age<span class="operator">=</span><span class="number">10</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 至此才完成一次事务,真正修改了数据</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="1-索引的作用"><a href="#1-索引的作用" class="headerlink" title="1.索引的作用"></a>1.索引的作用</h4><p><strong>思考:</strong><br>如何在一个图书馆中找到一本书?<br>图书馆管理系统，大家要找书籍先在系统上查找到书籍所在的房屋编号和货架编号，然后就可以直接大摇大摆的去取书了。</p><p>我们把这种能够帮助我们快速查询数据的线索就称之为索引<br>如果数据库本身是一个字典，<strong>那么索引就是这个字典的目录</strong></p><p><strong>索引的本质</strong><br>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的位置信息。</p><h4 id="2-索引的使用"><a href="#2-索引的使用" class="headerlink" title="2.索引的使用"></a>2.索引的使用</h4><p>查看表中已有索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> index 索引名【可选】(字段名,... );</span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名称 <span class="keyword">on</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 创建测试表：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 插入数据：</span></span><br><span class="line"></span><br><span class="line">使用Python脚本或其他方式向`test`表中插入数据。这里不展示具体的Python脚本，但请确保插入足够的数据以便观察索引的效果。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 没有索引时测试查询性能：</span></span><br><span class="line"></span><br><span class="line">在测试之前，确保MySQL的profiling功能是开启的（如果您的MySQL版本支持）。但请注意，profiling在MySQL <span class="number">8.0</span>及更高版本中已被弃用。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：MySQL 8.0+中SET profiling = 1; 已被弃用</span></span><br><span class="line"><span class="comment">-- 使用 EXPLAIN 替代</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> title <span class="operator">=</span> <span class="string">&#x27;some_title&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果您使用的是MySQL 8.0或更高版本，直接使用`EXPLAIN`命令来分析查询的执行计划。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 为`title`字段创建索引：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test <span class="keyword">ADD</span> INDEX idx_title (title);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 有索引时测试查询性能：</span></span><br><span class="line"></span><br><span class="line">再次使用`EXPLAIN`命令来查看查询的执行计划，或者使用其他性能分析工具（如`Performance Schema`）来监控性能。</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> title <span class="operator">=</span> <span class="string">&#x27;some_title&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 请注意，即使您使用的是支持profiling的MySQL版本，也建议优先使用`EXPLAIN`命令，因为它提供了更详细的信息，并且不需要在每次查询之前都开启profiling。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 比较结果：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 比较没有索引和有索引时查询的执行计划，观察索引如何影响查询性能。在有索引的情况下，您应该能看到查询速度的提升，特别是当查询条件能够充分利用索引时。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点:</li></ul><p>加快数据的查询速度</p><ul><li>缺点:</li></ul><p>创建索引会浪费时间和占用磁盘空间，并且随着数据量的增加所耗费的时间会越来越多</p><ul><li>使用原则:</li></ul><ol><li>经常发生数据更新的表避免使用过多的索引</li><li>数据量小的表没有必要使用索引</li><li>数据量较大同时不会频发发生数据更改的表可以使用索引</li></ol><h3 id="数据库设计之三范式"><a href="#数据库设计之三范式" class="headerlink" title="数据库设计之三范式"></a>数据库设计之三范式</h3><h4 id="1-什么是三范式"><a href="#1-什么是三范式" class="headerlink" title="1.什么是三范式"></a>1.什么是三范式</h4><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式</p><p>各种范式呈递次规范，越高的范式数据库几余越小。</p><h4 id="2-范式的划分"><a href="#2-范式的划分" class="headerlink" title="2.范式的划分"></a>2.范式的划分</h4><p><strong>数据冗余</strong>是指数据之间的重复，也可以说是同一数据存储在不同数据文件中的现象</p><p><img src="/2024/06/21/shu-ju-ku/%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99.png" alt="alt text"></p><h4 id="3-范式的划分"><a href="#3-范式的划分" class="headerlink" title="3.范式的划分"></a>3.范式的划分</h4><p>根据数据库<strong>冗余的大小</strong>,目前<strong>关系型数据库</strong>有六种范式,各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>六种范式:</p><ul><li>第一范式(1NF)</li><li>第二范式(2NF)</li><li>第三范式(3NF)</li><li>巴斯-科德范式(BCNF)</li><li>第四范式(4NF)</li><li>第五范式(5NF，又称完美范式)</li></ul><p>一般遵循 前三种范式即可</p><h5 id="第一范式1NF"><a href="#第一范式1NF" class="headerlink" title="第一范式1NF"></a>第一范式1NF</h5><p>第一范式(1NF):强调的是字段的原子性，即一个字段不能够再分成其他几个字段<br><img src="/2024/06/21/shu-ju-ku/%E4%B8%80%E8%8C%83%E5%BC%8F%E8%8C%83%E4%BE%8B.png" alt="alt text"></p><h5 id="第二范式2NF"><a href="#第二范式2NF" class="headerlink" title="第二范式2NF"></a>第二范式2NF</h5><p>第二范式(2NF):<strong>满足 1NF的基础上</strong>，另外包含两部分内容</p><p>一是表必须有一个<strong>主键</strong><br>二是<strong>非主键字段</strong>必须<strong>完全</strong>依赖于主键，而不能只依赖于主键的一部分（意思是关系中非主键字段必须可以由主键唯一确定）</p><p><img src="/2024/06/21/shu-ju-ku/%E4%B8%BB%E9%94%AE%E7%94%B1%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%9E%84%E6%88%90.png" alt="alt text"></p><p><img src="/2024/06/21/shu-ju-ku/%E4%BA%8C%E8%8C%83%E5%BC%8F%E6%94%B9%E8%89%AF.png" alt="alt text"></p><h5 id="第三范式3NF"><a href="#第三范式3NF" class="headerlink" title="第三范式3NF"></a>第三范式3NF</h5><p>第三范式(3NF):<strong>满足 2NF</strong><br>另外<strong>非主键字段</strong>必须<strong>直接依赖</strong>于主键，不能存在传递依赖。</p><p>即不能存在:非主键字段 A 依赖于非主键字段 B,非主键字段 B 依赖于主键的情况</p><p><img src="/2024/06/21/shu-ju-ku/%E4%B8%89%E8%8C%83%E5%BC%8F%E5%89%8D.png" alt="alt text"></p><p><img src="/2024/06/21/shu-ju-ku/%E4%B8%89%E8%8C%83%E5%BC%8F%E5%90%8E.png" alt="alt text"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>范式:</strong><br>设计关系<strong>数据库</strong>时，遵从不同的规范<strong>要求</strong>，设计出合理的关系型数据库，这些不同的规范要求被称为不同的<strong>范式</strong>，各种范式呈递次规范，越高的范式<strong>数据库冗余</strong>越小。</p><ol><li><p>第一范式（1NF, First Normal Form）:</p><ul><li>强调列的原子性。即数据库表的每一列都是不可分割的原子数据项，不能再分。</li><li>所有的列都是单一的数据类型，如整数、字符串等。</li><li>如果某个列包含多个值（如一个列存储多个电话号码），则需要拆分该列，使得每一行数据都是唯一的，且每列数据都是原子的。</li></ul></li><li><p>第二范式（2NF, Second Normal Form）:</p><ul><li>必须满足1NF。</li><li>表必须有一个主键，主键可以是一个列或多个列的组合（复合主键）。</li><li>所有的非主键列必须完全依赖于整个主键，而不是主键的一部分。</li><li>如果存在复合主键，那么非主键列不能仅依赖于复合主键中的某一个字段，它必须依赖于整个复合主键。</li></ul></li><li><p>第三范式（3NF, Third Normal Form）:</p><ul><li>必须满足2NF。</li><li>任何非主键列不能传递依赖于主键。</li><li>这意味着，非主键列A不能依赖于非主键列B，而列B又依赖于主键。如果存在这样的依赖关系，就需要将列A和列B（以及它们相关的其他列）分离到另一个新的表中，并在两个表之间建立关联关系（如使用外键）。</li></ul></li></ol><p>第三范式的主要目的是减少数据冗余和更新异常。通过消除传递依赖，我们可以确保数据的一致性，并在更新数据时避免不必要的麻烦。</p><h3 id="E-R模型和表间关系"><a href="#E-R模型和表间关系" class="headerlink" title="E-R模型和表间关系"></a>E-R模型和表间关系</h3><p>E-R模型即<strong>实体-关系模型</strong><br>E-R模型就是<strong>描述数据库存储数据的结构模型</strong></p><h4 id="三种关系"><a href="#三种关系" class="headerlink" title="三种关系"></a>三种关系</h4><p><strong>表现形式</strong></p><ul><li>实体: 用矩形表示，并标注实体名称</li><li>属性: 用椭圆表示，并标注属性名称</li><li>关系: 用菱形表示，并标注关系名称<br><strong>E-R模型中的三种关系</strong></li><li>一对一</li><li>一对多(1-n)</li><li>多对多(m-n)<br><img src="/2024/06/21/shu-ju-ku/E_R.png" alt="alt text"></li></ul><h1 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>不安全因素<ol><li>非授权对数据库的恶意存取和破坏</li><li>数据库中重要的数据泄露</li><li>安全环境的脆弱性</li></ol></li></ul><p>自主存取控制方法</p><ol><li>grant revoke<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">to</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">revoke</span><span class="operator">&lt;</span>权限<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">用户、角色</span><br><span class="line"></span><br><span class="line">创建用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="operator">&lt;</span>username<span class="operator">&gt;</span> <span class="keyword">with</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="安全性控制"><a href="#安全性控制" class="headerlink" title="安全性控制"></a>安全性控制</h2><ul><li>数据库安全性控制<ul><li>用户身份鉴别<ul><li>静态口令鉴别</li><li>动态口令鉴别</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ul></li><li>存取控制</li><li>自主存取控制方法(重点讲解)；字面意思就是我们用户可以自定义和分配其他用户的操作权限<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主要通过grant  revoke来进行控制</span><br><span class="line">由两个元素构成:  数据库对象 和 操作权限</span><br><span class="line">我们定义用户的存取权限 成为授权</span><br><span class="line"></span><br><span class="line">主要存取权限</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Reference权限代表是否允许创建外键</span><br><span class="line"></span><br><span class="line">4、授权 Grant</span><br><span class="line">Grant单词翻译:</span><br><span class="line">vt.承认;同意;准许;授予</span><br><span class="line">n.拨款;补助金;授给物(如财产、授地、专有权、补助、拨款等)</span><br><span class="line"></span><br><span class="line">Grant &lt;权限&gt; on 表名[(列名)] to 用户 With grant option</span><br><span class="line">授权命令是由数据库管理员使用的，若给用户分配权限时带 Withgrant option 子句，则普通用户获权后,可把自己的权限授予其他用户。</span><br><span class="line"></span><br><span class="line">grant all privilege on 视图或者表 to usr1;</span><br><span class="line"></span><br><span class="line">5回收权限 revoke </span><br><span class="line">REVOKE &lt;权限&gt; 0N &lt;数据对象&gt; FR0M &lt;数据库用户名&gt; cascade(级联)</span><br><span class="line"></span><br><span class="line">revoke翻译:</span><br><span class="line">vt.撤销，取消;废除</span><br></pre></td></tr></table></figure><p><img src="/2024/06/21/shu-ju-ku/%E8%B5%8B%E4%BA%88%E6%9F%A5%E8%AF%A2%E6%9D%83%E9%99%90.png" alt="alt text"></p><h2 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h2><p>数据库角色（Role）是数据库管理系统（DBMS）中用于管理权限的一种机制。通过角色，数据库管理员（DBA）可以为一组用户分配相同的权限，而无需单独为每个用户设置权限。这大大简化了权限管理过程，提高了安全性和可管理性。</p><h3 id="角色的基本概念"><a href="#角色的基本概念" class="headerlink" title="角色的基本概念"></a>角色的基本概念</h3><ul><li><strong>角色</strong>：代表了一类用户，如CEO、总监、普通职员等。通过角色，可以为这些用户组分配相同的权限。</li></ul><h3 id="角色的操作"><a href="#角色的操作" class="headerlink" title="角色的操作"></a>角色的操作</h3><h4 id="1-角色的创建"><a href="#1-角色的创建" class="headerlink" title="1. 角色的创建"></a>1. 角色的创建</h4><p>使用<code>CREATE ROLE</code>语句创建角色。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ROLE CEO;</span><br></pre></td></tr></table></figure><h4 id="2-角色授权"><a href="#2-角色授权" class="headerlink" title="2. 角色授权"></a>2. 角色授权</h4><p>使用<code>GRANT</code>语句为角色分配权限。例如，为<code>CEO</code>角色授予<code>Student</code>表上的<code>SELECT</code>权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> Student <span class="keyword">TO</span> CEO;</span><br></pre></td></tr></table></figure><p>如果要为多个角色分配权限，可以在<code>TO</code>子句后列出这些角色，用逗号分隔：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> Student <span class="keyword">TO</span> CEO, Director;</span><br></pre></td></tr></table></figure><h4 id="3-把角色授权给其他用户或角色"><a href="#3-把角色授权给其他用户或角色" class="headerlink" title="3. 把角色授权给其他用户或角色"></a>3. 把角色授权给其他用户或角色</h4><p>使用<code>GRANT</code>语句将角色授权给其他用户或角色。如果加上<code>WITH ADMIN OPTION</code>，则意味着被授权的用户或角色还可以将这个角色及其权限进一步授予其他用户或角色。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> CEO <span class="keyword">TO</span> User1 <span class="keyword">WITH</span> ADMIN OPTION;</span><br></pre></td></tr></table></figure><h4 id="4-角色权限的收回"><a href="#4-角色权限的收回" class="headerlink" title="4. 角色权限的收回"></a>4. 角色权限的收回</h4><p>使用<code>REVOKE</code>语句收回角色的权限。例如，从<code>CEO</code>角色中收回<code>Student</code>表上的<code>SELECT</code>权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> Student <span class="keyword">FROM</span> CEO;</span><br></pre></td></tr></table></figure><p>如果要从用户或角色中收回角色本身，也需要使用<code>REVOKE</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> CEO <span class="keyword">FROM</span> User1;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在使用角色时，要确保遵循数据库的安全策略和最佳实践。</li><li>不要为不必要的角色分配过多的权限，以减少潜在的安全风险。</li><li>定期审查和更新角色的权限设置，以确保其与组织的需求和策略保持一致。</li></ul><h1 id="Python数据库编程"><a href="#Python数据库编程" class="headerlink" title="Python数据库编程"></a>Python数据库编程</h1><h2 id="1-Python连接MySQL"><a href="#1-Python连接MySQL" class="headerlink" title="1.Python连接MySQL"></a>1.Python连接MySQL</h2><h3 id="1-1-PyMysql模块"><a href="#1-1-PyMysql模块" class="headerlink" title="1.1 PyMysql模块"></a>1.1 PyMysql模块</h3><p>如果使用之前学习的MySQL客户端来完成这个操作，那么这个工作量无疑是巨大的</p><p>我们可以通过使用程序代码的方式去连接MySQL数据库，然后对MySQL数据库进行增删改查的方式，实现10000条数据的插入，像这样使用代码的方式操作数据库就称为<strong>数据库编程</strong></p><p>安装pymysql第三方包:<code>sudo pip3 install pymysql</code></p><h3 id="1-2-使用PyMysql模块"><a href="#1-2-使用PyMysql模块" class="headerlink" title="1.2 使用PyMysql模块"></a>1.2 使用PyMysql模块</h3><p>pymysql使用步骤</p><ol><li>导入<strong>pymysql</strong>包</li><li>创建<strong>连接对象</strong></li><li>获取<strong>游标对象</strong></li><li>pymysql完成数据的<strong>增删改查</strong>操作</li><li>关闭<strong>游标</strong>和<strong>连接</strong></li></ol><h3 id="1-3-python代码"><a href="#1-3-python代码" class="headerlink" title="1.3 python代码"></a>1.3 python代码</h3><p>在使用 <code>pymysql</code> 这个 Python 库与 MySQL 数据库进行交互时，通常需要遵循以下步骤。以下是详细的步骤说明：</p><h4 id="①-导入-pymysql-模块"><a href="#①-导入-pymysql-模块" class="headerlink" title="① 导入 pymysql 模块"></a>① 导入 pymysql 模块</h4><p>在使用 <code>pymysql</code> 之前，首先需要导入该模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br></pre></td></tr></table></figure><h4 id="②-创建连接对象"><a href="#②-创建连接对象" class="headerlink" title="② 创建连接对象"></a>② 创建连接对象</h4><p>调用 <code>pymysql</code> 模块中的 <code>connect()</code> 函数来创建连接对象。你需要提供一系列参数来配置你的连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,       <span class="comment"># 连接的mysql主机，如果本机是&#x27;localhost&#x27;</span></span><br><span class="line">    port=<span class="number">3306</span>,              <span class="comment"># 连接的mysql主机的端口，默认是3306</span></span><br><span class="line">    user=<span class="string">&#x27;yourusername&#x27;</span>,    <span class="comment"># 连接的用户名</span></span><br><span class="line">    password=<span class="string">&#x27;yourpassword&#x27;</span>,<span class="comment"># 连接的密码</span></span><br><span class="line">    database=<span class="string">&#x27;yourdb&#x27;</span>,      <span class="comment"># 数据库的名称</span></span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span>          <span class="comment"># 通信采用的编码方式，推荐使用utf8</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="③-获取游标对象"><a href="#③-获取游标对象" class="headerlink" title="③ 获取游标对象"></a>③ 获取游标对象</h4><p>获取游标对象的目标是要执行 SQL 语句，完成对数据库的增、删、改、查操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur = conn.cursor()</span><br></pre></td></tr></table></figure><h4 id="④-使用游标执行-SQL-语句"><a href="#④-使用游标执行-SQL-语句" class="headerlink" title="④ 使用游标执行 SQL 语句"></a>④ 使用游标执行 SQL 语句</h4><p>使用游标对象的 <code>execute()</code> 方法来执行 SQL 语句。返回受影响的行数，主要用于执行insert、update、delete、select等语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">sql = <span class="string">&quot;INSERT INTO your_table (column1, column2) VALUES (%s, %s)&quot;</span></span><br><span class="line">cur.execute(sql, (<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">sql = <span class="string">&quot;UPDATE your_table SET column1=%s WHERE column2=%s&quot;</span></span><br><span class="line">cur.execute(sql, (<span class="string">&#x27;new_value1&#x27;</span>, <span class="string">&#x27;some_condition&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">sql = <span class="string">&quot;DELETE FROM your_table WHERE column2=%s&quot;</span></span><br><span class="line">cur.execute(sql, (<span class="string">&#x27;some_condition&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM your_table WHERE column2=%s&quot;</span></span><br><span class="line">cur.execute(sql, (<span class="string">&#x27;some_condition&#x27;</span>,))</span><br></pre></td></tr></table></figure><h4 id="⑤-获取查询结果"><a href="#⑤-获取查询结果" class="headerlink" title="⑤ 获取查询结果"></a>⑤ 获取查询结果</h4><p>对于查询语句，可以使用游标对象的 <code>fetchone()</code> 或 <code>fetchall()</code> 方法来获取结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取查询结果集中的一条数据</span></span><br><span class="line">row = cur.fetchone()</span><br><span class="line"><span class="built_in">print</span>(row)  <span class="comment"># 输出如: (1, &#x27;张三&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取查询结果集中的所有数据</span></span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="built_in">print</span>(rows)  <span class="comment"># 输出如: [(1, &#x27;张三&#x27;), (2, &#x27;李四&#x27;)]</span></span><br></pre></td></tr></table></figure><p>注意：在调用 <code>fetchone()</code> 或 <code>fetchall()</code> 后，游标的位置会移动到下一条数据或末尾。如果你需要再次遍历结果集，通常需要重置游标位置或使用新的游标对象。</p><h4 id="⑥-提交或回滚事务"><a href="#⑥-提交或回滚事务" class="headerlink" title="⑥ 提交或回滚事务"></a>⑥ 提交或回滚事务</h4><p>如果执行了修改数据（如 INSERT、UPDATE、DELETE）的 SQL 语句，并且你希望这些更改被保存到数据库中，那么你需要调用连接对象的 <code>commit()</code> 方法。如果希望在出错时撤销这些更改，可以调用 <code>rollback()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者回滚事务</span></span><br><span class="line">conn.rollback()</span><br></pre></td></tr></table></figure><h4 id="⑦-关闭游标和连接"><a href="#⑦-关闭游标和连接" class="headerlink" title="⑦ 关闭游标和连接"></a>⑦ 关闭游标和连接</h4><p>在完成数据库操作后，需要关闭游标和连接以释放资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cur.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>注意：在实际应用中，应该使用 <code>try...except...finally</code> 语句块来确保即使在发生异常时也能正确地关闭游标和连接。</p><h1 id="SQL语句参数化"><a href="#SQL语句参数化" class="headerlink" title="SQL语句参数化"></a>SQL语句参数化</h1><h2 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h2><p>什么是SQL注入?<br>用户提交带有恶意的数据与SQL语句进行字符串方式的拼接，从而影响了SQL语句的语义，最终产生数据泄露的现象。</p><p>SQL注入是一种网络安全漏洞，攻击者可以通过在输入字段中插入恶意的SQL代码来访问或修改数据库中的数据。以下是一个简单的SQL注入案例，用于说明其工作原理和潜在危害。</p><h3 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h3><p>假设我们有一个简单的用户登录页面，用户需要输入用户名和密码来登录系统。登录页面的后台代码可能使用类似以下的SQL查询来验证用户输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;$username&#x27;</span> <span class="keyword">AND</span> password<span class="operator">=</span><span class="string">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这里的<code>$username</code>和<code>$password</code>是用户输入的用户名和密码，它们被直接嵌入到SQL查询中。</p><h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><ol><li><p><strong>攻击者输入</strong>：<br>攻击者尝试在用户名或密码字段中输入特殊字符来修改原始的SQL查询。例如，攻击者可能在用户名字段中输入<code>&#39; OR &#39;1&#39;=&#39;1</code>（注意这里的单引号用于闭合原始查询中的<code>$username</code>变量），这样原始的SQL查询就会变为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> password<span class="operator">=</span><span class="string">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>由于<code>&#39;1&#39;=&#39;1&#39;</code>始终为真，因此这个查询会返回数据库中的所有用户记录，而不管密码是什么。</p></li><li><p><strong>结果</strong>：<br>因为SQL查询被篡改，攻击者能够绕过登录验证，并可能访问到系统内的敏感信息或执行其他恶意操作。</p></li></ol><h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><p>为了防止SQL注入攻击，应该采取以下措施：</p><ol><li><p><strong>使用参数化查询</strong>：避免直接在SQL查询中嵌入用户输入，而是使用参数化查询或预编译的语句。这样，即使用户输入包含特殊字符，它们也不会被解释为SQL代码的一部分。</p></li><li><p><strong>输入验证和过滤</strong>：对用户输入进行严格的验证和过滤，确保它们只包含预期的字符和数据类型。</p></li><li><p><strong>最小权限原则</strong>：为数据库连接分配最小的必要权限，以减少潜在的安全风险。</p></li><li><p><strong>使用ORM框架</strong>：对象关系映射（ORM）框架可以帮助管理数据库操作，减少手动编写SQL查询的需要，从而降低SQL注入的风险。</p></li><li><p><strong>定期更新和维护</strong>：保持数据库软件、Web服务器和应用程序的最新版本，以利用最新的安全特性和修复潜在的安全漏洞。</p></li><li><p><strong>使用防火墙和入侵检测系统</strong>：这些工具可以帮助检测和阻止潜在的攻击行为，提高系统的安全性。</p></li></ol><h2 id="2-如何防止SQL注入"><a href="#2-如何防止SQL注入" class="headerlink" title="2.如何防止SQL注入"></a>2.如何防止SQL注入</h2><p>SQL语句参数化</p><ul><li>SQL语言中的参数使用%s来占位，此处不是python中的字符串格式化操作</li><li>将SQL语句中%s占位所需要的参数存在一个列表中，把参数列表传递给execute方法中第二个参数</li></ul><p><strong>不安全的方式</strong></p><ul><li><code>sql =&quot;select * from goods where name=&#39;%s&#39;&quot; % find_name</code></li><li><code>cs.execute(sql)</code></li></ul><p><strong>安全的方式</strong></p><ul><li>构造参数列表<ul><li><code>params = [find_name]</code></li></ul></li><li>执行select语句<ul><li><code>sql = &quot;select * from goods where name=%s&quot;</code>(这里的%s不需要加引号)</li><li>cs.execute(sql,params)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/06/21/ji-suan-ji-wang-luo/"/>
      <url>/2024/06/21/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p><a href="#crc%E5%86%97%E4%BD%99%E7%A0%81">CRC</a> </p><p><a href="#ip%E5%9C%B0%E5%9D%80">判断ip是否属于子网</a></p><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h3 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h3><ul><li>计算机网络的定义</li></ul><p>计算机网络是指将<strong>地理位置不同、具有独立功能</strong>的多台计算机及其外部设备，通过<strong>通信线路</strong>连接起来，并在网络操作系统、网络管理软件及网络通信协议的管理和协调下，实现<strong>资源共享和信息传递</strong>的计算机系统</p><ul><li>计算机网络的组成<ul><li><code>通信子网</code>: 提供信息交换的网络结点和通信线路</li><li><code>资源子网</code>: 提供共享的软件资源和硬件资源</li></ul></li><li>计算机网络的类型<ul><li>按照拓扑分类<a href="https://blog.csdn.net/swadian2008/article/details/130888598">详细</a><ul><li>星型</li><li>网状型</li><li>树形</li><li>总线型</li><li>环形</li><li>网状</li></ul></li></ul></li></ul><img src="网络结构拓扑图.png" alt="alt text" style="zoom:67%;" /><ul><li>按照范围分类<ul><li><code>局域网 LAN</code>: 几百米到十几公里</li><li><code>城域网 MAN</code>: 覆盖一个城市</li><li><code>广域网 WAN</code>: 中国或者是大省之间的通信</li><li><code>个人局域网 PAN</code>: 蓝牙耳机等</li><li><code>Internet</code></li></ul></li><li>按照传输方式分类<ul><li>有线网络: IEEE802.3</li><li>无线网络: <ol><li>IEEE802.11</li><li>WLAN无线局域网 ( wireless )</li><li>WPAN无线个域网</li></ol></li></ul></li></ul><h3 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h3><ul><li><p>传输方式</p><ul><li>按照传输方向<ol><li><code>单工</code>: 只能单方向传输的工作模式</li><li><code>双工</code>: 在同一时间，线路上只能允许一个方向的数据通</li><li><code>全双工</code>: 双方可以同时进行数据通信</li></ol></li><li>按照传输对象(方式)<ol><li>单播: 1对1</li><li>多播: 1对多</li><li>广播: 1对all(范围内)</li></ol></li></ul></li><li><p>数据交换<a href="https://blog.csdn.net/kai_locust/article/details/108301553">详见</a></p><ul><li><p>电路交换: 整个报文从源头到终点连续的传输,呼叫双方在开始通话之前，首先由交换设备在两者之间建立一条专用电路，并且在整个通话期间独占该条电路直到结束。</p><ol><li>优点：传输时延小；传输效率高，不需要添加控制信息；编码方式和信息格式不受限制。</li><li>缺点：占用信道，效率不高</li></ol></li><li><p>报文交换: 整个报文先传送到相邻结点，全部存储下来查找转发表，再转发到下一个结点<br>报文交换又叫做消息交换，以报文作为传送单元。在这种交换方式中，发送方不需要提前建立起电路，不管接收方是否空闲，可随时向其所在的交换机发送消息。交换机收到的报文消息先存储于缓冲器的队列中，然后根据报文头中的地址信息计算出路由，确定输出线路。</p><ol><li>优点：传输时延小；传输效率高，不需要添加控制信息；编码方式和信息格式不受限制。</li><li>缺点：占用信道，效率不高</li></ol></li><li><p>分组交换: 将一个报文分成多个分组，传送到相邻结点，再查找转发表，再转发到下一个结点。分组交换是将用户的消息划分为一定长度的数据分组，然后在分组数据上加上控制信息和地址，然后经过分组交换机发送到目的地址，如下图。</p><ol><li>优点：灵活，切片，线路利用率高、传输可靠性高（分组交换在网络层实现了数据校验、错误检测和重传）</li><li>缺点：传输延迟增加，额外开销，丢失和重传</li></ol></li></ul></li><li><p>通信协议和体系结构</p><ul><li><p>网络协议三要素</p><ol><li>语法</li><li>语义</li><li>时序</li></ol></li><li><p>网络模型<a href="https://blog.csdn.net/wwy0324/article/details/109310658">参考博客</a></p><ul><li><code>OSI参考模型</code> -&gt; <strong>Open System Interconnect开放式系统互联模型</strong>(由低到高)</li><li><code>物理层</code> — 单位 bit，利用传输介质为通信的网络结点之问的建立，主机连路由器使用双绞线，,路由器之间使用光纤等电气特征。</li><li><code>数据链路层</code> — 单位 帧，在物理层的基础之上，提供结点到结点之间的服务，采取差错控制和流量控制的方法实现网络互联</li><li><code>网络层</code> — 单位 分组，在数据链路层的基础之上，提供点到点之问的通信，提供路由功能，实现拥塞控制、网络互联等功能。</li><li><code>传输层</code> — 提供端到端之间的数据传输服务，实现对数据进行控制和操作的功能。</li><li><code>会话层</code> — 负责维护通信中两个节点之间的会话建立维护和断开，以及数据的交换。</li><li><code>表示层</code> — 表示层用于处理交互数据的表示方式，例如格式转换、数据的加密和解密、数据压缩和恢复等功能</li><li><code>应用层</code> — 使用应用程序通过网络服务</li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="alt text"></p><ul><li><code>TCP/IP模型</code><img src="/2024/06/21/ji-suan-ji-wang-luo/tcpip%E6%A8%A1%E5%9E%8B.png" alt="alt text"></li></ul></li></ul></li></ul><h2 id="物理层-底层"><a href="#物理层-底层" class="headerlink" title="物理层(底层)"></a>物理层(底层)</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><ol><li>机械特性: 接口是怎样的? -水晶头,光纤头</li><li>电气特性: 用多少伏特电</li><li>功能特性: 线路上电平电压的特性</li><li>过程特性: 实现不同功能所发射信号的顺序</li></ol><h4 id="两种信号"><a href="#两种信号" class="headerlink" title="两种信号"></a>两种信号</h4><ul><li><code>模拟信号</code>: 特定频段的信号，有更加丰富的表现形式</li><li><code>数字信号</code>: 不是1就是0</li></ul><h4 id="调制和编码"><a href="#调制和编码" class="headerlink" title="调制和编码"></a>调制和编码</h4><ul><li>调制 – 模拟信号转换</li><li>编码 <ul><li>数字信号转换 </li><li>编码的步骤</li></ul><ol><li>采样</li><li>量化</li><li>编码</li></ol></li><li>区别<ul><li>数据可以通过编码手段转成数字信号，也可以通过调制手段将数据转为模拟信号。</li><li>数字数据可以通过数字发送器转化为数字信号(编码)，也可以通过调制器转化为模拟信号(调)</li><li>模拟数据可以通过PCM编码器转化为数字信号(编码)，也可以通过放大器调制器转化为模拟信号(调制)</li></ul></li></ul><h4 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h4><ul><li>双绞线(8根线)<ul><li>屏蔽双绞线 STP – 抗干扰强、贵一些</li><li>非屏蔽双绞线 UTP – 便宜、抗干扰差</li><li>制作标准</li></ul><ol><li><code>568B</code> – 橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</li><li><code>568A</code> – 13、26调换</li></ol></li><li>光纤<ul><li>多模光纤<br> 多模光纤(MultiMode Fiber)-芯较粗(50或62.5μm)，可传多种模式的光。但其模间色散较大，这就限制了传输数字信号的频率，而且随距离的增加会更加严重。例如:600MB&#x2F;KM的光纤在2KM时则只有300MB的带宽了。因此，多模光纤传输的距离就比较近，一般只有几公里。<br><code>距离:2KM</code></li><li>单模光纤<br> 单模光纤(Single Mode Fiber):中心纤芯很细(芯径一般为9或10um)，只能传一种模式的光。因此，其模间色散很小，适用于远程通讯，但还存在着材料色散和波导色散，这样单模光纤对光源的谱宽和稳定性有较高的要求，即谱宽要窄，稳定性要好。<br><code>距离:100KM</code></li></ul></li><li>同轴电缆 - 淘汰了（座机）</li><li>无线 - 无线信号频率标准 IEE802.11</li></ul><h4 id="三大部分"><a href="#三大部分" class="headerlink" title="三大部分"></a>三大部分</h4><ul><li>源系统：发送数据的一端</li><li>传输系统：传输过程中的各种传输介质</li><li>目的系统：接收数据的电脑</li></ul><h3 id="物理层的基本通信技术"><a href="#物理层的基本通信技术" class="headerlink" title="物理层的基本通信技术"></a>物理层的基本通信技术</h3><h4 id="四种信道复用技术"><a href="#四种信道复用技术" class="headerlink" title="四种信道复用技术"></a>四种信道复用技术</h4><p><code>复用技术</code>：复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程。<br>  将多种不同的信号在 同一信道上进行传输，复用技术主要是用于解决不同信号传输时应该如何区分。</p><ul><li><code>频分复用FDM</code>：划分不同频率来并行传输信号</li><li><code>时分复用TDM</code>: 划分不同时间段来传输信号</li><li><code>码分复用CDM</code>: 在同一时间同一频率根据传输的数据码进行区分</li><li><code>波分复用WDM</code>: 根据光波的波长进行传输(合波器耦合)</li></ul><h4 id="数据的传输方式"><a href="#数据的传输方式" class="headerlink" title="数据的传输方式"></a>数据的传输方式</h4><ul><li><p>通过同时间传输数量分为</p><ol><li>串行传输<br>使用一条数据线，将数据一位一位地依次传输，每一位数据占据一个固的时间长度。只需要少数几条线就可以在系统间交换信息，特别适用于计算机与计算机、外设之间的远距离通信。</li><li>并行传输<br>并行传输指的是数据以成组的方式，在多条并行井行传输信道上同时进行传输，是在传输中有多个数据位同时在设备之间进行的传输。</li></ol></li><li><p>通过数据报文的双方的行为分为</p><ol><li>同步传输(传输效率最高)<br>在计算机网络中，定时的因素称为位同步。同步是要接收方控照发送方发送的每个位的起止时刻和速率来接收数据，否则会产生误差。同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合称为数据帧，或简称为帧。</li><li>异步传输<br>异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方从不知道它们会在什么时候到达</li></ol></li><li><p>通过传输的信号分为</p><ol><li>基带传输: 传输数字信号叫做基带传输</li><li>频带传输: 传输模拟信号叫做频带传输 – 300-3400kHz</li></ol></li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="数据链路层基础概论"><a href="#数据链路层基础概论" class="headerlink" title="数据链路层基础概论"></a>数据链路层基础概论</h3><h4 id="数据链路层概念"><a href="#数据链路层概念" class="headerlink" title="数据链路层概念"></a>数据链路层概念</h4><p>数据链路层是在物理层和网络层之间的协议，提供相邻结点的<strong>可靠</strong>数据传输。</p><h4 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h4><p><code>MAC地址</code>，全称为媒体访问控制地址（Media Access Control Address），也被称为局域网地址（LAN Address）、以太网地址（Ethernet Address）或<strong>物理地址</strong>（Physical Address）。</p><p>它是一个用于在网络中唯一标识一个网络接口控制器（网卡）的地址。在OSI模型中，MAC地址工作在第二层 —— 数据链路层，而IP地址则工作在第三层 —— 网络层。</p><p>MAC地址通常由48位（6个字节）的二进制数表示，并且通常以十六进制的形式展示。例如，一个MAC地址可能看起来像这样：<code>00:0A:95:9D:68:16</code></p><h4 id="帧的概念"><a href="#帧的概念" class="headerlink" title="帧的概念"></a>帧的概念</h4><ul><li>概念: 数据链路层的协议数据单元</li><li>帧的组成: <ol><li>帧头 — 源<code>MAC</code>地址、目的<code>MAC</code>地址、类型</li><li>数据</li><li>帧尾 — 校验部分</li></ol></li></ul><img src="帧格式.png" alt="alt text" style="zoom: 67%;" /><img src="各层数据格式.png" alt="alt text" style="zoom: 67%;" /><p><strong>首部</strong>和<strong>尾部</strong>的作用之一就是进行<strong>帧定界</strong>,同时他们包含必要的控制信息.为了提高传输效率,应当使帧的数据部分尽可能长些,但考虑到差错控制等多种因素,每一种链路层协议都规定了<code>MTU(最大传送单元)</code></p><p>为了解决透明传输的问题,对于面向字节(字符)的物理链路可以采用字节(符)填充的方法</p><p>对于面向比特的物理链路可以采用零比特填充的方法<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%AD%97%E7%AC%A6%E5%A1%AB%E5%85%85.png" alt="alt text"></p><img src="零比特填充.jpg" alt="alt text" style="zoom: 33%;" /><h3 id="数据链路层的两种传输方式"><a href="#数据链路层的两种传输方式" class="headerlink" title="数据链路层的两种传输方式"></a>数据链路层的两种传输方式</h3><ul><li>单播</li><li>广播</li></ul><h3 id="数据链路层的三个基本问题"><a href="#数据链路层的三个基本问题" class="headerlink" title="数据链路层的三个基本问题"></a>数据链路层的三个基本问题</h3><ul><li>封装成帧</li><li>透明传输</li><li>差错检测 <ol><li>奇数校验</li><li>偶数校验</li><li>CRC冗余码</li></ol></li></ul><h3 id="局域网中的设备"><a href="#局域网中的设备" class="headerlink" title="局域网中的设备"></a>局域网中的设备</h3><ul><li>集线器</li></ul><p>集线器的英文称为”Hub”。”Hub”是”中心”的意思，集线器的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。<strong>不共享带宽</strong><br><strong>工作在物理层</strong></p><ul><li>交换机</li></ul><p>交换机(Switch)意为”开关”是一种用于电(光)信号转发的网络设备，它可以为接入交换交换机 数据链路层机的任意两个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。<strong>共享带宽</strong><br><strong>工作在数据链路层</strong></p><ul><li>网桥<br>两个端口的交换机</li></ul><h3 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h3><ul><li><code>冲突域</code>: 交换机的每一个端口都是一个冲突域;冲突域只能发生在一个网段</li><li><code>广播域</code>: 交换机的所有端口都在一个广播域;广播域在一个或多个网段内发生</li><li><code>区别: </code><ol><li>广播域可以跨网段</li><li>冲突域是基于第一层(物理层)，而广播域是机于第二层(数据链路层)。</li><li>HUB 所有端口都在同一个广播域，冲突域内。Swith所有端口都在同一个广播域内，而每一个端口就是一个冲突域。</li><li>同一冲突域共享带宽。<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%86%B2%E7%AA%81%E5%9F%9F%E5%B9%BF%E6%92%AD%E5%9F%9F.png" alt="alt text"></li></ol></li></ul><h3 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h3><ul><li><code>概念:</code> VLAN(Virtual LocalAreaNetwork)即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。VLAN内的主机间可以直接通信，而VLAN间不能直接通信，从而将广播报文限制在一个VLAN内。</li><li><code>优点和目的:</code><ol><li>划分广播域 — 减少垃圾数据</li><li>增强局域网的安全性</li><li>提高健壮性</li><li>灵活构建工作组</li></ol></li><li><code>划分VLAN的方式:</code><ul><li><strong>基于端口</strong> — 给交换机的每个接口配置不同的PVID，当一个数据帧进入交换机接口时，如果没有带VLAN标签，且该接口上配置了PVID，那么，该数据帧就会被打上接口的PVID。如果进入的帧已经带有VLAN标签，那么交换机不会再增加VLAN标签，即使接口已经配置了PVID。<ol><li>Access – 只允许通过一个VLAN</li><li>Trunk – 允许通过多个VLAN</li><li>hybird</li></ol></li><li>基于子网</li><li>基于MAC地址</li><li>基于协议</li><li>基于匹配策略</li></ul></li></ul><h3 id="CSMA-CD协议-总线型"><a href="#CSMA-CD协议-总线型" class="headerlink" title="CSMA&#x2F;CD协议(总线型)"></a>CSMA&#x2F;CD协议(总线型)</h3><ul><li>概念: CSMA&#x2F;CD即载波侦听多路访问&#x2F;冲突检测，是广播型信道中采用心-种随机访问技术的竞争型访问方法，具有多目标地址的特点。总线型网络传输数据</li><li>四大要点: <ol><li>先听再发  先监听信道是否被占用</li><li>边听边发  一边发送一边监听</li><li>冲突停止  发生冲突立即停止数据</li><li>延迟后发  发生冲突延迟一个<code>随机数×征用期</code>的时间在发送</li></ol></li></ul><h3 id="PPP协议（单播）"><a href="#PPP协议（单播）" class="headerlink" title="PPP协议（单播）"></a>PPP协议（单播）</h3><ul><li>概念: 点对点通信是一对一信道，因此不会发生碰撞因此比较简单，采用PPP协议:其中PPP协议就是用户计算机和ISP(互联网服务提供商)进行通信时使用的数据链路层的协议，将数据封住成帧（开始和结束的表示 - 帧定界）</li></ul><h3 id="CRC冗余码"><a href="#CRC冗余码" class="headerlink" title="CRC冗余码"></a>CRC冗余码</h3><p><code>CRC循环冗余检验码</code>是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。循环冗余检查(CRC)是一种数据传输检错功能，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。</p><ul><li><code>生成多项式</code>: 进行模二除法的被除数，如一个生成多项式为<code>P(x) = x^4 + x^3 + 1</code>，那么被除数就是 <code>1*x^4 + 1*x^3 + 0*x^2 + 0*x^1 + 1*x^0</code>，为<code>11001</code>，生成多项式的最高位幂为<code>n</code>，就有<code>n</code>位被除数，在原数据后填<code>n</code>个零，最后冗余码结果就有<code>n-1</code>位<img src="冗余码计算01.jpg" alt="alt text" style="zoom:50%;" /><img src="冗余码计算02.jpg" alt="alt text" style="zoom: 50%;" /></li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="网络层的作用-分组"><a href="#网络层的作用-分组" class="headerlink" title="网络层的作用(分组)"></a>网络层的作用(分组)</h3><ul><li><strong>网络层的目的</strong>: 是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。<strong>提供端到端服务</strong></li></ul><h3 id="网际层协议IP"><a href="#网际层协议IP" class="headerlink" title="网际层协议IP"></a>网际层协议IP</h3><ul><li><code>ARP地址解析协议</code>: 根据IP地址获取物理地址</li><li><code>RARP反地址解析协议</code>: 根据IP地址获取物理地址</li><li><code>ICMP网际控制报文协议</code>: 通过ICMP传输控制消息，控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。例如<code>ping</code>命令等</li><li><code>IGMP网际组管理协议</code>: 是用于管理网路协议多播组成员的一种通信协议。IP主机和相邻的路由器利用IGMP来创建多播组的组成员。组播方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li>IP地址的概念<ul><li>IP地址</li></ul></li></ul><p>IP地址是IP协议提供的一种统一的地址格式，为互联购上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><ul><li><p>组成<br>一个IP地址由4个字节，32位组成，一般用点分十进制的方式表现。</p></li><li><p>IP地址和MAC地址的区别</p><ol><li>IP地址是一个逻辑地址，MAC地址是物理地址</li><li>MAC地址是唯一的但是IP地址不是唯一的</li><li>MAC地址主要是工作在第二层，IP地址在网络层IP地址和MAC地址的区别</li><li>MAC地址是48位，IP地址一般是32位(IPv6是128位)</li><li>IP地址的分配取决于网络拓扑，MAC地址分配取决于制造商。</li></ol></li><li><p>IP地址的组成：</p><ul><li><code>网络地址 + 主机号</code></li><li>主机地址&#x2F;主机号 – 标识某一台设备的地址</li><li>网络地址&#x2F;网络号 – 标识某一个网段的地址</li><li>子网掩码 – 它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</li></ul></li></ul><blockquote><ul><li>怎样查看一个<code>ip</code>地址192.168.2.128是否属于一个子网192.168.2.0&#x2F;24?</li></ul></blockquote><blockquote><ul><li>将<code>ip</code>地址转换成二进制与子网掩码相与（AND）<code>/24</code>就是表示子网掩码前24位全为1，后面全为0，即<code>11111111.11111111.11111111.00000000</code>，得出结果与子网号比较</li></ul></blockquote><ul><li>IP地址的分类<ol><li>A类: 前一个字节为网络号，第一个字节第一位是0，ip地址范围1.0.0.1 ~ 127.255.255.254，默认子网掩码255.0.0.0</li><li>B类: 前两个字节为网络号，第一个字节第一位是10，ip地址范围128.0.0.1 ~ 191.255.255.254</li><li>C类: 前两个字节为网络号，第一个字节第一位是110，ip地址范围192.x.x.x ~ 223.x.x.x</li><li>D类: <strong>多播地址</strong>前两个字节为网络号，第一个字节第一位是1110，ip地址范围224.x.x.x ~ 239.x.x.x</li><li>E类: 保留</li></ol></li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png" alt="alt text"></p><ul><li>IPv6</li></ul><p>因为IPv4地址满足不了需求，出现匮乏的情况所以诞生了IPv6地址继续使用。v6地址由128位，16个字节绍成，一般表现形式为十六进制。</p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><ul><li><code>子网划分</code></li></ul><p><strong>子网划分</strong>是一种网络技术，用于将一个大的有类网络（如A类、B类、C类网络）划分成若干个更小的子网，以优化IP地址的使用。通过修改子网掩码，可以实现更精细地划分网络号和主机号。子网掩码是一个32位的二进制数，其中值为1的比特对应IP地址中的网络位，值为0的比特对应IP地址中的主机位。这种划分有助于减少广播流量、提高网络安全性、优化网络性能和简化管理。</p><p>在子网划分中，网络掩码（也称为子网掩码或子网掩码长度）是关键。例如，C类网络的默认子网掩码是255.255.255.0，这表示前24位是网络位，后8位是主机位。通过改变子网掩码的长度，我们可以改变网络位和主机位的数量，从而创建不同大小的子网。</p><ul><li><code>VLSM（Variable Length Subnet Mask，可变长子网掩码）</code></li></ul><p><strong>VLSM</strong>是一种子网划分技术，允许网络管理员在网络中使用不同长度的子网掩码来创建子网。这种技术特别适用于大型网络，其中不同子网可能有不同的主机数量需求。通过使用VLSM，网络管理员可以根据实际需求为每个子网分配适当数量的IP地址，从而提高IP地址的利用率，减少浪费。</p><p>VLSM是<strong>CIDR</strong>（无类别域间路由）和<strong>路由汇聚</strong>技术的补充。CIDR允许使用不同长度的子网掩码来表示IP地址，而路由汇聚则通过汇总多个子网来减少路由表中的条目数量。VLSM通过层次化编址的方式，使网络管理员能够更有效地利用现有的地址空间。</p><img src="子网划分.png" alt="alt text" style="zoom:80%;" /><ol><li><p><strong>主机号全0</strong>：</p><ul><li>表示指向本网的<strong>网络地址</strong>，即该IP地址表示整个网络，而不是网络中的某个特定主机。这种地址常用在路由表中。</li><li>在子网掩码的情况下，非掩码段全为0的时候为网络地址。</li><li>对于A、B和C类IP地址，主机号全0的地址是网络地址，用于标识整个网络段。</li></ul></li><li><p><strong>主机号全1</strong>：</p><ul><li>表示<strong>广播地址</strong>，即该IP地址用于向所在网络上的所有主机发送数据包。</li><li>在大多数情况下，主机号全1的地址被保留用作广播地址，意味着发往这个地址的数据包会被发送到同一子网内的所有设备上。</li><li>网络安全警报：检测到主机号全为1的地址时，可能意味着系统正遭受攻击，因为恶意用户可能会故意发送大量数据包到这个地址，导致网络拥堵和性能下降，这种情况称为广播风暴。</li></ul></li></ol><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><img src="子网划分题02.jpg" alt="alt text" style="zoom:50%;" /><img src="子网划分题01.jpg" alt="alt text" style="zoom: 50%;" /><h3 id="网络层的路由"><a href="#网络层的路由" class="headerlink" title="网络层的路由"></a>网络层的路由</h3><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul><li><strong>路由是什么？</strong><ul><li><p>路由(routing)是指分组从源到目的地时，决定端到端路径的网络范围的进程。路由是指导报文转发的路径信息，通过路由可以确认转发IP报文的路径。</p></li><li><p>路由是网络层最主要的工作任务</p></li></ul></li><li><strong>什么是路由器？</strong><ul><li>是网络层的基本设备</li><li>数据转发</li><li>一个端口代表一个网段，路由器中存放着通往各个网段的表格，叫做<strong>路由表</strong>。</li></ul></li><li><strong>什么是路由表？</strong><ul><li><strong>路由表(routing table)</strong> 或称路由择域信息库(RIB，Routing Information Base)，是一个存储在路由器或者联网计算机中的电子表格(文件)或类数据库。路由表存储着指向特定网络地址的路径</li></ul></li><li><strong>什么是网关？</strong><ul><li><strong>网关(Gateway)</strong> 又称网间连接器、协议转换器。用于两个高层协议不同的网络互连。网关既可以以用于广域网互连，也可以用于局域网互连。</li><li>**默认网关(Default Getway)**，路由器不知道将数据往哪转发的时候，默认转发到默认网关</li></ul></li></ul><h4 id="路由的获取方式（路由表的建立和维护）"><a href="#路由的获取方式（路由表的建立和维护）" class="headerlink" title="路由的获取方式（路由表的建立和维护）"></a>路由的获取方式（路由表的建立和维护）</h4><ul><li>直连路由</li><li>静态路由</li><li>动态路由</li></ul><h4 id="路由的配置方式"><a href="#路由的配置方式" class="headerlink" title="路由的配置方式"></a>路由的配置方式</h4><p>直连路由、静态路由和动态路由是路由器在建立和维护路由表时使用的三种主要方式。以下是关于这三种路由方式的详细解释：</p><ol><li><strong>直连路由</strong>：</li></ol><ul><li>定义：直连路由是指路由器接口所直接连接的子网的路由方式简而言之，就是主机或网络设备直接连接到同一网络上，不需要过其他设备进行转发。</li><li>特点：<ul><li>直连路由是最简单的路由方式，适用于小型网络或简单拓结构。</li><li>通常无需配置额外的路由策略。</li><li>路由信息由链路层协议发现，只要接口处于活动状态，路由器就会自动将通向该网段的路由信息填写到路由表中。</li><li>直连路由无法使路由器获取与其不直接相连的路由信息。</li></ul></li></ul><ol start="2"><li><strong>静态路由</strong>：</li></ol><ul><li>定义：静态路由是一种路由方式，其中路由项（routing entry）由管理员手动配置，而非动态决定。</li><li>特点：<ul><li>静态路由是固定的，不会改变，即使网络状况已经改变或新配置。</li><li>静态路由配置简单，管理灵活，对网络影响较小。</li><li>适用于中小型网络。</li><li>网络安全保密性高，因为静态路由不会产生更新流量，不用网络带宽。</li><li>在大型和复杂的网络环境中，静态路由的配置和维护工作量较大，不利于网络的动态适应变化。</li></ul></li></ul><ol start="3"><li><strong>动态路由</strong>：</li></ol><ul><li>定义：动态路由是指路由器能够自动地建立自己的路由表，并且能够根据实际情况的变化适时地进行调整。</li><li>特点：<ul><li>动态路由是路由器根据路由器之间的交换的特定路由信息自动地建立路由表，并能够根据链路和节点的变化自动调整。</li><li>当网络中节点或链路发生故障，或存在其他可用路由时，动态路由可以自行选择最佳可用路由并继续转发报文。</li><li>动态路由依赖于路由器之间的路由信息交换和对路由表的维护。</li><li>常见的动态路由协议有<code>RIP</code>、<code>OSPF</code>、<code>IS-IS</code>、<code>BGP</code>等，每种协议都有其特点和适用场景。<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE.png" alt="alt text"></li></ul></li></ul><h2 id="运输-传输-层"><a href="#运输-传输-层" class="headerlink" title="运输(传输)层"></a>运输(传输)层</h2><h3 id="传输层概论"><a href="#传输层概论" class="headerlink" title="传输层概论"></a>传输层概论</h3><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ol><li>传输层提供<strong>端到端</strong>服务</li><li>从通信和信息处理的角度看，传输层向上层应用层提供通信服务。</li><li>所谓的端口，就好像是门牌号一样，客户端可以以通过ip地址找到对应的服器端，但是服务器端是有很多端口的，每个应用程序对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口进行区分，将每个端口进行了编号，这就是端口号</li></ol><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>通过端口号来区别相同计算机所提供的这些不同的服务</p><ul><li>第一类<br>公认端口（Well Known Ports）：从0到1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务的协议，例如：80端口实际上总是HTTP通讯。</li><li>第二类<br>注册端口（Registered Ports）：从1024到49151。它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些端口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。</li><li>第三类<br>动态&#x2F;私有端口（Dynamic and&#x2F;or Private Ports）：从49152到65535。这类端口号留给客户进程选作临时端口号.客户进程在发起通信时要先为自己选择一个未使用的临时端口号,通信结束时要释放该端口号以便其他客户进程使用.<br>理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口。但也有例外：SUN的RPC端口从32768开始。</li></ul><table><thead><tr><th>应用程序</th><th>端口号</th></tr></thead><tbody><tr><td>HTTP(超文本传输)</td><td>80</td></tr><tr><td>HTTPS(超文本传输安全协议)</td><td>443</td></tr><tr><td>FTP(文件传输协议)</td><td>21连接,20传送数据</td></tr><tr><td>TFTP(简单文件传输协议)</td><td>69</td></tr><tr><td>SSH</td><td>22</td></tr><tr><td>Telnet(远程登陆)</td><td>23</td></tr><tr><td>SMTP(简单电子邮件传输协议)</td><td>25</td></tr><tr><td>POP3(邮局协议版本3)</td><td>110</td></tr><tr><td>IMAP</td><td>143</td></tr><tr><td>DNS(域名系统)</td><td>53</td></tr><tr><td>LDAP</td><td>389</td></tr><tr><td>RDP(远程桌面协议 )</td><td>3389</td></tr><tr><td>SNMP(简单网络管理协议)</td><td>161</td></tr><tr><td>NTP</td><td>123</td></tr></tbody></table><h3 id="TCP-可靠"><a href="#TCP-可靠" class="headerlink" title="TCP(可靠)"></a>TCP(可靠)</h3><h4 id="概念-传输控制协议"><a href="#概念-传输控制协议" class="headerlink" title="概念: 传输控制协议"></a><code>概念</code>: 传输控制协议</h4><p>TCP是TCP&#x2F;IP体系中较为复杂的协议，是传输层中最重要的协议。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a><code>特点</code>:</h4><ol><li>TCP是<strong>面向连接</strong>的传输层协议</li><li>TCP提供<strong>可靠的</strong>交付服务</li><li>TCP提供<strong>全双工</strong>通信</li><li>TCP是<strong>面向字节流</strong></li></ol><h4 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a><code>三次握手四次挥手</code></h4><h5 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h5><img src="三次握手.png" alt="三次握手" style="zoom:67%;" /><p>最开始的时候客户端和服务器都是处于CLOSED关闭状态。主动打开连接的为客户端，被动打开连接的是服务器。</p><p>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了 LISTEN 监听状态</p><p><strong>第一次握手</strong> TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN&#x3D;1，同时选择一个初始序列号 seq&#x3D;x ，此时，TCP客户端进程进入了 SYN-SENT 同步已发送状态</p><p><strong>第二次握手</strong> TCP服务器收到请求报文后，如果同意连接，则会向客户端发出确认报文。确认报文中应该 ACK&#x3D;1，SYN&#x3D;1，确认号是ack&#x3D;x+1，同时也要为自己初始化一个序列号 seq&#x3D;y，此时，TCP服务器进程进入了 SYN-RCVD 同步收到状态</p><p><strong>第三次握手</strong> TCP客户端收到确认后，还要向服务器给出确认。确认报文的ACK&#x3D;1，ack&#x3D;y+1，自己的序列号seq&#x3D;x+1，此时，TCP连接建立，客户端进入ESTABLISHED已建立连接状态 触发三次握手</p><ul><li>为什么要进行第三次握手？</li></ul><p>主要原因：防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误</p><ul><li>第一次握手： 客户端向服务器端发送报文<br>证明客户端的发送能力正常</li><li>第二次握手：服务器端接收到报文并向客户端发送报文<br>证明服务器端的接收能力、发送能力正常</li><li>第三次握手：客户端向服务器发送报文<br>证明客户端的接收能力正常</li></ul><h5 id="释放连接-参考blog"><a href="#释放连接-参考blog" class="headerlink" title="释放连接 参考blog"></a>释放连接 <a href="https://blog.csdn.net/m0_56649557/article/details/119492899">参考blog</a></h5><img src="四次挥手.png" alt="四次挥手" style="zoom:67%;" /><p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。</p><p><strong>第一次挥手</strong> 客户端发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN&#x3D;1，其序列号为seq&#x3D;u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态</p><p><strong>第二次挥手</strong> 服务器端接收到连接释放报文后，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT 关闭等待状态</p><p><strong>第三次挥手</strong> 客户端接收到服务器端的确认请求后，客户端就会进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文，服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p><p><strong>第四次挥手</strong> 客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态，但此时TCP连接还未终止，必须要经过2MSL后（最长报文寿命），当客户端撤销相应的TCB后，客户端才会进入CLOSED关闭状态，服务器端接收到确认报文后，会立即进入CLOSED关闭状态，到这里TCP连接就断开了，四次挥手完成</p><h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a><code>窗口</code></h4><ol><li>固定窗口<br>如果窗口过小，当传输比较大的数据的时候需要不停的对数据进行确认，这个时候就会造成很大的延迟。</li><li>滑动窗口<br>滑动窗口通俗来讲就是一种流量控制技术。它本质上是描述接收方的TCP数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据，如果发送方收到接收方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接收方发送窗口大小不为0的数据报的到来</li><li>拥塞处理和流量控制</li></ol><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><ul><li><code>轮次n</code>: 第0轮开始,拥塞窗口值为1</li><li><code>拥塞窗口cwnd</code></li><li><code>慢开始门限</code></li></ul><img src="拥塞避免_1.png" alt="alt text" style="zoom:67%;" /><p><strong>例题</strong>：<br>TCP的拥塞窗口（cwnd）大小与往返时间（RTT）之间的关系如下表所示。请根据表格数据回答以下问题：</p><table><thead><tr><th>RTT（单位：秒）</th><th>cwnd（单位：报文段）</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>4</td><td>4</td></tr><tr><td>8</td><td>8</td></tr><tr><td>16</td><td>16</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><strong>问题</strong>：</p><ol><li><p><strong>试画出拥塞窗口与RTT的关系曲线</strong>：</p><ul><li>曲线将是一个指数增长的曲线，因为TCP在慢开始阶段，每经过一个RTT，cwnd的大小都会翻倍（直到达到慢开始门限ssthresh）。</li></ul></li><li><p><strong>指明TCP工作在慢开始阶段的时间间隔</strong>：</p><ul><li>在这个例子中，假设慢开始门限ssthresh为16（这只是一个假设值，实际值可能根据网络情况有所不同）。那么，在RTT为1到16秒之间，TCP将工作在慢开始阶段，因为在这个时间间隔内，cwnd的大小随RTT的增大而指数增长。</li></ul></li><li><p><strong>在RTT&#x3D;16和RTT&#x3D;22之后发送方是通过收到的三个重复的确认还是通过超时检测到丢失了报文段？</strong></p><ul><li>在RTT&#x3D;16时，TCP可能刚刚进入拥塞避免阶段（如果ssthresh为16）。在这个阶段，如果发送方收到三个重复的确认，它会认为发生了拥塞并触发快速重传机制。但是，在这个例子中，没有给出RTT&#x3D;22时的具体网络状态，所以我们不能确定在RTT&#x3D;22之后发送方是如何检测到报文段丢失的。不过，通常情况下，如果超时发生，发送方会重传所有未被确认的报文段，并可能减小cwnd和ssthresh的值。</li></ul></li><li><p><strong>在RTT&#x3D;1、RTT&#x3D;18和RTT&#x3D;24时，门限ssthresh分别被设置为多大？</strong></p><ul><li>这个问题的具体答案取决于TCP实现的细节和网络状态。在慢开始阶段，ssthresh通常被设置为一个较大的值（例如，初始窗口大小的两倍或更多）。然而，在拥塞避免阶段，如果检测到拥塞（例如，通过收到三个重复的确认或超时），ssthresh可能会被减小到当前cwnd的一半左右。因此，在这个例子中，我们无法准确地知道在RTT&#x3D;1、RTT&#x3D;18和RTT&#x3D;24时ssthresh的具体值，除非给出更多的上下文信息。</li></ul></li></ol><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png" alt="alt text"></p><h3 id="UDP-不可靠"><a href="#UDP-不可靠" class="headerlink" title="UDP(不可靠)"></a>UDP(不可靠)</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>用户数据报协议: UDP</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>UDP是在IP数据报服务之上增加了一些功能，增加了复用和分用的功能以及差错检测的功能，UDP的主要特点是:</p><ol><li>UDP是无连接的</li><li>UDP尽最大努力交付</li><li>UDP面向报文且没有拥塞控制</li><li>UDP开销较小传输效率较高</li></ol><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="应用层的作用"><a href="#应用层的作用" class="headerlink" title="应用层的作用"></a>应用层的作用</h3><p><strong>最贴近于用户的一层</strong><br>通过位于不同主机中的多个应用进程之间的通信应用层的作用和协同工作来完成。应用层的内容就是具体定义是通信规则。 </p><h3 id="复累了-开摆"><a href="#复累了-开摆" class="headerlink" title="复累了 开摆"></a>复累了 <a href="https://blog.csdn.net/NickHan_cs/article/details/118067464">开摆</a></h3><h2 id="超级多之零碎知识点"><a href="#超级多之零碎知识点" class="headerlink" title="超级多之零碎知识点"></a>超级多之零碎知识点</h2><h3 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a><code>MTU</code></h3><ul><li><p><strong>MTU（Maximum Transmission Unit，最大传输单元）</strong>是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。这一参数通常与通信接口有关（如网络接口卡、串口等）。如果IP层有一个数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片（fragmentation），把数据包分成若干片，让每一片都不超过MTU。需要注意的是，MTU限制的是<strong>数据帧</strong>的最大长度，而不是数据包的最大长度。</p></li><li><p>在网络通信中，MTU的大小是有限制的，这是因为不同的网络设备和传输介质具有不同的传输能力和限制。例如，以太网的标准MTU为1500字节</p></li></ul><h3 id="是否为子网的有效地址：主机号是否全为0"><a href="#是否为子网的有效地址：主机号是否全为0" class="headerlink" title="是否为子网的有效地址：主机号是否全为0"></a><code>是否为子网的有效地址：主机号是否全为0</code></h3><ul><li>一个子网的网络地址是其子网掩码与IP地址进行与操作（AND）后得到的结果，此时主机号部分全为0。但这个地址通常不用作主机地址，而是表示整个子网。</li></ul><h3 id="判断是否为同一子网"><a href="#判断是否为同一子网" class="headerlink" title="判断是否为同一子网"></a><code>判断是否为同一子网</code></h3><ul><li>确实是通过将子网掩码与两个IP地址分别进行与操作（AND），然后比较结果是否相同来判断两个IP地址是否在同一子网。</li></ul><h3 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a><code>广播域</code></h3><ul><li>广播域指的是广播帧能到达的网络范围。在交换机连接的局域网中，由于交换机隔离了碰撞域，但广播帧仍然可以转发到所有端口，所以所有连接到同一交换机的设备都处于同一广播域。</li></ul><h3 id="碰撞域"><a href="#碰撞域" class="headerlink" title="碰撞域"></a><code>碰撞域</code></h3><ul><li>碰撞域指的是能够检测到数据帧冲突的范围。在交换机中，每个端口都形成一个独立的碰撞域，因为交换机使用存储转发的方式避免了冲突。</li></ul><h3 id="路由器与广播域"><a href="#路由器与广播域" class="headerlink" title="路由器与广播域"></a><code>路由器与广播域</code></h3><ul><li>路由器通过路由功能将网络划分为不同的广播域。路由器会阻止广播流量的传播，每个连接到路由器接口的网络都有自己的广播域，路由器会阻止广播帧从一个广播域传播到另一个广播域。</li></ul><h3 id="冲突域与广播域"><a href="#冲突域与广播域" class="headerlink" title="冲突域与广播域"></a><code>冲突域与广播域</code></h3><ul><li>广播域：交换机是二层设备，所有连接到交换机的设备仍处于同一个广播域例  </li><li>碰撞域：能够直接通信（既在同一广播域）内的节点集合（交换机为每个端口提供独立的碰撞域）</li></ul><h3 id="主机A向主机B传数据"><a href="#主机A向主机B传数据" class="headerlink" title="主机A向主机B传数据"></a><code>主机A向主机B传数据</code></h3><ul><li>当主机A向主机B传输数据时，离开Router1的Fa0&#x2F;1接口时，将使用B的IP地址作为目的IP地址，并使用Router1的Fa0&#x2F;1接口的MAC地址作为源MAC地址（因为MAC地址在数据链路层，每经过一个网络设备都会改变）。</li></ul><h3 id="IP数据报重组"><a href="#IP数据报重组" class="headerlink" title="IP数据报重组"></a><code>IP数据报重组</code></h3><ul><li>IP数据报在传输过程中可能会被分片，到达目的主机后，由目的主机的IP层负责重新组装成原始的数据报。</li></ul><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a><code>滑动窗口协议</code></h3><ul><li>滑动窗口协议是一种流量控制机制，它允许发送方在接收方确认之前发送多个数据包，而不是等待每个数据包的确认。这提高了传输效率，并减少了延迟。（防止缓冲区溢出）</li></ul><h3 id="TCP的可靠通信"><a href="#TCP的可靠通信" class="headerlink" title="TCP的可靠通信"></a><code>TCP的可靠通信</code></h3><ul><li>TCP通过序列号、<code>确认机制（Ackonwledge）</code>、超时重传、流量控制（滑动窗口协议）等机制来保证其数据传输的可靠性。其中，发送窗口大小（WS）和接收窗口大小（WA）的关系应满足WS ≤ WA，以确保发送方不会发送超过接收方缓冲区大小的数据。</li><li><code>确认机制（Ackonwledge）</code>是保证可靠交付的关键</li></ul><h3 id="TCP不提供的服务"><a href="#TCP不提供的服务" class="headerlink" title="TCP不提供的服务"></a><code>TCP不提供的服务</code></h3><ul><li>TCP不提供广播&#x2F;多播服务，它只提供点到点的通信。TCP是面向连接的、可靠的传输服务，提供拥塞控制和流量控制。</li><li>在你给出的知识点中，有一些小的表述错误和概念需要澄清。首先，我们来逐一识别并解释这些知识点，然后进行修正。</li></ul><h3 id="TCP中的确认机制"><a href="#TCP中的确认机制" class="headerlink" title="TCP中的确认机制"></a><code>TCP中的确认机制</code></h3><ul><li>TCP使用序列号（Seq）和确认号（Ack）来确保数据的可靠传输。</li><li>Seq（序列号）：标识发送方发送的数据段的起始字节的序列号。</li><li>Ack（确认号）：标识接收方期望从发送方接收的下一个字节的序列号，即已成功确认接收的最后一个字节的序列号加1。</li></ul><h3 id="序列号的长度和发送窗口大小"><a href="#序列号的长度和发送窗口大小" class="headerlink" title="序列号的长度和发送窗口大小"></a><code>序列号的长度和发送窗口大小</code></h3><ul><li>如果序列号的长度是4位（bit），那么它可以表示的最大序列号是2^4 - 1 &#x3D; 15（从0到15）。</li><li>但是，这并不意味着发送窗口的大小就是15。发送窗口大小是TCP滑动窗口协议中的一个概念，它决定了发送方在无需等待确认的情况下可以连续发送的数据量。</li><li>发送窗口大小是由接收方在TCP三次握手过程中通过接收窗口（Receive Window，简称RWND）字段来告知发送方的。</li><li>在理论上，如果序列号长度为4位，并且我们假设TCP不使用任何序列号回绕（这在实际中是不可能的，因为序列号空间远大于4位），那么发送方最多只能连续发送15个字节的数据，而无需等待确认。但这并不意味着发送窗口大小就是15。发送窗口大小可以根据网络条件和应用程序需求进行动态调整。</li></ul><h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><ul><li>码分多址</li></ul><p>码分复用（码分多址-CDMA：Code Division Multiple Access）是一种共享信道的方式。用户通过挑选不同的码型在相同的频带，相同时间上通信，这样各用户之间就不会干扰（其频谱类似白噪声）。其优点在于，这样的信号具有很强的干扰性，且因为其类似于白噪声而不易被敌人发现。</p><p>这就好像，从 A 地到 B 地的路线中，三个不同的乘客分别选择飞机，动车和汽车，三个人的行程是不会冲突的。</p><p>在 CDM 中，每一个比特时间再被划分成 m 个短时间（码片）。每一个工作站被指派唯一一个 m bit 的码片序列。</p><p>一个站如果发送比特 1，表示发送自己的 m bit 码片序列<br>一个站如果发送比特 0，表示发送该码片序列的二进制反码</p><p>例如，S 站的码片序列指定为 00011011<br>当 S 站发送比特 1，发送的码片序列是 00011011<br>当 S 站发送比特 0，发送的码片序列是 11100100<br>当 S 站什么都不发送，显示 0</p><p><strong>PS：一般来说，我们默认将 0 写成 -1，1 写成 +1 的形式</strong></p><p>那么在多个站通过同一信道传输数据的时候，如何保证这些数据的独立性呢（不打架），要求数据之间能够内积得零（就是数学上向量内积得零）<br>比如，A，B 站向 C 站发送数据（这里用 4 位来计算）<br>如果 A（1，-1，1，-1），那么 B（-1，-1，-1，-1），这样 A，B 内积除以 4 位就得零，使得数据不会干扰。</p><p>那么在传播的过程中，如何组合这些数据呢，利用线性相加<br>还是上面的数据，那么线性相加，组合的结果就是（0，-2，0，-2）</p><p>那么在终点站如何分离出各自的数据呢，利用源站与终点站数据内积<br>还是上面的数据，分离 A 的数据，(0，-2，0，-2)*（1,-1,1,-1）&#x2F; 4 &#x3D; 1，所以 A 站发送的是 1 比特<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E7%A0%81%E5%88%86%E5%A4%9A%E5%9D%80%E8%AE%A1%E7%AE%97%E9%A2%98.png" alt="alt text"></p><ul><li><p>TCP&#x2F;IP网络模型<br><code>问</code>: TCP&#x2F;IP 参考模型中的主机-网络层对应于 0SI中的(D)<br>A.网络层  B.物理层   C.数据链路层  D.物理层与数据链路层</p></li><li><p>码元的概念<br>承载信息量的基本信号单位是 A<br>A.码元  B.比特   C.数据传输速率  D.误码率</p></li><li><p><a href="#crc%E5%86%97%E4%BD%99%E7%A0%81"><code>CRC循环冗余检验码</code></a>  </p></li><li><p>数据报分片</p><img src="数据报分片.jpg" alt="alt text" style="zoom:50%;" /><img src="数据报分片2.png" alt="alt text" style="zoom:67%;" /></li><li><p>地址聚合</p><img src="地址聚合.png" alt="alt text" style="zoom:67%;" /></li><li><p>路由表更新<br>规则:<br>对发来的路由表<br>所有距离+1，下一跳统一为发来的路由器<br>表中不存在的，直接添加<br>存在，下一跳不同，距离小时更新<br>存在，下一跳相同，无条件更新</p><img src="路由表更新.jpg" alt="alt text" style="zoom:50%;" /></li><li><p>根据路由表求下一跳</p></li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E6%B1%82%E4%B8%8B%E4%B8%80%E8%B7%B3.png" alt="下一跳"></p><ul><li><p>网桥转发表<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E7%BD%91%E6%A1%A5%E8%BD%AC%E5%8F%91%E8%A1%A8.png" alt="alt text"></p></li><li><p>子网划分<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86.jpg" alt="alt text"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>configure mysql in VisualStudio</title>
      <link href="/2024/06/21/configure-mysql-in-visualstudio/"/>
      <url>/2024/06/21/configure-mysql-in-visualstudio/</url>
      
        <content type="html"><![CDATA[<h1 id="C-加-MySQL"><a href="#C-加-MySQL" class="headerlink" title="C++ 加 MySQL"></a>C++ 加 MySQL</h1><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">打开cmd</span><br><span class="line">输入 mysql</span><br><span class="line">输入 mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line"></span><br><span class="line">打开VisualStudio</span><br><span class="line">VC<span class="operator">/</span>C目录</span><br><span class="line">项目属性:点击c<span class="operator">+</span><span class="operator">+</span><span class="operator">-</span><span class="operator">&gt;</span>常规<span class="operator">-</span><span class="operator">&gt;</span>附加包含目录<span class="operator">-</span><span class="operator">&gt;</span>&quot;选择C:\Program Files\MySQL\MySQL Server 8.0\include&quot;</span><br><span class="line"></span><br><span class="line">包含库文件<span class="operator">-</span><span class="operator">&gt;</span>链接<span class="operator">-</span><span class="operator">&gt;</span>常规<span class="operator">-</span><span class="operator">&gt;</span>附加库目录<span class="operator">-</span><span class="operator">&gt;</span>&quot;选择C:\Program Files\MySQL\MySQL Server 8.0\lib&quot;</span><br><span class="line">写入库文件<span class="operator">-</span><span class="operator">&gt;</span>链接器<span class="operator">-</span><span class="operator">&gt;</span>输入<span class="operator">-</span><span class="operator">&gt;</span>附加依赖项<span class="operator">-</span><span class="operator">&gt;</span>libmysql.lib</span><br><span class="line">libmysql.lib复制到c盘windows下system32文件夹下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:\Users\<span class="number">86158</span><span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">20</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.33</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2023</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> py_sql             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sakila             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> world              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> databases student_manager;</span><br><span class="line">ERROR <span class="number">1064</span> (<span class="number">42000</span>): You have an error <span class="keyword">in</span> your <span class="keyword">SQL</span> syntax; <span class="keyword">check</span> the manual that corresponds <span class="keyword">to</span> your MySQL server version <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> use near <span class="string">&#x27;databases student_manager&#x27;</span> <span class="keyword">at</span> line <span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database student_manager;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases</span><br><span class="line"> <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> py_sql             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sakila             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student_manager    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> world              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use student_manager;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> students(student_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,student_name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,stude</span><br><span class="line">nt_class <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_student_manager <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> students                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span>  <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">20221003174</span>,<span class="string">&#x27;徐彬&#x27;</span>,<span class="string">&#x27;计科2201&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1264</span> (<span class="number">22003</span>): <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;student_id&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span>  <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">1000</span>,<span class="string">&#x27;徐彬&#x27;</span>,<span class="string">&#x27;计科2201&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> VisualStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2024/06/21/html/"/>
      <url>/2024/06/21/html/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网页"><a href="#1-网页" class="headerlink" title="1.网页"></a>1.网页</h2><h3 id="1-2-什么是-HTML"><a href="#1-2-什么是-HTML" class="headerlink" title="1.2 什么是 HTML"></a>1.2 什么是 HTML</h3><p>HTML 指的是超文本标记语言(HyperText Markup Language),它是用来描述网页的一种语言。</p><p>HTML不是一种编程语言,而是一种标记语言(markuplanguage),标记语言是一套标记标签(markup tag)。</p><p>所谓超文本,有2 层含义<br>    1.它可以加入图片、声音、动画、多媒体等内容(超越了文本限制)。<br>    2.它还可以从一个文件跳转到另一个文件,与世界各地主机的文件连接(超级链接文本)。</p><h3 id="1-3-网页的形成"><a href="#1-3-网页的形成" class="headerlink" title="1.3 网页的形成"></a>1.3 网页的形成</h3><p>网页是由网页元素组成的,这些元素是利用 html标签描述出来,然后通过浏览器解析来显示给用户的.</p><h2 id="2-常用浏览器"><a href="#2-常用浏览器" class="headerlink" title="2.常用浏览器"></a>2.常用浏览器</h2><h3 id="1-浏览器是网页显示、运行的平台。"><a href="#1-浏览器是网页显示、运行的平台。" class="headerlink" title="1.浏览器是网页显示、运行的平台。"></a>1.浏览器是网页显示、运行的平台。</h3><p>常用的浏览器有IE、火狐(Firefox)、谷歌(Chrome)、Safari和Opera等平时称为五大浏览器。</p><h3 id="2-浏览器内核"><a href="#2-浏览器内核" class="headerlink" title="2.浏览器内核:"></a>2.浏览器内核:</h3><p>浏览器内核(渲染引擎):负责读取网页内容,整理讯息,计算网页的显示方式并显示页面。</p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>chrome&#x2F;Opera</td><td>Blink</td><td>chrome&#x2F;opera浏览器内核。Blink 其实是 WebKit 的分支</td></tr></tbody></table><h2 id="3-Web标准"><a href="#3-Web标准" class="headerlink" title="3.Web标准"></a>3.Web标准</h2><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C(万维网联盟)是国际最著名的标准化组织</p><h3 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成"></a>web标准的构成</h3><p>3.2 Web 标准的构成<br>主要包括结构(Structure)、表现(Presentation)和行为(Behavior)三个方面。</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>结构用于对网页元素进行整理和分类,现阶段主要学的是HTML。</td></tr><tr><td>表现</td><td>表现用于设置网页元素的版式、颜色、大小等外观样式,主要指的是CSS</td></tr><tr><td>行为</td><td>行为是指网页模型的定义及交互的编写,现阶段主要学的是Javascript</td></tr></tbody></table><h3 id="Web-标准提出的最佳体验方案"><a href="#Web-标准提出的最佳体验方案" class="headerlink" title="Web 标准提出的最佳体验方案:"></a>Web 标准提出的最佳体验方案:</h3><h3 id="结构、样式、行为相分离-简单理解-结构写到-HTML-文件中-表现写到-CSS-文件中-行为写到JavaScript文件中"><a href="#结构、样式、行为相分离-简单理解-结构写到-HTML-文件中-表现写到-CSS-文件中-行为写到JavaScript文件中" class="headerlink" title="结构、样式、行为相分离,简单理解:结构写到 HTML 文件中,表现写到 CSS 文件中 ,行为写到JavaScript文件中"></a>结构、样式、行为相分离,简单理解:结构写到 HTML 文件中,表现写到 CSS 文件中 ,行为写到JavaScript文件中</h3><h2 id="4-html标签"><a href="#4-html标签" class="headerlink" title="4.html标签"></a>4.html标签</h2><h3 id="1-1-基本语法概述"><a href="#1-1-基本语法概述" class="headerlink" title="1.1 基本语法概述"></a>1.1 基本语法概述</h3><pre><code>1.HTML标签是由尖括号包围的关键词,例如 `&lt;html&gt;`2.HTML标签通常是成对出现的,例始`&lt;html&gt;`和`&lt;/html&gt;`,我们称为双标签。标签对中的第一个标签是开始标签,第二个标签是结束标签。3.有些特殊的标签必须是单个标签(极少情况),例如`&lt;br/&gt;`我们称为单标签。</code></pre><h3 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h3><p>双标签关系可以分为两类:包含关系和并列关系。</p><h3 id="2-1-文档类型声明标签"><a href="#2-1-文档类型声明标签" class="headerlink" title="2.1 文档类型声明标签"></a>2.1 文档类型声明标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">这句代码的意思是: 当前页面采取的是 HTML5 版本来显示网页</span><br><span class="line">注意:</span><br><span class="line">1.<span class="meta">&lt;!DOCTYPE&gt;</span>声明位于文档中的最前面的位置,处于<span class="tag">&lt;<span class="name">html</span>&gt;</span>标签之前。</span><br><span class="line">2.<span class="meta">&lt;!DOCTYPE&gt;</span>不是一个HTML标签,它就是文档类型声明标签</span><br></pre></td></tr></table></figure><h3 id="2-2-lang-语言种类"><a href="#2-2-lang-语言种类" class="headerlink" title="2.2 lang 语言种类"></a>2.2 lang 语言种类</h3><blockquote><p>用来定义当前文档显示的语言。<br>1.en定义语言为英语<br>2.zh-CN定义语言为中文<br>简单来说,定义为en 就是英文网页,定义为 zh-CN 就是中文网页</p></blockquote><p>其实对于文档显示来说,定义成en的文档也可以显示中文,定义成zh-CN的文档也可以显示英文</p><h3 id="2-3-charset编码"><a href="#2-3-charset编码" class="headerlink" title="2.3 charset编码"></a>2.3 charset编码</h3><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p><h3 id="3-1-html语义标签"><a href="#3-1-html语义标签" class="headerlink" title="3.1 html语义标签"></a>3.1 html语义标签</h3><p>学习标签是有技巧的,重点是记住每个标签的语义。简单理解就是指标签的含义,即这个标签是用来干嘛的</p><h3 id="3-2-标题标签-重要"><a href="#3-2-标题标签-重要" class="headerlink" title="3.2 标题标签&lt;h1&gt;-&lt;h6&gt;(重要 )"></a>3.2 标题标签<code>&lt;h1&gt;-&lt;h6&gt;</code>(重要 )</h3><p>为了使网页更具有语义化,我们经常会在页面中用到标题标签。HTML提供了6个等级的网页标题即<code>&lt;h1&gt;-&lt;h6&gt;</code></p><p>标签语义:作为标题使用,并且依据重要性递减</p><blockquote><p>特点:<br>1.加了标题的文字会变的加粗,字号也会依次变大<br>2.一个标题独占一行</p></blockquote><h3 id="3-3-段落和换行标签-重要"><a href="#3-3-段落和换行标签-重要" class="headerlink" title="3.3 段落和换行标签(重要 )"></a>3.3 段落和换行标签(重要 )</h3><p>在 HTML中,一个段落中的文字会从左到右依次排列,直到浏览器窗口的右端,然后才自动换行。如果希望某段文本强制换行显示,就需要使用换行标签<code>&lt;br/&gt;</code></p><h3 id="3-4-文本格式化标签"><a href="#3-4-文本格式化标签" class="headerlink" title="3.4 文本格式化标签"></a>3.4 文本格式化标签</h3><p>在网页中,有时需要为文字设置粗体、斜体或下划线等效果,这时就需要用到HTML中的文本格式化标签,使文字以特殊的方式显示。<br>标签语义:突出重要性,比普通文字更重要</p><table><thead><tr><th align="center">功能</th><th align="center">HTML标签</th><th align="center">Markdown语法</th><th align="center">说明</th><th align="center">推荐使用</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center"><code>&lt;strong&gt;&lt;/strong&gt;</code> 或 <code>&lt;b&gt;&lt;/b&gt;</code></td><td align="center"><strong>加粗文本</strong></td><td align="center">更推荐使用<code>&lt;strong&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;strong&gt;&lt;/strong&gt;</code></td></tr><tr><td align="center">倾斜</td><td align="center"><code>&lt;em&gt;&lt;/em&gt;</code> 或 <code>&lt;i&gt;&lt;/i&gt;</code></td><td align="center"><em>倾斜文本</em></td><td align="center">更推荐使用<code>&lt;em&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;em&gt;&lt;/em&gt;</code></td></tr><tr><td align="center">删除线</td><td align="center"><code>&lt;del&gt;&lt;/del&gt;</code> 或 <code>&lt;s&gt;&lt;/s&gt;</code></td><td align="center"><del>删除线文本</del></td><td align="center">更推荐使用<code>&lt;del&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;del&gt;&lt;/del&gt;</code></td></tr><tr><td align="center">下划线</td><td align="center"><code>&lt;ins&gt;&lt;/ins&gt;</code> 或 <code>&lt;u&gt;&lt;/u&gt;</code></td><td align="center">++下划线文本++ (注意：Markdown本身不支持下划线,此处仅为示意)</td><td align="center">更推荐使用<code>&lt;ins&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;ins&gt;&lt;/ins&gt;</code></td></tr></tbody></table><h3 id="3-5-容器标签"><a href="#3-5-容器标签" class="headerlink" title="3.5 容器标签"></a>3.5 <div>容器<span>标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>和<span class="tag">&lt;<span class="name">span</span>&gt;</span>是没有语义的,它们就是一个盒子,用来装内容的。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">div 是 division 的缩写,表示分割、分区。span 意为跨度、跨距</span><br><span class="line">特点:</span><br><span class="line">1.<span class="tag">&lt;<span class="name">div</span>&gt;</span>标签用来布局,但是现在一行只能放一个<span class="tag">&lt;<span class="name">div</span>&gt;</span>。大盒子</span><br><span class="line">2.<span class="tag">&lt;<span class="name">span</span>&gt;</span>标签用来布局,一行能放多个<span class="tag">&lt;<span class="name">span</span>&gt;</span>。小盒子</span><br></pre></td></tr></table></figure><h3 id="3-6-图像标签和路径-重点"><a href="#3-6-图像标签和路径-重点" class="headerlink" title="3.6 图像标签和路径(重点)"></a>3.6 图像标签和路径(重点)</h3><p>1.图像标签</p><p>在 HTML标签中 ,<code>&lt;img&gt;</code>标签用于定义HTML页面中的图像。</p><p><code>&lt;img src=&quot;图像URL&quot;/&gt;</code><br>单词 imae的缩写,意为图像。</p><p>src 是<code>&lt;img&gt;</code>标签的必须属性,它用于指定图像文件的路径和文件名</p><h3 id="4-1-图像标签和路径-重点"><a href="#4-1-图像标签和路径-重点" class="headerlink" title="4.1 图像标签和路径 (重点)"></a>4.1 图像标签和路径 (重点)</h3><h4 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="(1) 图像标签"></a>(1) 图像标签</h4><h5 id="图像标签的其他属性"><a href="#图像标签的其他属性" class="headerlink" title="图像标签的其他属性"></a>图像标签的其他属性</h5><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">图片路径</td><td align="center">必须属性</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td align="center">替换文本。图像不能显示的文字</td></tr><tr><td align="center">title</td><td align="center">文本</td><td align="center">提示文本。鼠标放到图像上,显示的文字</td></tr><tr><td align="center">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="center">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="center">border</td><td align="center">像素</td><td align="center">设置图像的边框粗细</td></tr></tbody></table><h5 id="图像标签属性注意点"><a href="#图像标签属性注意点" class="headerlink" title="图像标签属性注意点"></a>图像标签属性注意点</h5><pre><code>1. 图像标签可以拥有多个属性,必须写在标签名的后面2. 属性之间不分先后顺序,标签名与属性、属性与属性之间均以空格分开3. 属性采取键值对的格式,即key=“value&quot;的格式,属性=“属性值</code></pre><h4 id="2-路径"><a href="#2-路径" class="headerlink" title="(2)路径"></a>(2)路径</h4><h5 id="a-目录文件夹和根目录"><a href="#a-目录文件夹和根目录" class="headerlink" title="(a)目录文件夹和根目录:"></a>(a)目录文件夹和根目录:</h5><pre><code>  1. 目录文件夹:就是普通文件夹,里面只不过存放了我们做页面所需要的相关素材,比如html文件、图片等  2. 根目录:打开目录文件夹的第一层就是根目录</code></pre><h5 id="b-相对路径和绝对路径"><a href="#b-相对路径和绝对路径" class="headerlink" title="(b)相对路径和绝对路径"></a>(b)相对路径和绝对路径</h5><pre><code>1. 相对路径:相对于文件做参考2. 绝对路径:是指目录下的绝对位置,直接到达目标位置,通常是从盘符开始的路径。</code></pre><p>   当然,我可以帮你创建一个.md文件,其中包含你要求的Markdown格式内容。以下是一个简单的.md文件示例,它包含了有关超链接标签的信息以及Markdown格式的链接语法：</p><p>markdown</p><h2 id="5-超链接标签"><a href="#5-超链接标签" class="headerlink" title="5. 超链接标签"></a>5. 超链接标签</h2><h3 id="1-链接的语法格式"><a href="#1-链接的语法格式" class="headerlink" title="(1).链接的语法格式"></a>(1).链接的语法格式</h3><p>在Markdown中,创建超链接的语法格式如下：  </p><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="链接标题">链接文本</a><br>如果不需要链接标题,则可以省略该部分,如下所示：</p><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接文本</a><br>HTML中的超链接标签<br>虽然Markdown不支持直接插入HTML标签,但你可以了解HTML中的超链接标签<a>的语法：</p><p>html<br><a href="链接地址" target="_blank">链接文本</a><br>在这里,href属性用于指定链接目标的URL地址,而target属性用于指定链接页面的打开方式。_blank值意味着链接将在新的浏览器窗口中打开。</p><p>示例<br>以下是一个Markdown格式的示例,展示了如何使用Markdown语法创建超链接：</p><p>markdown<br>这是一个<a href="https://example.com/">指向示例网站的链接</a>。  </p><p>你也可以选择在新窗口中打开链接,像这样：<a href="https://example.com/" title="新窗口打开">在新窗口中打开链接</a>。<br>请注意,Markdown渲染器需要支持上述链接语法才能正确显示链接。</p><p>如果你希望在Markdown中显示HTML标签而不创建链接,你可以使用代码块,如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span>链接文本<span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">或者,你可以使用转义字符来显示HTML标签文本,例如：  </span><br><span class="line">  </span><br><span class="line">\<span class="code">`&lt;a href=&quot;链接地址&quot; target=&quot;_blank&quot;&gt;链接文本&lt;/a&gt;\`</span></span><br><span class="line">请记住,在Markdown文件中,上述代码块将显示为HTML标签的文本,而不是实际的超链接。</span><br><span class="line"></span><br><span class="line">实际使用</span><br><span class="line">要在Markdown文件中创建实际的超链接,请使用以下格式：</span><br><span class="line"></span><br><span class="line">markdown</span><br><span class="line">[<span class="string">链接文本</span>](<span class="link">链接地址</span>)</span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">markdown</span><br><span class="line">[<span class="string">访问GitHub</span>](<span class="link">https://github.com</span>)</span><br><span class="line">以上就是在Markdown中创建和管理超链接的基本方法。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-链接的语法格式"><a href="#2-链接的语法格式" class="headerlink" title="(2).链接的语法格式"></a>(2).链接的语法格式</h3><p><a href="#">文本或图像</a> <code>&lt;a&gt;</code> 单词 anchor[‘ænke(r)]的缩写,意为:锚。两个属性的作用如下:</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址,(必须属性)当为标签应用href属性时,它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式,其中self为默认值,blank为在新窗口中打开方式。</td></tr></tbody></table><h3 id="3-链接分类"><a href="#3-链接分类" class="headerlink" title="(3).链接分类:"></a>(3).链接分类:</h3><ol><li>外部链接: 例如<code>&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_self&quot;&gt;</code>腾讯<code>&lt;/a&gt;</code></li><li>内部链接: 网站内部页面之间的相互链接,直接链接内部页面名称即可,例如<code>&lt;a href=&quot;index.html&quot;&gt;</code>首页<code>&lt;/a&gt;</code></li><li>空链接: 如果当时没有确定链接目标时,<code>&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</code></li><li>下载链接: 地址链接的是.exe或.zip等形式的文件,会下载这个文件</li><li>网页元素链接:在网页中的各种网页元素,如文本、图像、表格、音频、视频等都可以添加超链接</li><li>锚点链接:点我们点击链接,可以快速定位到页面中的某个位置<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在链接文本的 href 属性中,设置属性值为 #名字 的形式,如<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">2. 找到目标位置标签,里面添加一个id属性 =刚才的名字,如:<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-注释和特殊字符"><a href="#6-注释和特殊字符" class="headerlink" title="6.注释和特殊字符"></a>6.注释和特殊字符</h2><h4 id="6-1-注释"><a href="#6-1-注释" class="headerlink" title="6.1 注释"></a>6.1 注释</h4><p>如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字,就需要使用注释标签<br>HTML中的注释以<code>&quot;&lt;!--&quot;开头</code>,以<code>&quot;--&gt;&quot;</code>结束。</p><h4 id="6-2-特殊字符"><a href="#6-2-特殊字符" class="headerlink" title="6.2 特殊字符"></a>6.2 特殊字符</h4><p>在 HTML 页面中,一些特殊的符号很难或者不方便直接使用,此时我们就可以使用下面的字符来替代。<br><img src="/2024/06/21/html/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png" alt="alt text"></p><h2 id="7-表格标签"><a href="#7-表格标签" class="headerlink" title="7.表格标签"></a>7.表格标签</h2><h3 id="7-1-表格的主要作用"><a href="#7-1-表格的主要作用" class="headerlink" title="7.1 表格的主要作用"></a>7.1 表格的主要作用</h3><p>表格主要用于显示、展示数据,因为它可以让数据显示的非常的规整,可读性非常好。特别是后台展示数据的时候,能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理</p><h3 id="7-2-表格的基本语法"><a href="#7-2-表格的基本语法" class="headerlink" title="7.2 表格的基本语法"></a>7.2 表格的基本语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>&lt;table&gt;&lt;/table&gt;</code>是用于定义表格的标签。</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>标签用于定义表格中的行,必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>标签中。</li><li><code>&lt;td&gt;&lt;/td&gt;</code>用于定义表格中的单元格,必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</li><li>字母 td 指表格数据(tabledata),即数据单元格的内容</li></ol><h3 id="7-3-表头单元格标签"><a href="#7-3-表头单元格标签" class="headerlink" title="7.3 表头单元格标签"></a>7.3 表头单元格标签</h3><p>一般表头单元格位于表格的第一行或第一列,表头单元格里面的文本内容加粗居中显示。<code>&lt;th&gt;</code>标签表示 HTML表格的表头部分(table head的缩写)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-表格和图片"><a href="#7-4-表格和图片" class="headerlink" title="7.4 表格和图片"></a>7.4 表格和图片</h3><p>表格的基本用法非常简单,只需要使用管状符号「|」和减号「-」来分割单元格和行即可。示例代码：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left, center, right</td><td>设置表格内容的水平对齐方式</td></tr><tr><td>border</td><td>1或””</td><td>设置表格边框的宽度（默认为「0」,即无边框）</td></tr><tr><td>cellpadding</td><td>像素单位</td><td>设置单元格内容与边框的距离,以「像素」计,默认为「1px」</td></tr><tr><td>cellspacing</td><td>像素单位</td><td>设置单元格之间的距离,以「像素」计,默认为「2px」</td></tr><tr><td>width</td><td>像素单位或百分比</td><td>设置表格的宽度</td></tr></tbody></table><h3 id="7-5-表格结构标签"><a href="#7-5-表格结构标签" class="headerlink" title="7.5 表格结构标签"></a>7.5 表格结构标签</h3><p>使用场景:因为表格可能很长,为了更好的表示表格的语义,可以将表格分割成表格头部和表格主体两大部分在表格标签中,分别用:<code>&lt;thead&gt;</code>标签表格的头部区域、<code>&lt;tbody&gt;</code>标签 表格的主体区域,这样可以更好的分清表格结构。</p><p>以上标签都是放在 <code>&lt;table&gt;&lt;/table&gt;</code>标签中。</p><h3 id="7-6-合并单元格"><a href="#7-6-合并单元格" class="headerlink" title="7.6 合并单元格"></a>7.6 合并单元格</h3><ol><li><p>合并单元格的方式</p><ul><li>跨行合并:rowspan&#x3D;”合并单元格的个数</li></ul><ul><li>跨列合并:colspan&#x3D;”合并单元格的个数”</li></ul></li><li><p>目标单元格:(写合并代码)</p><ul><li>跨行:最上侧单元格为目标单元格,写合并代码</li><li>跨列:最左侧单元格为目标单元格,写合并代码</li></ul></li></ol><h3 id="7-7-合并单元格三步曲"><a href="#7-7-合并单元格三步曲" class="headerlink" title="7.7 合并单元格三步曲"></a>7.7 合并单元格三步曲</h3><ol><li>   先确定是跨行还是跨列合并,</li><li>   找到目标单元格.写上合并方式&#x3D;合并的单元格数量。比如:<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>。</li><li>   删除多余的单元格。</li></ol><h2 id="8-列表标签"><a href="#8-列表标签" class="headerlink" title="8.列表标签"></a>8.列表标签</h2><p>表格是用来显示数据的,那么列表就是用来布局的。<br>列表最大的特点就是整齐、整洁、有序,它作为布局会更加自由和方便<br>根据使用情景不同,列表可以分为三大类:无序列表、有序列表和自定义列表</p><h3 id="8-1-无序列表-重点"><a href="#8-1-无序列表-重点" class="headerlink" title="8.1 无序列表(重点)"></a>8.1 无序列表(重点)</h3><p><code>&lt;ul&gt;</code>标签表示 HTML 页面中项目的无序列表,一般会以项目符号呈现列表项,而列表项使用<code>&lt;i&gt;</code>标签定义。</p><h4 id="无序列表的基本语法格式如下"><a href="#无序列表的基本语法格式如下" class="headerlink" title="无序列表的基本语法格式如下:"></a>无序列表的基本语法格式如下:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&lt;1i&gt;列表项1&lt;/1i&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2&lt;/1i&gt;</span><br><span class="line">&lt;1i&gt;列表项3&lt;/1i&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>无序列表的各个列表项之间没有顺序级别之分,是并列的。</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>,直接在 <code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个容器,可以容纳所有元素</li><li>无序列表会带有自己的样式属性,但在实际使用时,我们会使用 CSS 来设置。</li></ol><h3 id="8-2-有序列表-数字列表"><a href="#8-2-有序列表-数字列表" class="headerlink" title="8.2 有序列表 (数字列表)"></a>8.2 有序列表 (数字列表)</h3><p>在HTML中，有序列表是使用 <code>&lt;ol&gt;</code> 标签创建的，每个列表项都使用 <code>&lt;li&gt;</code> 标签标记。以下是代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>&lt;ol&gt;&lt;/ol&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>,直接在 <code>&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个容器,可以容纳所有元素</li><li>无序列表会带有自己的样式属性,但在实际使用时,我们会使用 CSS 来设置。</li></ol><h3 id="8-3-自定义列表"><a href="#8-3-自定义列表" class="headerlink" title="8.3 自定义列表"></a>8.3 自定义列表</h3><h4 id="8-1自定义列表的使用场景"><a href="#8-1自定义列表的使用场景" class="headerlink" title="8.1自定义列表的使用场景:"></a>8.1自定义列表的使用场景:</h4><p><img src="/2024/06/21/html/image.png" alt="图片不见了"><br>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号</p><h4 id="8-3-自定义列表-重点"><a href="#8-3-自定义列表-重点" class="headerlink" title="8.3 自定义列表(重点)"></a>8.3 自定义列表(重点)</h4><p>在 HTML标签中，<code>&lt;dl&gt;</code>标签用于定义描述列表(或定义列表)，该标签会与<code>&lt;dt&gt;</code>(定义项目&#x2F;名字)和<code>&lt;dd&gt;</code>(描述每一个项目&#x2F;名字)一起使用。<br>其基本语法如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>&lt;d&gt;&lt;/dl&gt;</code>里面只能包含<code>&lt;dt&gt;和&lt;dd&gt;</code>。</li><li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制,经常是一个<code>&lt;dt&gt;</code>对应多个<code>&lt;dd&gt;</code>。</li></ol><h2 id="9-表单标签"><a href="#9-表单标签" class="headerlink" title="9.表单标签"></a>9.表单标签</h2><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h3><p>在 HTML 中，一个完整的表单通常由表单域、表单控件(也称为表单元素)和 提示信息3个部分构成.<br><img src="/2024/06/21/html/%E8%A1%A8%E5%8D%95.png" alt="alt text"></p><h3 id="9-2-表单域"><a href="#9-2-表单域" class="headerlink" title="9.2 表单域"></a>9.2 表单域</h3><p>表单域是一个包含表单元素的区域。<br>在 HTML标签中,<code>&lt;form&gt;</code>标签用于定义表单域，以实现用户信息的收集和传递。<br><code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span><span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span><span class="attr">name</span>=<span class="string">&quot;表单域名称&quot;</span>&gt;</span>各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="属性表格"><a href="#属性表格" class="headerlink" title="属性表格"></a>属性表格</h4><table><thead><tr><th>属性名</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于提交表单时提交到的服务器程序的url地址</td></tr><tr><td>method</td><td>get&#x2F;post</td><td>用于提交表单时的方法,其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于提交表单时的名称,以便区分同一个页面的不同表单</td></tr></tbody></table><h3 id="9-表单控件-表单元素"><a href="#9-表单控件-表单元素" class="headerlink" title="9.表单控件(表单元素)"></a>9.表单控件(表单元素)</h3><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件</p><ol><li>input输入表单元素</li><li>select下拉表单元素</li><li>textarea 文本域元素</li></ol><h5 id="9-3-1-表单元素"><a href="#9-3-1-表单元素" class="headerlink" title="9.3.1 &lt;input&gt; 表单元素"></a>9.3.1 <code>&lt;input&gt;</code> 表单元素</h5><p>在英文单词中，input是输入的意思，而在表单元素中<code>&lt;input&gt;</code>标签用于收集用户信息<br>在 <code>&lt;input&gt;</code>标签中，包含一个type属性,根据不同的type属性值,输入字段拥有很多种形式(可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;input/&gt;</code>标签为单标签</li><li>type 属性设置不同的属性值用来指定不同的控件类型</li></ul><p><img src="/2024/06/21/html/input_type%E5%B1%9E%E6%80%A7.png" alt="alt text"></p><p>除 type属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，其常用属性如下<br><img src="/2024/06/21/html/input_%E5%B1%9E%E6%80%A7.png" alt="alt text"></p><ol><li>name 和value 是每个表单元素都有的属性值,主要给后台人员使用.</li><li>name 表单元素的名字,要求 单选按钮和复选框要有相同的name值</li><li>checked属性主要针对于单选按钮和复选框,主要作用一打开页面,就要可以默认选中某个表单元素</li><li>maxlength是用户可以在表单元素输入的最大字符数,一般较少使用</li></ol><h5 id="9-3-2-标签"><a href="#9-3-2-标签" class="headerlink" title="9.3.2 &lt;label&gt; 标签"></a>9.3.2 <code>&lt;label&gt;</code> 标签</h5><p><code>&lt;label&gt;</code>标签为input元素定义标注(标签)<br><code>&lt;label&gt;</code>标签用于绑定一个表单元素,当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.<br>语法: 要去往的标签的id属性值和label标签的for属性值一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span><span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9-3-3-标签"><a href="#9-3-3-标签" class="headerlink" title="9.3.3 &lt;select&gt; 标签"></a>9.3.3 <code>&lt;select&gt;</code> 标签</h5><p>使用场景:在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用<code>&lt;select&gt;</code>标签控件定义下<br>拉列表。<br>语法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1(默认文本)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></li><li>在<code>&lt;option&gt;</code>中定义selected &#x3D; “selected”时，当前项即为默认选中项。</li></ol><h5 id="9-3-4textarea文本域-表单元素"><a href="#9-3-4textarea文本域-表单元素" class="headerlink" title="9.3.4textarea文本域 表单元素"></a>9.3.4textarea文本域 表单元素</h5><p>语法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarearows=&quot;3&quot; cols=&quot;20&quot;&gt;</span><br><span class="line">文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">1.通过 <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>标签可以轻松地创建多行文本输入框。</span><br><span class="line">2.cols=&#x27;每行中的字符数&quot;，rows=&quot;显示的行数&quot;我们在实际开发中不会使用，都是用 CSS 来改变大小</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2024/06/21/css/"/>
      <url>/2024/06/21/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS层叠样式表"><a href="#CSS层叠样式表" class="headerlink" title="CSS层叠样式表"></a>CSS层叠样式表</h1><h2 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1. CSS简介"></a>1. CSS简介</h2><h3 id="1-1-HTML的局限性"><a href="#1-1-HTML的局限性" class="headerlink" title="1.1 HTML的局限性"></a>1.1 HTML的局限性</h3><p>说起 HTML，这其实是个非常单纯的家伙，他只关注内容的语义.比如 <code>&lt;h1&gt;</code>表明这是一个大标题，<code>&lt;p&gt;</code>表明这是一个段落，<code>&lt;img&gt;</code>表明这儿有一个图片，<code>&lt;a&gt;</code>表示此处有链接.很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点:丑.</p><h3 id="1-2-CSS-网页的美容师"><a href="#1-2-CSS-网页的美容师" class="headerlink" title="1.2 CSS-网页的美容师"></a>1.2 CSS-网页的美容师</h3><p>CSS 是也是一种标记语言，是层叠样式表(CascadingStyleSheets)的简称，<br>有时我们也会称之为 CSS 样式表或级联样式表.<br>CSS 是也是一种标记语言<br>CSS 主要用于设置 HTML 页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式边距等)以及版面的布局和外观显示样式.<br>CSS 最大价值:由 HTML专注去做结构呈现，样式交给CSS，即结构(HTML)与样式(CSS)相分离.</p><h3 id="1-3-CSS语法规范"><a href="#1-3-CSS语法规范" class="headerlink" title="1.3 CSS语法规范"></a>1.3 CSS语法规范</h3><p>CSS 规则由两个主要的部分构成:选择器以及一条或多条声明.</p><ul><li>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式</li><li>属性与属性值之间用键值对链接</li><li>属性与属性之间用分号(;)分割</li></ul><h3 id="1-4-CSS代码风格"><a href="#1-4-CSS代码风格" class="headerlink" title="1.4 CSS代码风格"></a>1.4 CSS代码风格</h3><ol><li>样式格式书写<ul><li>紧凑型<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>: deeppink; <span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure></li><li>展开型<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">     <span class="attribute">color</span>: deeppink;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>样式大小写<br>强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外</li><li>空格规范<ul><li>属性值前面，冒号后面，保留一个空格</li><li>选择器(标签)和大括号中间保留空格</li></ul></li></ol><h2 id="2-CSS基础选择器"><a href="#2-CSS基础选择器" class="headerlink" title="2.CSS基础选择器"></a>2.CSS基础选择器</h2><h3 id="2-1-选择器分类"><a href="#2-1-选择器分类" class="headerlink" title="2.1 选择器分类"></a>2.1 选择器分类</h3><p>选择器分基础选择器和复合选择器两个大类，我们这里先讲解一下基础选择器<br>基础选择器是由单个选择器组成的<br>基础选择器又包括:标签选择器，类选择器，id选择器和通配符选择器</p><h3 id="2-2-标签选择器"><a href="#2-2-标签选择器" class="headerlink" title="2.2 标签选择器"></a>2.2 标签选择器</h3><p>标签选择器(元素选择器)是指用 HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式.</p><h3 id="2-3-类选择器"><a href="#2-3-类选择器" class="headerlink" title="2.3 类选择器"></a>2.3 类选择器</h3><p>如果想要差异化选择不同的标签单独选一个或者某几个标签可以使用类选择器<br>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">        属性<span class="number">1</span> : 属性值<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类选择器使用”.”(英文点号)进行标识后面紧跟类名(自定义我们自己命名的).</li><li>可以理解为给这个标签起了一个名字来表示.</li><li>长名称或词组可以使用中横线来为选择器命名.</li><li>不要使用纯数字、中文等命名尽量使用英文字母来表示</li></ul><h3 id="2-4-类选择器-多类名"><a href="#2-4-类选择器-多类名" class="headerlink" title="2.4 类选择器-多类名"></a>2.4 类选择器-多类名</h3><p>我们可以给一个标签指定多个类名从而达到更多的选择目的.这些类名都可以选出这个标签简单理解就是一个标签有多个名字</p><ol><li>多类名使用方式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;redfont font-size20&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>多类名开发中使用场景<br>(1)可以把一些标签元素相同的样式(共同的部分)放到一个类里面<br>(2)这些标签都可以调用这个公共的类，然后再调用自己独有的类<br>(3)从而节省CSS代码，统一修改非常方便</li></ol><h3 id="2-5-id选择器"><a href="#2-5-id选择器" class="headerlink" title="2.5 id选择器"></a>2.5 id选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* id选择器的口诀:样式#定义结构id调用，只能调用一次别人切勿使用 */</span></span><br><span class="line"><span class="selector-id">#pink</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>id 选择器和类选择器的区别<br>① 类选择器(class)好比人的名字一个人可以有多个名字，同时一个名字也可以被多个人使用.<br>② id 选择器好比人的身份证号码全中国是唯一的不得重复.<br>③ id 选择器和类选择器最大的不同在于使用次数上<br>④ 类选择器在修改样式中用的最多id 选择器一般用于页面唯一性的元素上经常和 JavaScript 搭配使用.</p><h3 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h3><p><code>*</code>选择页面中全部元素<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    属性<span class="number">1</span> : 属性值<span class="number">1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用自动就给所有的元素使用样式</li><li>在 CSS 中通配符选择器使用<code>*</code>定义它表示选取页面中所有元素(标签).</li></ul><h2 id="3-Font字体属性"><a href="#3-Font字体属性" class="headerlink" title="3. Font字体属性"></a>3. Font字体属性</h2><h3 id="3-1-Font-family字体系列"><a href="#3-1-Font-family字体系列" class="headerlink" title="3.1 Font-family字体系列"></a>3.1 Font-family字体系列</h3><p>CSS 使用 font-family属性定义文本的字体系列.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line">   <span class="attribute">font-family</span> : <span class="string">&quot;微软雅黑&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">font-family</span> : Arial，<span class="string">&quot;Microsoft Yahei&quot;</span>，<span class="string">&quot;微软雅黑&quot;</span>; </span><br><span class="line">   <span class="comment">/* 多个字体的作用是按从左到右依次查看直到用户电脑中有该字体，则使用该字体显示 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体加引号</li><li>尽量使用系统默认自带字体保证在任何用户的浏览器中都能正确显示</li><li>最常见的几个字体 :body{ font-family:’Microsoft YaHei’，tahoma，arial，’Hiragino Sans GB’; }</li></ul><h3 id="3-2-Font-size字体大小"><a href="#3-2-Font-size字体大小" class="headerlink" title="3.2 Font-size字体大小"></a>3.2 Font-size字体大小</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span> : <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS 使用 font-size属性定义字体大小，单位为px(像素)</p><ul><li>标题像素比较特殊，需要独特设置</li><li>px(像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为16px</li><li>不同浏览器可能默认显示的字号大小不一致我们尽量给一个明确值大小不要默认大小</li><li>可以给 body指定整个页面文字的大小</li></ul><h3 id="3-3-font-weight字体粗细"><a href="#3-3-font-weight字体粗细" class="headerlink" title="3.3 font-weight字体粗细"></a>3.3 font-weight字体粗细</h3><p>font-weight : normal | bold | bolder | lighter | number<br>参数:</p><ul><li>normal:正常的字体.相当于number为400.声明此值将取消之前任何设置</li><li>bold:粗体.相当于number为700.也相当于b对象的作用</li><li>bolder:IE5+ 特粗体</li><li>lighter:IE5+ 细体</li><li>number:IE5+ 100|200|300|400|500|600|700|800|900</li></ul><h3 id="3-4-font-style文字样式-如斜体"><a href="#3-4-font-style文字样式-如斜体" class="headerlink" title="3.4 font-style文字样式(如斜体)"></a>3.4 font-style文字样式(如斜体)</h3><p>CSS 使用 font-style 属性设置文本的风格.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">font-style</span> : normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值浏览器会显示标准的字体样式 font-style: normal;</td></tr><tr><td>italic</td><td>浏览器会显示斜体的字体样式.</td></tr></tbody></table><ul><li>注意:平时我们很少给文字加斜体反而要给斜体标签(em，i)改为不倾斜字体</li></ul><h3 id="3-5-字体复合属性"><a href="#3-5-字体复合属性" class="headerlink" title="3.5 字体复合属性"></a>3.5 字体复合属性</h3><p>字体属性可以把以上文字样式综合来写，这样可以更节约代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">font</span>:font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 font 属性时必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略(取默认值)但必须保留 font-size和 font-family属性否则 font 属性将不起作用</li></ul><h2 id="4-文本属性"><a href="#4-文本属性" class="headerlink" title="4.文本属性"></a>4.文本属性</h2><ul><li>CSS Text(文本)属性可定义文本的外观比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等</li></ul><h3 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h3><p>color 属性用于定义文本的颜色.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-文本对齐"><a href="#4-2-文本对齐" class="headerlink" title="4.2 文本对齐"></a>4.2 文本对齐</h3><p>text-align属性用于设置元素内文本内容的水平对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐(默认值)</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="4-3-装饰文本"><a href="#4-3-装饰文本" class="headerlink" title="4.3 装饰文本"></a>4.3 装饰文本</h3><p>text-decoration属性规定添加到文本的修饰.可以给文本添加下划线、删除线、上划线等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">text-decoration</span> : underline;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认.没有装饰线(最常用)</td></tr><tr><td>underline</td><td>下划线. 链接a 自带下划线(常用)</td></tr><tr><td>overline</td><td>上划线.(几乎不用)</td></tr><tr><td>line-through</td><td>删除线.(不常用)</td></tr><tr><td>可以设置css属性取出超链接标签的默认下划线</td><td></td></tr></tbody></table><h3 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h3><p>text-indent属性用来指定文本的第一行的缩进通常是将段落的首行缩进<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">text-indent</span> : <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置该属性所有元素的第一行都可以缩进一个给定的长度甚至该长度可以是负值.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">text-indent</span> : <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>em 是一个相对单位就是当前元素(font-size)1个文字的大小，如果当前元素没有设置大小则会按照父元素的1个文字大小</p><h3 id="4-5-行间距"><a href="#4-5-行间距" class="headerlink" title="4.5 行间距"></a>4.5 行间距</h3><p>line-height属性用于设置行间的距离(行高).可以控制文字行与行之间的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">line-height</span> : <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/21/css/image.png" alt="alt text"></p><h2 id="5-CSS的引入方式"><a href="#5-CSS的引入方式" class="headerlink" title="5. CSS的引入方式"></a>5. CSS的引入方式</h2><h3 id="5-1-CSS的三种样式表"><a href="#5-1-CSS的三种样式表" class="headerlink" title="5.1 CSS的三种样式表"></a>5.1 CSS的三种样式表</h3><p>按照 CSS 样式书写的位置(或者引入的方式)CSS样式表可以分为三大类</p><ol><li>行内样式表(行内式)</li><li>内部样式表(嵌入式)</li><li>外部样式表(链接式)</li></ol><h3 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h3><p>内部样式表(内嵌样式表)是写到html页面内部，是将所有的 CSS 代码抽取出来单独放到一个<code>&lt;style&gt;</code>标签中.<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>:red;</span><br><span class="line">   <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt; </span><br></pre></td></tr></table></figure><ul><li><code>&lt;style&gt;</code>标签理论上可以放在HTML 文档的任何地方但一般会放在文档的<code>&lt;head&gt;</code>标签中</li><li>通过此种方式可以方便控制当前整个页面中的元素样式设置</li><li>代码结构清晰但是并没有实现结构与样式完全分离</li><li>使用内部样式表设定CSS通常也被称为嵌入式引入这种方式是我们练习时常用的方式</li></ul><h3 id="5-3-行内样式表"><a href="#5-3-行内样式表" class="headerlink" title="5.3 行内样式表"></a>5.3 行内样式表</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">color</span> : red; <span class="attribute">font-size</span> : <span class="number">12px</span>;&quot;&gt;行内样式表&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>style 其实就是标签的属性</li><li>在双引号中间写法要符合CSS 规范</li><li>可以控制当前的标签设置样式</li><li>由于书写繁琐并且没有体现出结构与样式相分离的思想所以不推荐大量使用只有对当前元素添加简单样式的时候可以考虑使用</li></ul><h3 id="5-4-外部样式表"><a href="#5-4-外部样式表" class="headerlink" title="5.4 外部样式表"></a>5.4 外部样式表</h3><p>实际开发都是外部样式表，适合于样式比较多的情况.核心是:样式单独写到 CSS文件中之后把CSS文件引入到 HTML页面中使用.</p><ul><li>引入外部样式表分为两步</li></ul><ol><li>新建一个后缀名为.css 的样式文件把所有 CSS 代码都放入此文件中.</li><li>在 HTML页面中使用<code>&lt;link&gt;</code>标签引入这个文件.<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></li></ol><h2 id="6-Chrome-调试工具"><a href="#6-Chrome-调试工具" class="headerlink" title="6. Chrome 调试工具"></a>6. Chrome 调试工具</h2><h3 id="6-1-使用调试工具"><a href="#6-1-使用调试工具" class="headerlink" title="6.1 使用调试工具"></a>6.1 使用调试工具</h3><ul><li>Ctrl+滚轮 可以放大开发者工具代码大小.</li><li>左边是 HTML 元素结构右边是CSS样式</li><li>右边 CSS 样式可以改动数值(左右箭头或者直接输入)和查看颜色.</li><li>Ctrl +0 复原浏览器大小.</li><li>如果点击元素发现右侧没有样式引入极有可能是类名或者样式引入错误如果有样式但是样式前面有黄色叹号提示则是样式属性书写错误.</li></ul><h2 id="7-Emmet语法"><a href="#7-Emmet语法" class="headerlink" title="7. Emmet语法"></a>7. Emmet语法</h2><p>Emmet语法的前身是Zen coding，它使用缩写，来提高htm&#x2F;css的编写速度，Vscode内部已经集成该语法</p><ol><li>快速生成HTML结构语法</li><li>快速生成CSS样式语法</li></ol><h3 id="7-1-快速生成HTML结构语法"><a href="#7-1-快速生成HTML结构语法" class="headerlink" title="7.1 快速生成HTML结构语法"></a>7.1 快速生成HTML结构语法</h3><ol><li>生成标签 直接输入标签名按tab键即可 比如 div 然后tab键，就可以生成<code>&lt;div&gt;&lt;/div&gt;</code></li><li>如果想要生成多个相同标签 加上<code>*</code>就可以了比如 div*3 就可以快速生成3个div</li><li>如果有父子级关系的标签，可以用<code>&gt;</code>比如 ul &gt; li就可以了</li><li>如果有兄弟关系的标签，用 <code>+</code> 就可以了 比如 div + p</li><li>如果生成带有类名或者id名字的，直接写<code>.demo</code> 或者 <code>#two</code> 然后tab 键就可以了</li><li>如果生成的div类名是有顺序的，可以用自增符号 <code>$</code>， 如 <code>.demo$*5</code></li><li>想要生成的标签带文字，可以使用<code>&#123;&#125;</code>包含你的文字，如 <code>div&#123;text&#125;</code></li></ol><h3 id="7-2-快速生成CSS样式语法"><a href="#7-2-快速生成CSS样式语法" class="headerlink" title="7.2 快速生成CSS样式语法"></a>7.2 快速生成CSS样式语法</h3><ol><li>比如 w200 按tab 可以生成 width : 200px;</li><li>比如 lh26 按tab 可以生成 line-height : 26px;<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       <span class="selector-class">.one</span> &#123;</span><br><span class="line">           <span class="comment">/* w200 */</span></span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="comment">/* tac */</span></span><br><span class="line">           <span class="attribute">text-align</span>: center;</span><br><span class="line">           <span class="comment">/* ti2em */</span></span><br><span class="line">           <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">           <span class="comment">/* tdn */</span></span><br><span class="line">           <span class="attribute">text-decoration</span>: none;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-CSS的复合选择器"><a href="#8-CSS的复合选择器" class="headerlink" title="8. CSS的复合选择器"></a>8. CSS的复合选择器</h2><h3 id="8-1-什么是复合选择器"><a href="#8-1-什么是复合选择器" class="headerlink" title="8.1 什么是复合选择器"></a>8.1 什么是复合选择器</h3><p>在 CSS 中，可以根据选择器的类型把选择器分为基础选择器和复合选择器，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的.</p><ul><li>复合选择器可以更准确、更高效的选择目标元素(标签)</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括:后代选择器、子选择器、并集选择器、伪类选择器等等</li></ul><h3 id="8-2-后代选择器"><a href="#8-2-后代选择器" class="headerlink" title="8.2 后代选择器"></a>8.2 后代选择器</h3><p><em>后代选择器</em>又称为<em>包含选择器</em>，可以选择父元素里面子元素.其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔.当标签发生嵌套时，内层标签就成为外层标签的后代.<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span>&#123; 样式声明 &#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择<strong>元素1里面的所有元素2(后代元素)</strong><br>例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123; 样式声明 &#125; <span class="comment">/* 选择 u1 里面所有的 1i标签元素/</span></span><br></pre></td></tr></table></figure><ul><li>元素1和 元素2 中间用<em>空格隔开</em></li><li>元素1是父级，元素2是子级最终选择的是<em>元素2</em>  </li><li>元素2可以是儿子，也可以是孙子等，<em>只要是元素1的后代即可</em></li><li>元素1 和 元素2 可以是<em>任意基础选择器</em>，如<code>.nav li &#123;color: yellow;&#125;</code></li></ul><h3 id="8-3-子选择器-重要"><a href="#8-3-子选择器-重要" class="headerlink" title="8.3 子选择器(重要 )"></a>8.3 子选择器(重要 )</h3><p>**子元素选择器(子选择器)*<em>只能选择作为某元素的最近一级子元素.简单理解就是选</em>亲儿子*元素<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>&gt;元素<span class="number">2</span> &#123; 样式声明 &#125;</span><br></pre></td></tr></table></figure><p>上述语法表示 <em>选择元素1里面的所有直接后代(子元素)元素2.</em><br>例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123; 样式声明 &#125; <span class="comment">/* 选择 div 里面所有最近一级 p 标签元素*/</span></span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用 <strong>大于号</strong> 隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>可以嵌套使用，如<code>.nav&gt;p&gt;a &#123;color: yellow;&#125;</code></li></ul><h3 id="8-4-并集选择器"><a href="#8-4-并集选择器" class="headerlink" title="8.4 并集选择器"></a>8.4 并集选择器</h3><ul><li>并集选择器可以选择多组标签，同时为他们定义相同的样式.通常用于集体声明.</li><li>并集选择器是各选择器通过英文逗号<code>，</code>连接而成，任何形式的选择器都可以作为并集选择器的一部分.<br>语法:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>，元素<span class="number">2</span>&#123; 样式声明 &#125;</span><br></pre></td></tr></table></figure>上述语法表示选择<strong>元素1 和 元素2</strong>.</li></ul><p>例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>，<span class="selector-tag">div</span>&#123; 样式声明 &#125;  <span class="comment">/* 选择 ul和 div标签元素 */</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用<strong>逗号隔开</strong></li><li>逗号可以理解为<strong>和</strong>的意思</li><li>并集选择器通常用于集体声明</li></ul><h3 id="8-5-伪类选择器"><a href="#8-5-伪类选择器" class="headerlink" title="8.5 伪类选择器"></a>8.5 伪类选择器</h3><p><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素.<br>伪类选择器书写最大的特点是<strong>用冒号:<strong>表示，比如:hover、:first-child<br>因为伪类选择器很多，比如有链接伪类、结构伪类等，所以这里先给大家讲解常用的</strong>链接伪类选择器</strong></p><h4 id="8-5-1-链接伪类选择器"><a href="#8-5-1-链接伪类选择器" class="headerlink" title="8.5.1 链接伪类选择器"></a>8.5.1 链接伪类选择器</h4><p>a:link      选择所有未被访问的链接<br>a:visited   选择所有已被访问的链接<br>a:hover     选择鼠标指针位于其上的链接<br>a:active    选择活动链接(鼠标按下未弹起的链接) </p><ul><li>链接伪类选择器注意事项</li></ul><ol><li>为了确保生效，请按照<strong>LVHA</strong>的循顺序声明:<em>link-:visited-:hover-:active</em></li><li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li></ol><ul><li>链接伪类选择器实际工作开发中的写法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*a 是标签选择器 所有的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>:gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*:hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>:red;<span class="comment">/*鼠标经过的时候，由原来的灰色变成了红色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-5-2-focus伪类选择器"><a href="#8-5-2-focus伪类选择器" class="headerlink" title="8.5.2 :focus伪类选择器"></a>8.5.2 :focus伪类选择器</h4><p>:focus 伪类选择器用于选取获得焦点的表单元素<br>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对于表单元素来说.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">   <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-总结"><a href="#8-6-总结" class="headerlink" title="8.6 总结"></a>8.6 总结</h3><table><thead><tr><th align="center">选择器</th><th align="center">作用</th><th align="center">标签</th><th align="center">语法</th><th align="center">示例代码</th></tr></thead><tbody><tr><td align="center">全局选择器</td><td align="center">选择所有元素</td><td align="center">*</td><td align="center">无</td><td align="center"><code>* &#123;样式&#125;</code></td></tr><tr><td align="center">元素选择器</td><td align="center">选择页面中所有特定的元素</td><td align="center">任意HTML标签</td><td align="center">标签名</td><td align="center"><code>元素名 &#123;样式&#125;</code></td></tr><tr><td align="center">类选择器</td><td align="center">选择具有特定class的所有元素</td><td align="center">任意带有class属性的HTML元素</td><td align="center">.类名</td><td align="center"><code>.类名 &#123;样式&#125;</code></td></tr><tr><td align="center">ID选择器</td><td align="center">选择具有特定ID的元素</td><td align="center">任意带有ID属性的HTML元素</td><td align="center">#ID名</td><td align="center"><code>#ID名 &#123;样式&#125;</code></td></tr><tr><td align="center">属性选择器</td><td align="center">根据属性选择元素</td><td align="center">任意带有特定属性的HTML元素</td><td align="center">[属性名]</td><td align="center"><code>[属性名] &#123;样式&#125;</code></td></tr><tr><td align="center">子选择器</td><td align="center">选择指定元素的直接子元素</td><td align="center">任意HTML元素</td><td align="center">父级 &gt; 子级</td><td align="center"><code>父级 &gt; 子级 &#123;样式&#125;</code></td></tr><tr><td align="center">后代选择器</td><td align="center">选择指定元素的所有后代（嵌套的子元素）</td><td align="center">任意HTML元素</td><td align="center">父级 子级</td><td align="center"><code>父级 子级 &#123;样式&#125;</code></td></tr><tr><td align="center">相邻兄弟选择器</td><td align="center">选择紧接在指定元素之后的元素</td><td align="center">任意HTML元素</td><td align="center">元素1 + 元素2</td><td align="center"><code>元素1 + 元素2 &#123;样式&#125;</code></td></tr><tr><td align="center">通用兄弟选择器</td><td align="center">选择指定元素之后的所有兄弟元素</td><td align="center">任意HTML元素</td><td align="center">元素1 ~ 元素2</td><td align="center"><code>元素1 ~ 元素2 &#123;样式&#125;</code></td></tr><tr><td align="center">群组选择器</td><td align="center">同时选择多个选择器</td><td align="center">任意HTML元素</td><td align="center">选择器1，选择器2</td><td align="center"><code>选择器1， 选择器2 &#123;样式&#125;</code></td></tr><tr><td align="center">focus选择器</td><td align="center">选择获得焦点的input元素</td><td align="center">input标签</td><td align="center">无</td><td align="center"><code>input:focus &#123;样式&#125;</code></td></tr><tr><td align="center">:hover选择器</td><td align="center">选择鼠标悬浮的元素</td><td align="center">任意HTML标签</td><td align="center">选择器:hover</td><td align="center"><code>选择器:hover &#123;样式&#125;</code></td></tr><tr><td align="center">子串属性选择器</td><td align="center">选择属性中包含特定子串的元素</td><td align="center">任意带有属性的HTML标签</td><td align="center">[属性名*&#x3D;值]</td><td align="center"><code>[属性名*=值] &#123;样式&#125;</code></td></tr><tr><td align="center">开始子串属性选择器</td><td align="center">选择属性值以特定子串开始的元素</td><td align="center">任意带有属性的HTML标签</td><td align="center">[属性名^&#x3D;值]</td><td align="center"><code>[属性名^=值] &#123;样式&#125;</code></td></tr><tr><td align="center">结束子串属性选择器</td><td align="center">选择属性值以特定子串结束的元素</td><td align="center">任意带有属性的HTML标签</td><td align="center">[属性名$&#x3D;值]</td><td align="center"><code>[属性名$=值] &#123;样式&#125;</code></td></tr><tr><td align="center">伪类选择器</td><td align="center">选择元素的特定状态</td><td align="center">任意HTML标签</td><td align="center">选择器:伪类</td><td align="center"><code>选择器:伪类 &#123;样式&#125;</code></td></tr><tr><td align="center">伪元素选择器</td><td align="center">选择元素指定的部分</td><td align="center">任意HTML标签</td><td align="center">选择器::伪元素</td><td align="center"><code>选择器::伪元素 &#123;样式&#125;</code></td></tr></tbody></table><h2 id="9-CSS的元素选择模式"><a href="#9-CSS的元素选择模式" class="headerlink" title="9.CSS的元素选择模式"></a>9.CSS的元素选择模式</h2><h3 id="9-1-什么是元素显示模式"><a href="#9-1-什么是元素显示模式" class="headerlink" title="9.1 什么是元素显示模式"></a>9.1 什么是元素显示模式</h3><p>作用:网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点<strong>可以更好的布局我们的网页</strong><br>元素显示模式就是<strong>元素(标签)以什么方式进行显示</strong>，比如<code>&lt;div&gt;</code>自己占一行，比如一行可以放多个<code>&lt;span&gt;</code>.</p><ul><li>HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型</li></ul><h3 id="9-2-块元素"><a href="#9-2-块元素" class="headerlink" title="9.2 块元素"></a>9.2 块元素</h3><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素</p><ul><li>块级元素的特点:<br>① 比较霸道，自己独占一行.<br>② 高度，宽度、外边距以及内边距都可以控制.<br>③ 宽度默认是容器(父级宽度)的100%.<br>④ 是一个容器及盒子，里面可以放行内或者块级元素.</li><li>注意:</li></ul><ol><li>文字类的元素内不能使用块级元素</li><li><code>&lt;p&gt;</code>标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li><li>同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其他块级元素</li></ol><h3 id="9-3-行内元素"><a href="#9-3-行内元素" class="headerlink" title="9.3 行内元素"></a>9.3 行内元素</h3><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><ul><li>行内元素的特点:<br>① 相邻行内元素在一行上，一行可以显示多个，<br>② 高、宽直接设置是无效的。<br>③ 默认宽度就是它本身内容的宽度<br>④ 行内元素只能容纳文本或其他行内元素<br><strong>注意</strong></li></ul><ol><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</li></ol><h3 id="9-4-行内块元素"><a href="#9-4-行内块元素" class="headerlink" title="9.4 行内块元素"></a>9.4 行内块元素</h3><p>在行内元素中有几个特殊的标签，—–<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>—-，它们<strong>同时具有块元素和行内元素的特点</strong>.有些资料称它们为行内块元素</p><ul><li>行内块元素的特点:<br>① 和相邻行内元素(行内块)在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)。<br>② 默认宽度就是它本身内容的宽度(行内元素特点)。<br>③ 高度，行高、外边距以及内边距都可以控制(块级元素特点)。</li></ul><h3 id="9-5-元素显示模式总结"><a href="#9-5-元素显示模式总结" class="headerlink" title="9.5 元素显示模式总结"></a>9.5 元素显示模式总结</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h3 id="9-6-元素显示模式转换"><a href="#9-6-元素显示模式转换" class="headerlink" title="9.6 元素显示模式转换"></a>9.6 元素显示模式转换</h3><p>特殊情况下，我们需要元素模式的转换，简单理解:一个模式的元素需要另外一种模式的特性比如想要增加链接<code>&lt;a&gt;</code>的触发范围。</p><ul><li>转换为块元素:display: block</li><li>转换为行内块元素:display: inline-block;</li><li>转换成行内元素:display: inline</li></ul><h3 id="9-7-一个小技巧-单行文字垂直居中的代码"><a href="#9-7-一个小技巧-单行文字垂直居中的代码" class="headerlink" title="9.7 一个小技巧 单行文字垂直居中的代码"></a>9.7 一个小技巧 单行文字垂直居中的代码</h3><p>CSS 没有给我们提供文字垂直居中的代码.这里我们可以使用一个小技巧来实现解决方案: 让文字的行高等于盒子的高度 就可以让文字在当前盒子内垂直居中<br>例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2024/06/21/css/line-height.png"></p><p>其实原理是<br><img src="/2024/06/21/css/%E5%8E%9F%E7%90%86.png" alt="alt text"></p><h2 id="10-CSS的背景样式"><a href="#10-CSS的背景样式" class="headerlink" title="10 CSS的背景样式"></a>10 CSS的背景样式</h2><p>通过 CSS 背最属性，可以给页面元素添加背景样式。背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等</p><h3 id="10-1-背景颜色"><a href="#10-1-背景颜色" class="headerlink" title="10.1 背景颜色"></a>10.1 背景颜色</h3><p>background-color属性定义了背景的颜色值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:颜色值;</span><br></pre></td></tr></table></figure><p>默认是transparent即透明</p><h3 id="10-2-背景图片"><a href="#10-2-背景图片" class="headerlink" title="10.2 背景图片"></a>10.2 背景图片</h3><p><strong>background-image</strong>属性描述了元素的背景图像。实际开发常见于logo 或者一些装饰性的小图片或者是超大的背景图片，<br>优点是非常便于控制位置.(精灵图也是一种运用场景)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:none|<span class="built_in">url</span>(<span class="string">url</span>);</span><br></pre></td></tr></table></figure><h3 id="10-3-背景平铺"><a href="#10-3-背景平铺" class="headerlink" title="10.3 背景平铺"></a>10.3 背景平铺</h3><p>如果需要在 HTML 页面上对背景图像进行平铺，可以使用<strong>background-repeat</strong>属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>:repeat|no-repeat|repeat-x|repeat-y;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>描述</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像会在垂直方向和水平方向重复（默认值）</td></tr><tr><td>no-repeat</td><td>背景图像不会重复</td></tr><tr><td>repeat-x</td><td>背景图像仅在水平方向重复</td></tr><tr><td>repeat-y</td><td>背景图像仅在垂直方向重复</td></tr></tbody></table><h3 id="10-4-背景图片位置"><a href="#10-4-背景图片位置" class="headerlink" title="10.4 背景图片位置"></a>10.4 背景图片位置</h3><p>利用 <strong>background-position</strong>属性可以改变图片在背景中的位置。</p><ol><li>参数是方位名词</li></ol><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<strong>left top</strong> 和 <strong>top left</strong> 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul><ol start="2"><li>参数是精确单位</li></ol><ul><li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li></ul><ol start="3"><li>混合坐标</li></ol><ul><li><em>形参</em>x，y轴顺序不变，如<strong>20px center</strong>为<strong>水平距左边界20px，垂直居中</strong></li></ul><h3 id="10-5-背景附着-背景图像固定"><a href="#10-5-背景附着-背景图像固定" class="headerlink" title="10.5 背景附着(背景图像固定)"></a>10.5 背景附着(背景图像固定)</h3><p><strong>background-attachment</strong>属性设置背景图像是否固定或者随着页面的其余部分滚动。<br>background-attachment后期可以制作视差滚动的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>:scroll|fixed</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="10-6-背景复合写法"><a href="#10-6-背景复合写法" class="headerlink" title="10.6 背景复合写法"></a>10.6 背景复合写法</h3><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性<strong>background</strong>中，从而节约代码量<br>当使用简写属性时，没有特定的书写顺序，一般习惯约定顺序为:<strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong></p><h3 id="10-7-背景色半透明"><a href="#10-7-背景色半透明" class="headerlink" title="10.7 背景色半透明"></a>10.7 背景色半透明</h3><p>CSS3 为我们提供了背最颜色半透明的效，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>，<span class="number">0</span>，<span class="number">0</span>，<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><ul><li>最后一个参数是alpha透明度，取值范围在0~1之间</li><li>我们习惯把0.3的0省略掉，写为background:rgba(0，0，0，.3);</li><li>注意:背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3 新增属性，是IE9+版本浏览器才支持的</li><li>但是现在实际开发，我们不太关注兼容性写法了，可以放心使用</li></ul><table><thead><tr><th>属性</th><th>描述</th><th>示例&#x2F;相关</th></tr></thead><tbody><tr><td>background</td><td>背景属性</td><td>$background: #fff url(‘bg.png’) no-repeat top left;</td></tr><tr><td>background-color</td><td>背景颜色</td><td>$background-color: #f00;</td></tr><tr><td>background-image</td><td>背景图像</td><td>$background-image: url(‘bg.png’);</td></tr><tr><td>background-repeat</td><td>背景图像的重复方式</td><td>$background-repeat: no-repeat;</td></tr><tr><td>background-attachment</td><td>背景图像的定位方式</td><td>$background-attachment: fixed;</td></tr><tr><td>background-position</td><td>背景图像的位置</td><td>$background-position: top right;</td></tr><tr><td>background-size</td><td>背景图像的尺寸</td><td>$background-size: cover;</td></tr><tr><td>background-origin</td><td>背景图片的定位区域</td><td>$background-origin: content-box;</td></tr><tr><td>background-clip</td><td>背景绘制区域</td><td>$background-clip: padding-box;</td></tr><tr><td>background-blend-mode</td><td>背景混合模式</td><td>$background-blend-mode: multiply;</td></tr></tbody></table><h3 id="10-8-背景总结"><a href="#10-8-背景总结" class="headerlink" title="10.8 背景总结"></a>10.8 背景总结</h3><p><img src="/2024/06/21/css/bg-tt.png" alt="alt text"></p><h2 id="11-CSS三大特性"><a href="#11-CSS三大特性" class="headerlink" title="11 CSS三大特性"></a>11 CSS三大特性</h2><p>CSS 有三个非常重要的三个特性:层善性、继承性、优先级。</p><h3 id="11-1-层叠性"><a href="#11-1-层叠性" class="headerlink" title="11.1 层叠性"></a>11.1 层叠性</h3><p>相同选择器给设置相同的样式，此时一个样式就会**覆盖(层叠)**另一个冲突的样式。层叠性主要解决样式冲突的问题</p><ul><li>层叠性原则:</li></ul><ol><li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ol><h3 id="11-2-继承性"><a href="#11-2-继承性" class="headerlink" title="11.2 继承性"></a>11.2 继承性</h3><p>CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。简单的理解就是:子承父业</p><h3 id="11-3-优先级"><a href="#11-3-优先级" class="headerlink" title="11.3 优先级"></a>11.3 优先级</h3><p><img src="/2024/06/21/css/%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="alt text"><br>优先级注意点:</p><ol><li>权重是有4组数字组成,但是不会有进位。</li><li>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推.</li><li>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</li><li>可以简单记忆法: 通配符和继承权重为0,标签选择器为1,类(伪类)选择器为10,id选择器 100,行内样式表为1000,!important无穷大</li><li>继承的权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0。</li></ol><ul><li>权重叠加:如果是复合选择器，则会有权重叠加，需要计算权重，</li></ul><h1 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h1><p>页面布局要学习三大核心,<strong>盒子模型</strong>,浮动和定位,学习好<strong>盒子模型</strong>能非常好的帮助我们布局页面.<br>网页布局过程:</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子BOX</li><li>利用 CSS 设置好盒子样式，然后摆放到相应位置</li><li>往盒子里面装内容网页布局的核心本质:就是利用CSS摆盒子</li></ol><h2 id="1-盒子模型-Box-Model"><a href="#1-盒子模型-Box-Model" class="headerlink" title="1. 盒子模型(Box Model)"></a>1. 盒子模型(Box Model)</h2><h3 id="1-1-组成"><a href="#1-1-组成" class="headerlink" title="1.1 组成"></a>1.1 组成</h3><p>所谓盒子模型:就是把 HTML 页面中的布局元素看作是一个矩形的盒子,也就是一个盛装内容的容器。<br>CSS 盒子模型本质上是一个盒子，封装周围的HTML元素，它包括:边框、外边距、内边距、和实际内容<br><img src="/2024/06/21/css/boxmodel.png" alt="alt text"></p><h3 id="1-2-边框border"><a href="#1-2-边框border" class="headerlink" title="1.2 边框border"></a>1.2 边框border</h3><p>border可以设置元素的边框。边框有三部分组成:边框宽度(粗细),边框样式,边框颜色<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">          <span class="comment">/* border-width边框的粗细,一般都用px */</span></span><br><span class="line">          <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">          <span class="comment">/* border-style 边框的样式 solid 实线边框  dashed虚线 dotted点状*/</span></span><br><span class="line">          <span class="attribute">border-style</span>: dashed;</span><br><span class="line">          <span class="comment">/* 颜色边框 */</span></span><br><span class="line">          <span class="attribute">border-color</span>: pink;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>边框简写: <strong>border : pink 2px dashed;</strong> 无顺序<br>边框分开写法: <strong>border-top:1pxsolid red;</strong> &#x2F;*只设定上边框，其余同理 *&#x2F;</p><h3 id="1-3-表格的细线边框"><a href="#1-3-表格的细线边框" class="headerlink" title="1.3 表格的细线边框"></a>1.3 表格的细线边框</h3><p><strong>border-collapse</strong> 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse;</span><br></pre></td></tr></table></figure><ul><li><strong>collapse</strong>单词是合并的意思</li><li><strong>border-collapse:collapse;</strong> 表示相邻边框合并在一起</li></ul><h3 id="1-5-边框会影响盒子实际大小"><a href="#1-5-边框会影响盒子实际大小" class="headerlink" title="1.5 边框会影响盒子实际大小"></a>1.5 边框会影响盒子实际大小</h3><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决:</p><ol><li>测量盒子大小的时候,不量边框!</li><li>如果测量的时候包含了边框,则需要 width&#x2F;height 减去边框宽度</li><li></li></ol><h3 id="1-4-内边距-padding"><a href="#1-4-内边距-padding" class="headerlink" title="1.4 内边距(padding)"></a>1.4 内边距(padding)</h3><p><strong>padding</strong> 属性用于设置内边距，即边框与内容之间的距离。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内边距简写(复合)方法: */</span></span><br><span class="line"><span class="attribute">padding</span> : <span class="number">5px</span>; </span><br><span class="line"><span class="attribute">padding</span> : <span class="number">5px</span> <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding: 5px;</td><td>1个值，代表上下左右都有5像素内边距;</td></tr><tr><td>padding: 5px 10px;</td><td>2个值，代表上下内边距是5像素 左右内边距是10像素;</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3个值，代表上内边距5像素 左右内边距10像素 下内边距20像素;</td></tr><tr><td>padding: 5px 10px 20px 30px;</td><td>4个值，上是5像素右10像素下20像素左是30像素 顺时针</td></tr></tbody></table><p>小技巧:如果遇到盒子里面的字数不一样多,设置宽高会不合适,可以使用<strong>padding撑开盒子,不设置宽高</strong></p><h3 id="1-5-外边距margin"><a href="#1-5-外边距margin" class="headerlink" title="1.5 外边距margin"></a>1.5 外边距margin</h3><p><strong>margin</strong> 属性用于设置外边距，即控制盒子和盒子之间的距离</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p><strong>margin</strong>简写方式和<strong>padding</strong>意义一样</p><h3 id="1-6-外边距典型应用"><a href="#1-6-外边距典型应用" class="headerlink" title="1.6 外边距典型应用"></a>1.6 外边距典型应用</h3><p>外边距可以让块级盒子水平居中，但是必须满足两个条件:</p><ol><li>盒子必须指定了宽度(width)</li><li>盒子左右的外边距都设置为 auto<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">margin</span>: auto;</span><br><span class="line">           <span class="attribute">background-color</span>: pink;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>常见的写法,以下三种都可以:</li></ol><ul><li>margin-left: auto; margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;<br>注意:以上方法是让块级元素水平居中 <strong>行内元素或者行内块元素水平居中给其父元素添加 text-align:center</strong> 即可。</li></ul><h3 id="1-7-嵌套块元素垂直外边距的塌陷"><a href="#1-7-嵌套块元素垂直外边距的塌陷" class="headerlink" title="1.7 嵌套块元素垂直外边距的塌陷"></a>1.7 嵌套块元素垂直外边距的塌陷</h3><p>使用 margin定义块元素的垂直外边距时，可能会出现外边距的合并。<br>对于两个嵌套关系(父子关系)的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><ul><li>解决方案：</li><li>为父元素添加上边框</li><li>为父元素设定上内边距</li><li>为父元素添加属性overflow: hidden;推荐</li></ul><h3 id="1-8-网页元素内外边距的清除"><a href="#1-8-网页元素内外边距的清除" class="headerlink" title="1.8 网页元素内外边距的清除"></a>1.8 网页元素内外边距的清除</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意:行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm</title>
      <link href="/2024/06/21/algorithm/"/>
      <url>/2024/06/21/algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="算法第一章-动态规划"><a href="#算法第一章-动态规划" class="headerlink" title="算法第一章 动态规划"></a>算法第一章 动态规划</h1><h3 id="一、动态规划的思想"><a href="#一、动态规划的思想" class="headerlink" title="一、动态规划的思想"></a>一、动态规划的思想</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动态规划的核心思想是通过寻找子问题的最优解来构造原问题的最优解。在应用动态规划的过程中，需要找到问题的状态转移方程，并利用储存中间结果的方法来避免重复计算。</span><br><span class="line"></span><br><span class="line">总的来说，动态规划的思想包括：分析问题具有的重叠子问题性质、定义子问题的递推关系、储存中间结果以避免重复计算、推导出问题的最优解。</span><br></pre></td></tr></table></figure></blockquote><h3 id="二、动态规划五要素"><a href="#二、动态规划五要素" class="headerlink" title="二、动态规划五要素"></a>二、动态规划五要素</h3><ul><li>最优子结构</li><li>重叠子问题</li><li>状态转移方程</li><li>边界条件</li><li>填表法</li></ul><h3 id="三、例题"><a href="#三、例题" class="headerlink" title="三、例题"></a>三、例题</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">矩阵相乘问题</span><br><span class="line">这道题的关键在于矩阵乘法的次数和举证的行列数有关,2行3列的矩阵乘3行4列的矩阵要乘2*4次</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">解法<span class="number">1</span>:</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n; <span class="comment">// 输入矩阵个数</span></span><br><span class="line"><span class="type">int</span> m[n+<span class="number">1</span>][n+<span class="number">1</span>]; <span class="comment">// 定义子问题数组 m[i][j] 表示第 i 个矩阵到第 j 个矩阵的最少乘次数</span></span><br><span class="line"><span class="type">int</span> p[n+<span class="number">1</span>]; <span class="comment">// n 个矩阵乘法要有 n+1 个行列数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">   cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">   m[i][i] = <span class="number">0</span>; <span class="comment">// 初始化对角线元素为 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">2</span>; l &lt;= n; l++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; i++) &#123;</span><br><span class="line">       <span class="type">int</span> j = i + l - <span class="number">1</span>;</span><br><span class="line">      m[i][j] = INT_MAX;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j - <span class="number">1</span>; k++) &#123;</span><br><span class="line">           <span class="type">int</span> temp = m[i][k] + m[k+<span class="number">1</span>][j] + p[i<span class="number">-1</span>] * p[k] * p[j];</span><br><span class="line">           <span class="keyword">if</span> (temp &lt; m[i][j]) &#123;</span><br><span class="line">               m[i][j] = temp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; m[<span class="number">1</span>][n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">解法<span class="number">2</span>:</span><br><span class="line"><span class="comment">//状态转移方程 : dp[i][j] = min(dp[i][k] + dp[k+1][j] + p[i-1] * p[k] * p[j]) (i &lt; k &lt; j)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//矩阵的个数</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>** dp = <span class="keyword">new</span> <span class="type">int</span>* [n + <span class="number">1</span>]; <span class="comment">// 分配n+1个指向整数数组的指针,dp数组表示从第i个矩阵乘到第j个矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">dp[i] = <span class="keyword">new</span> <span class="type">int</span>[n + <span class="number">1</span>]; <span class="comment">// 为每个指针分配整数数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span> [n+<span class="number">1</span>];<span class="comment">//行列数据</span></span><br><span class="line"><span class="comment">// 对数组进行赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//边界条件或初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">dp[i][i] = <span class="number">0</span>; <span class="comment">//自身不用乘,把对角线置为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;<span class="comment">//从下往上,自左而右的填表   dp[i][j]必须要知道左侧的和下方的dp解</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">dp[i][j] = INT_MAX; <span class="comment">//初始化为一个最大的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j<span class="number">-1</span>; k++) &#123;</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;dp[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;][&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; dp[i][j] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] dp[i]; <span class="comment">// 释放每个数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] dp; <span class="comment">// 释放指针数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">最大子段和问题</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定n个整数（可能为负数）组成的序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的子段和的最大值。当所给的整数均为负数时，定义子段和为0。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要求算法的时间复杂度为O(n)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">输入有两行：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一行是n值（1&lt;=n&lt;=10000)；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二行是n个整数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">输出最大子段和。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">在这里给出一组输入。例如：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">-2 11 -4 13 -5 -2</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">在这里给出相应的输出。例如：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//状态转移方程dp[i] = max(dp[i-1] + nums[i],nums[i]); //字段的定义是连续的,所以dp[i]只可能接着上一段或者当前数字开头做新一段</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> MaxSum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMaxSum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> dp[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == n) &#123;</span><br><span class="line">MaxSum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + arr[i], arr[i]);</span><br><span class="line">MaxSum = <span class="built_in">max</span>(MaxSum, dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span>* nums = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* dp = <span class="keyword">new</span> <span class="type">int</span>[n];<span class="comment">//从第个数到第n个数的最大子段和</span></span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">getMaxSum</span>(nums, dp, n);</span><br><span class="line">cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">-1</span>背包问题</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">7-20 0-1背包</span></span><br><span class="line"><span class="comment">给定n(n&lt;=100)种物品和一个背包。物品i的重量是wi(wi&lt;=100)，价值为vi(vi&lt;=100)，背包的容量为C(C&lt;=1000)。</span></span><br><span class="line"><span class="comment">应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有两个选择：装入或不装入。不能将物品i装入多次，也不能只装入部分物品i。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">共有n+1行输入：</span></span><br><span class="line"><span class="comment">第一行为n值和c值，表示n件物品和背包容量c；</span></span><br><span class="line"><span class="comment">接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">输出装入背包中物品的最大总价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">在这里给出一组输入。例如：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">6 5</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">在这里给出相应的输出。例如：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//状态转移方程: if (j &gt;= weights[i]) &#123;</span></span><br><span class="line"><span class="comment">//dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i]] + values[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// else &#123;</span></span><br><span class="line"><span class="comment">// dp[i][j] = dp[i - 1][j];</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="type">int</span> n, c;</span><br><span class="line"> cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> weights[<span class="number">31</span>];</span><br><span class="line"> <span class="type">int</span> values[<span class="number">31</span>];        <span class="comment">//多定义一个空间,让第i件物品价值对应 </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     cin &gt;&gt; weights[i] &gt;&gt; values[i];</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> dp[<span class="number">31</span>][<span class="number">1001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c; j++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (j &gt;= weights[i]) &#123;</span><br><span class="line">             dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weights[i]] + values[i]);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">//输出最优解</span></span><br><span class="line">    <span class="type">int</span> x = n;</span><br><span class="line">    <span class="type">int</span> y = c;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span> &amp;&amp; y&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[x<span class="number">-1</span>][y] != dp[x][y])&#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">y-=weights[x]; </span><br><span class="line">&#125;x--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> cout &lt;&lt; dp[n][c] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">子集和</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7-2 子集和</span></span><br><span class="line"><span class="comment">给定n个不同的整数的集合，求有多少个子集的和为m</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">第一行两个数字n（0&lt;n&lt;=100）和m(0&lt;m&lt;=5000)，以空格分隔</span></span><br><span class="line"><span class="comment">第二行n个不同的整数，以空格分隔</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">和为m的子集的个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">状态转移方程:</span></span><br><span class="line"><span class="comment">dp[i][j] = dp[i + 1][j];</span></span><br><span class="line"><span class="comment">if (j &gt;= nums[i - 1]) &#123;</span></span><br><span class="line"><span class="comment"> dp[i][j] += dp[i + 1][j - nums[i - 1]];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 5000 </span></span><br><span class="line"><span class="type">int</span> dp[MAX][MAX];<span class="comment">//dp[i][j]表示第i个数开始到结尾,剩余和为j的最优解</span></span><br><span class="line"><span class="type">int</span> nums[MAX];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">     dp[n][i] = <span class="number">0</span>;<span class="comment">//第n个数开始到结尾即第i个数和为任何数的子集数为0</span></span><br><span class="line"> &#125;</span><br><span class="line"> dp[n][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span> (m &gt;= nums[n]) &#123;</span><br><span class="line">     dp[n][nums[n]] = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line">         dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line">         <span class="keyword">if</span> (j &gt;= nums[i]) &#123;</span><br><span class="line">             dp[i][j] += dp[i + <span class="number">1</span>][j - nums[i]];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> dp[<span class="number">1</span>][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     cin &gt;&gt; nums[i];</span><br><span class="line"> &#125;</span><br><span class="line"> cout &lt;&lt; <span class="built_in">solve</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">最长公共子序列问题</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">int</span> dp[<span class="number">105</span>][<span class="number">105</span>]; <span class="comment">//表示长度为i和j的最长公共子序列长度  </span></span><br><span class="line">string A, B;    </span><br><span class="line"><span class="type">int</span> alen;  </span><br><span class="line"><span class="type">int</span> blen;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCSlength</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 0, A == 0 || B == 0  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= alen; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= blen; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= alen; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= blen; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (A[i<span class="number">-1</span>] == B[j<span class="number">-1</span>]) &#123;  <span class="comment">// previously incorrect line: A[i] -&gt; A[i-1]  </span></span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[i][j<span class="number">-1</span>] &gt; dp[i<span class="number">-1</span>][j]) &#123;  </span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dp[alen][blen];  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printLCS</span><span class="params">(<span class="type">int</span> alen, <span class="type">int</span> blen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(alen == <span class="number">0</span> || blen ==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x[alen <span class="number">-1</span>] == y[blen <span class="number">-1</span>])&#123;</span><br><span class="line"><span class="built_in">printLCS</span>(alen<span class="number">-1</span>,blne<span class="number">-1</span>);</span><br><span class="line">        cout &lt;&lt; x[alen<span class="number">-1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[alen<span class="number">-1</span>][blne] &gt; c[alne][blen<span class="number">-1</span>])&#123;</span><br><span class="line">        <span class="built_in">printLCS</span>(alne<span class="number">-1</span>,blen);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printLCS</span>(alen,blen<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B;  </span><br><span class="line">    alen = A.<span class="built_in">length</span>();  </span><br><span class="line">    blen = B.<span class="built_in">length</span>();  </span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">LCSlength</span>();  </span><br><span class="line">    cout &lt;&lt; l &lt;&lt; endl; <span class="comment">// previously incorrect line: &lt;&lt; result &lt;&lt; endl -&gt; &lt;&lt; endl. </span></span><br><span class="line"><span class="built_in">printLCS</span>(alen,blen);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// main function should return a value  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><h1 id="算法第二章-分治法"><a href="#算法第二章-分治法" class="headerlink" title="算法第二章 分治法"></a>算法第二章 分治法</h1><h3 id="一、分治法的思想"><a href="#一、分治法的思想" class="headerlink" title="一、分治法的思想"></a>一、分治法的思想</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分治法就是不断的划分子问题,直到子问题的规模足够小到可以直接求解,再通过合并子问题求得原来的子问题的解</span><br></pre></td></tr></table></figure></blockquote><h3 id="二、分治法的时间复杂度"><a href="#二、分治法的时间复杂度" class="headerlink" title="二、分治法的时间复杂度"></a>二、分治法的时间复杂度</h3><p><img src="/2024/06/21/algorithm/%E4%B8%BB%E5%AE%9A%E7%90%86%E6%B1%82%E5%88%86%E6%B2%BB%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="img"></p><h3 id="三、分治法之排序问题"><a href="#三、分治法之排序问题" class="headerlink" title="三、分治法之排序问题"></a>三、分治法之排序问题</h3><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">快速排序</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = arr[left];</span><br><span class="line">    <span class="type">int</span> i = left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= right &amp;&amp; arr[i] &lt; pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= left + <span class="number">1</span> &amp;&amp; arr[j] &gt; pivot) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i], arr[j]);</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr[left], arr[j]);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pivotIndex = <span class="built_in">partition</span>(arr, left, right);</span><br><span class="line">    <span class="built_in">quickSort</span>(arr, left, pivotIndex - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(arr, pivotIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter the size of the array: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Invalid array size.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>* nums = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter the elements of the array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quickSort</span>(nums, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] nums;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">归并排序</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> temp[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = left;</span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[k++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        temp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        arr[left + i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">MergeSort</span>(arr, left, mid);</span><br><span class="line">    <span class="built_in">MergeSort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="type">int</span>* temp = <span class="keyword">new</span> <span class="type">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">Merge</span>(arr, temp, left, right, mid);</span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>* nums = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        nums[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MergeSort</span>(nums, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] nums;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="四、分治法之查找问题"><a href="#四、分治法之查找问题" class="headerlink" title="四、分治法之查找问题"></a>四、分治法之查找问题</h3><h4 id="二分查找-递归"><a href="#二分查找-递归" class="headerlink" title="二分查找(递归)"></a>二分查找(递归)</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">二分搜索</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定已按降序排好的n个元素a[0:n-1]，在这n个元素中找出一特定元素x。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">第一行为n值(n&lt;=10^6)和查询次数m(m&lt;=10^3)；</span></span><br><span class="line"><span class="comment">第二行为n个整数。</span></span><br><span class="line"><span class="comment">接下来m个数，代表要查询的x</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">对于每一个查询的x，如果找到，输出x的下标；否则输出-1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">5 2 </span></span><br><span class="line"><span class="comment">5 4 3 2 1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span> arrs[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tag)</span> </span>&#123;<span class="comment">//参数传入搜索范围就不用每次while循环更改mid值</span></span><br><span class="line">    <span class="comment">/*否则如果这样回传搜索范围就要更新</span></span><br><span class="line"><span class="comment">    int left = 0;</span></span><br><span class="line"><span class="comment">    int right = n;</span></span><br><span class="line"><span class="comment">    int mid = left + (right - left) / 2;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span> (arrs[mid] == tag) &#123;</span><br><span class="line">     <span class="keyword">return</span> mid; <span class="comment">// 找到目标元素，返回索引</span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span> (tag &lt; arrs[mid]) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">binarySearch</span>(arrs, left, mid - <span class="number">1</span>, tag); <span class="comment">// 递归搜索左半部分</span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span> (tag &gt; arrs[mid]) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">binarySearch</span>(arrs, mid + <span class="number">1</span>, right, tag); <span class="comment">// 递归搜索右半部分</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="type">int</span> n, m;</span><br><span class="line"> cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"> <span class="type">int</span> nums[n];</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">     cin &gt;&gt; nums[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">int</span> tags[m];</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">     cin &gt;&gt; tags[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">int</span> result[m];</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 使用二分查找前，先保证数组是排好序的</span></span><br><span class="line"> <span class="built_in">sort</span>(nums, nums + n);<span class="comment">//升序排列</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">     result[i] = <span class="built_in">binarySearch</span>(nums, <span class="number">0</span>, n - <span class="number">1</span>, tags[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">     cout &lt;&lt; result[i] &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h4 id="二分查找基础版-迭代"><a href="#二分查找基础版-迭代" class="headerlink" title="二分查找基础版(迭代)"></a>二分查找基础版(迭代)</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">//注意数组的范围</span></span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>; <span class="comment">//注意查找的范围,既然不等,就不用把mid包含进去</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h4 id="二分搜索返回数组-指针"><a href="#二分搜索返回数组-指针" class="headerlink" title="二分搜索返回数组(指针)"></a>二分搜索返回数组(指针)</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 C++ 中，函数不能直接返回数组。你可以使用指针或者容器来表示数组。在你的情况下，你可以返回一个 `int*` 指针来表示数组。这个指针指向动态分配的内存，可以在函数外部进行释放。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外，C++17 引入了 `std::array` 和 `std::vector` 这样的标准库容器，它们可以更方便地表示数组，并且具有更好的安全性和易用性。你可以考虑使用它们来代替裸指针。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是使用 `int*` 指针表示数组的代码：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> target, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> middle;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = mid;</span><br><span class="line">            result[<span class="number">1</span>] = mid;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        middle = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标值未找到</span></span><br><span class="line">    result[<span class="number">0</span>] = middle;<span class="comment">//result[0] = right;</span></span><br><span class="line">    result[<span class="number">1</span>] = middle;<span class="comment">//result[1] = left;</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    <span class="type">int</span>* data = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; data[<span class="number">0</span>]) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; data[n - <span class="number">1</span>]) &#123;</span><br><span class="line">        cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>* num = <span class="built_in">binarySearch</span>(data, x, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; num[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span>[] data;</span><br><span class="line">    <span class="keyword">delete</span>[] num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希望这可以帮助你理解如何在 C++ 中返回数组。</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="算法第三章-贪心算法"><a href="#算法第三章-贪心算法" class="headerlink" title="算法第三章 贪心算法"></a>算法第三章 贪心算法</h1><h3 id="一、贪心算法的思想"><a href="#一、贪心算法的思想" class="headerlink" title="一、贪心算法的思想"></a>一、贪心算法的思想</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">贪心算法:在每一次选择中选择当前情况的最优解,达到整体问题的最优解</span><br><span class="line">值得注意的是,贪心问题必须满足</span><br><span class="line">1.贪心选择性质</span><br><span class="line">贪心选择性质指的是，通过贪心策略所做出的每一个局部最优的选择，都能够组合成一个全局最优解。换句话说</span><br><span class="line">就是贪心算法每次选择的都是当前状态下最优的策略，而这些最优的策略组合在一起，可以形成最终的最优解。</span><br><span class="line">2.最优子问题</span><br><span class="line">最优子结构指的是，问题的最优解可以通过子问题的最优解构建出来，换句话说，问题可以被分解成更小的子问题，子问题的最优解可以构成原问题的最优解。这个性质是动态规划和贪心算法设计的前提之一。</span><br></pre></td></tr></table></figure></blockquote><h3 id="二、例题"><a href="#二、例题" class="headerlink" title="二、例题"></a>二、例题</h3><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">&gt;完全背包问题</span><br><span class="line">&gt;<span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;7-35 背包问题</span></span><br><span class="line"><span class="comment">&gt;分数 25</span></span><br><span class="line"><span class="comment">&gt;作者 郑琪</span></span><br><span class="line"><span class="comment">&gt;单位 广东外语外贸大学</span></span><br><span class="line"><span class="comment">&gt;给定n(n&lt;=100)种物品和一个背包。物品i的重量是wi，价值为vi，背包的容量为C(C&lt;=1000)。问:应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 装入背包的物品可以只装入部分物品。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;输入格式:</span></span><br><span class="line"><span class="comment">&gt;共有n+1行输入： 第一行为n值和c值，表示n件物品和背包容量c； 接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;输出格式:</span></span><br><span class="line"><span class="comment">&gt;输出装入背包中物品的最大总价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;输入样例:</span></span><br><span class="line"><span class="comment">&gt;5 10</span></span><br><span class="line"><span class="comment">&gt;2 6</span></span><br><span class="line"><span class="comment">&gt;2 3</span></span><br><span class="line"><span class="comment">&gt;6 5</span></span><br><span class="line"><span class="comment">&gt;5 4</span></span><br><span class="line"><span class="comment">&gt;4 6</span></span><br><span class="line"><span class="comment">&gt;输出样例:</span></span><br><span class="line"><span class="comment">&gt;16.67</span></span><br><span class="line"><span class="comment">&gt;*/</span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">struct</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">   <span class="type">double</span> weight;</span><br><span class="line">   <span class="type">double</span> value;</span><br><span class="line">&gt;&#125;goods[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Goods a, Goods b)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (a.value / a.weight &gt; b.value / b.weight)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">   <span class="type">double</span> c; <span class="comment">//背包容量</span></span><br><span class="line">   cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">       cin &gt;&gt; goods[i].weight &gt;&gt; goods[i].value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">sort</span>(goods, goods + n, cmp);</span><br><span class="line"></span><br><span class="line">   <span class="type">double</span> VALUE = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (c &gt; <span class="number">0</span> &amp;&amp; i &lt; n) &#123;</span><br><span class="line">   <span class="keyword">if</span> (c &gt;= goods[i].weight) &#123;</span><br><span class="line">      VALUE += goods[i].value;</span><br><span class="line">       c -= goods[i].weight;</span><br><span class="line">       i++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       VALUE += c * (goods[i].value / goods[i].weight);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, VALUE);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 迪杰斯特拉算法</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 11</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t[MAX][MAX]; <span class="comment">//邻接矩阵 表示一个地点到另一个地点花费的时间 </span></span><br><span class="line"><span class="type">int</span> s[MAX]; <span class="comment">//经过点的集合 赋值为1则在集合中 赋值为0则不在集合中 </span></span><br><span class="line"><span class="type">int</span> dist[MAX];<span class="comment">//特定地点到各个点的最短时间 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i; </span><br><span class="line"><span class="type">int</span> N, M, D;<span class="comment">//D代表有向无向</span></span><br><span class="line">cin &gt;&gt; N &gt;&gt; M &gt;&gt; D;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(t, <span class="number">0x3f3f3f</span>, <span class="keyword">sizeof</span> t);<span class="comment">//给每个邻接矩阵赋很大的值 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= M; i++)&#123;</span><br><span class="line"><span class="type">int</span> v, u, w;</span><br><span class="line">cin &gt;&gt; v &gt;&gt; u &gt;&gt; w;</span><br><span class="line">t[v][u] = w;</span><br><span class="line"><span class="keyword">if</span>(!D)<span class="comment">//如果是无向图，返过来也要赋值 </span></span><br><span class="line">   t[u][v] = w; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);<span class="comment">//集合置为空 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sourse;<span class="comment">//原点 </span></span><br><span class="line">cin &gt;&gt; sourse;</span><br><span class="line">s[sourse] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//memset(dist, 0x3f, sizeof s);</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    dist[i] = t[sourse][i];</span><br><span class="line">dist[sourse] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= N; k++)&#123;</span><br><span class="line">    <span class="type">int</span> minv = <span class="number">0x3f3f3f</span>;</span><br><span class="line">    <span class="type">int</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="number">0</span> &amp;&amp; dist[i] &lt; minv)&#123;<span class="comment">//不在集合中 </span></span><br><span class="line">    mini = i;</span><br><span class="line">    minv = dist[i];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s[mini] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">          dist[i] = <span class="built_in">min</span>(dist[i], dist[mini] + t[mini][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">    cout &lt;&lt; sourse &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(dist[i] &lt; <span class="number">0x3f3f3f</span>)</span><br><span class="line">       cout &lt;&lt; dist[i] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;no path&quot;</span> &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="算法第五章-回溯法"><a href="#算法第五章-回溯法" class="headerlink" title="算法第五章 回溯法"></a>算法第五章 回溯法</h1><h3 id="1-回溯法的思想"><a href="#1-回溯法的思想" class="headerlink" title="1.回溯法的思想"></a>1.回溯法的思想</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有许多问题，当需要找出它的解集或者要求回答什么解是满足某些约束条件的最佳解时，往往要使用回溯法。</span><br><span class="line"></span><br><span class="line">回溯法的基本做法是搜索，或是一种组织得井井有条的，能避免不必要搜索的穷举式搜索法。这种方法适用于解一些组合数相当大的问题。</span><br><span class="line">回溯法在问题的解空间树中，按深度优先策略，从根结点出发搜索解空间树。算法搜索至解空间树的任意一点时，先判断该结点是否包含问题的解。如果肯定不包含，则跳过对该结点为根的子树的搜索，逐层向其祖先结点回溯；否则，进入该子树，继续按深度优先策略搜索。</span><br><span class="line"></span><br><span class="line">若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。 而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>解空间</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、问题的解空间</span><br><span class="line">    复杂问题常常有很多的可能解，这些可能解构成了问题的解空间。解空间也就是进行穷举的搜索空间，所以，解空间中应该包括所有的可能解。确定正确的解空间很重要，如果没有确定正确的解空间就开始搜索，可能会增加很多重复解，或者根本就搜索不到正确的解。</span><br><span class="line">    例如，对于有n个物品的0/1背包问题，当n=3时，其解空间是：</span><br><span class="line">&#123;(0, 0, 0), (0, 0, 1), (0, 1, 0), (1, 0, 0), (0, 1, 1), (1, 0, 1), (1, 1, 0), (1, 1, 1) &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>基本步骤</p></li><li><p>剪枝函数</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">常用剪枝函数：</span><br><span class="line">用约束函数在扩展结点处剪去不满足约束的子树；</span><br><span class="line">用限界函数剪去得不到最优解的子树;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><img src="/2024/06/21/algorithm/image-20231119155509899.png" alt="img"></p><h2 id="子集树和排列树"><a href="#子集树和排列树" class="headerlink" title="子集树和排列树"></a>子集树和排列树</h2><ul><li>子集树：当所给的问题是从n个元素的集合S中找出满足某种性质的子集时，相应的解空间树成为子集树。例：0－1背包问题。</li><li>排列树：当所给问题是确定n个元素的满足排列树：当所给问题是确定n个元素的满足某种性质的排列时，相应的解空间树称为排列树。例：旅行售货员问题。</li></ul><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> result[MAX]; <span class="comment">//最优解</span></span><br><span class="line"><span class="type">int</span> x[MAX];<span class="comment">//当前节点的路径</span></span><br><span class="line"><span class="type">double</span> maxV;<span class="comment">//最优解值</span></span><br><span class="line"><span class="type">double</span> cr;<span class="comment">//剩余容量</span></span><br><span class="line"><span class="type">double</span> cv = <span class="number">0</span>;<span class="comment">//当前价值</span></span><br><span class="line"><span class="type">int</span> n, c;<span class="comment">//n个物品, 背包容量c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Good</span>&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="type">double</span> weight;</span><br><span class="line"><span class="type">double</span> value;</span><br><span class="line">&#125;goods[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Good a,Good b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.value / a.weight &gt; b.value / b.weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*int bound(int t) &#123;</span></span><br><span class="line"><span class="comment">double temp = cv;</span></span><br><span class="line"><span class="comment">for (int i = t + 1; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">cv += goods[i].value;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cv = temp;</span></span><br><span class="line"><span class="comment">return cv;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//限界函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bound</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> cleft = cr;</span><br><span class="line"><span class="type">double</span> b = cv;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n &amp;&amp; goods[i].weight &lt; cleft) &#123;</span><br><span class="line">b += goods[i].value;</span><br><span class="line">cleft -= goods[i].weight;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= n) &#123;</span><br><span class="line">b += goods[i].value * cleft / goods[i].weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Backtrack</span><span class="params">(<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//以深度优先的方式遍历第t层中的某棵子树(第t层就是选第t个物品)</span></span><br><span class="line"><span class="keyword">if</span> (t &gt; n) &#123; <span class="comment">//遍历到叶子节点了</span></span><br><span class="line"><span class="keyword">if</span> (cv &gt; maxV) &#123;</span><br><span class="line">maxV = cv;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">result[i] = x[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cr &gt;= goods[t].weight)<span class="comment">//该点选择物品时</span></span><br><span class="line">&#123;</span><br><span class="line">cr -= goods[t].weight;</span><br><span class="line">cv += goods[t].value;</span><br><span class="line">x[t] = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">Backtrack</span>(t + <span class="number">1</span>);<span class="comment">//遍历完当前节点子树,回到父节点状态</span></span><br><span class="line">cr += goods[t].weight;</span><br><span class="line">cv -= goods[t].value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果满足限界条件进入右子树</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bound</span>(t + <span class="number">1</span>) &gt; maxV) &#123;</span><br><span class="line">x[t] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; goods[i].weight &gt;&gt; goods[i].value;</span><br><span class="line">goods[i].index = i;</span><br><span class="line">&#125;</span><br><span class="line">cr = c;</span><br><span class="line"><span class="built_in">sort</span>(goods + <span class="number">1</span>, goods + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="comment">//左不选0 右选1</span></span><br><span class="line"><span class="built_in">Backtrack</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; maxV &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个物品%d\n&quot;</span>, goods[i].index, result[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二叉树</span></span><br><span class="line"><span class="comment">//叶子节点有2n个, 节点有2^n-1个</span></span><br><span class="line"><span class="comment">//算法时间复杂度为O(2^n)</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="子集和-子集树"><a href="#子集和-子集树" class="headerlink" title="子集和(子集树)"></a>子集和(子集树)</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">子集和问题(找到序列中子集和为v并输出)</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX  = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> n,v; <span class="comment">//数目 子集和</span></span><br><span class="line"><span class="type">int</span> a[MAX];<span class="comment">//数据数组</span></span><br><span class="line"><span class="type">int</span> ans[MAX];<span class="comment">//解集</span></span><br><span class="line"><span class="type">int</span> cv; <span class="comment">//剩余价值</span></span><br><span class="line"><span class="type">bool</span> flag;<span class="comment">//找到解标志记1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Backsearch</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cv == <span class="number">0</span>) flag = <span class="number">1</span>;<span class="comment">//剩余价值为0</span></span><br><span class="line"><span class="keyword">if</span>(t&gt;n || flag == <span class="number">1</span>) <span class="keyword">return</span>;<span class="comment">//遍历到叶子节点或者找到解就结束这次回溯</span></span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span> &amp;&amp; a[t] &lt;= cv) &#123;<span class="comment">//未找到解且能装下当前带选择数</span></span><br><span class="line">cv -= a[t];</span><br><span class="line">ans[t] = a[t];</span><br><span class="line"><span class="built_in">Backsearch</span>(t+<span class="number">1</span>);<span class="comment">//向下遍历,没找到解才回归父节点状态</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>) cv += a[t];</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>) ans[t] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>) &#123; <span class="comment">// 装不下,遍历右子树</span></span><br><span class="line"><span class="built_in">Backsearch</span>(t+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">cv = v;<span class="comment">//初始化剩余价值</span></span><br><span class="line"><span class="built_in">Backsearch</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i] != <span class="number">0</span>)</span><br><span class="line">cout&lt;&lt; ans[i] &lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//输出解</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No Solution!&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="居民部落问题"><a href="#居民部落问题" class="headerlink" title="居民部落问题"></a>居民部落问题</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> R[<span class="number">201</span>][<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//关系矩阵</span></span><br><span class="line"><span class="type">int</span> x[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;, cx[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//x[i]=1表示居民在卫队中，反之不在</span></span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">//n是人数，m是仇敌关系数量</span></span><br><span class="line"><span class="type">int</span> max_num = <span class="number">0</span>, cmax = <span class="number">0</span>; <span class="comment">//卫队中居民人数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Bound</span><span class="params">(<span class="type">int</span> t1)</span> <span class="comment">//约束函数：当前的居民在卫队中中是否有仇敌关系</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> j;</span><br><span class="line"> <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;t1; j++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (cx[j]==<span class="number">1</span> &amp;&amp; R[t1][j]==<span class="number">1</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Back</span><span class="params">(<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (t&gt;n)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (max_num &lt; cmax)</span><br><span class="line">     &#123;</span><br><span class="line">         max_num = cmax;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             x[i] = cx[i];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//1</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">Bound</span>(t) == <span class="literal">true</span>) <span class="comment">//当前居民在卫队中没有找到仇人</span></span><br><span class="line"> &#123;</span><br><span class="line">     cx[t] = <span class="number">1</span>;</span><br><span class="line">     cmax++;</span><br><span class="line">     <span class="built_in">Back</span>(t+<span class="number">1</span>);</span><br><span class="line">     cmax--;</span><br><span class="line">     cx[t] = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//0</span></span><br><span class="line"> <span class="keyword">if</span> (cmax+n-t &gt;= max_num) <span class="comment">//剪枝：再往下找，考虑理想情况，卫队居民人数也不可能比当前最大的多了</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">Back</span>(t+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> u, v;</span><br><span class="line"> cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">     R[u][v] = <span class="number">1</span>; R[v][u] = <span class="number">1</span>; <span class="comment">//对称矩阵</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Back</span>(<span class="number">1</span>);</span><br><span class="line"> cout &lt;&lt; max_num &lt;&lt; endl;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="comment">//编号从1开始</span></span><br><span class="line"> &#123;</span><br><span class="line">     cout &lt;&lt; x[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="旅行售货员问题"><a href="#旅行售货员问题" class="headerlink" title="旅行售货员问题"></a>旅行售货员问题</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7-1 旅行售货员</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">某售货员要到若干城市去推销商品，已知各城市之间的路程(或旅费)。他要选定一条从驻地出发，经过每个城市一遍，最后回到驻地的路线，使总的路程（或总旅费）最小。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">第一行为城市数n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">下面n行n列给出一个完全有向图，如 i 行 j 列表示第 i 个城市到第 j 个城市的距离。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">一个数字，表示最短路程长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">0 2 1</span></span><br><span class="line"><span class="comment">1 0 2</span></span><br><span class="line"><span class="comment">2 1 0</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> x[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;<span class="comment">//第t层表示已经到了第t - 1个城市 </span></span><br><span class="line"> <span class="keyword">if</span> (t &gt; n) &#123;<span class="comment">//叶子节点,此时在第n个城市 </span></span><br><span class="line">     <span class="keyword">if</span> (now + g[x[n]][x[<span class="number">1</span>]] &lt; ans) &#123;</span><br><span class="line">         ans = now + g[x[n]][x[<span class="number">1</span>]];<span class="comment">//回到驻点 </span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = t; i &lt;= n; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (g[x[t - <span class="number">1</span>]][x[i]] != <span class="number">0x3f3f3f3f</span> &amp;&amp; now + g[x[t - <span class="number">1</span>]][x[i]] &lt; ans) &#123;</span><br><span class="line">             <span class="built_in">swap</span>(x[t], x[i]);</span><br><span class="line">             now += g[x[t - <span class="number">1</span>]][x[t]];</span><br><span class="line">             <span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">             now -= g[x[t - <span class="number">1</span>]][x[t]];</span><br><span class="line">             <span class="built_in">swap</span>(x[t], x[i]);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> cin &gt;&gt; n;</span><br><span class="line"> <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">         cin &gt;&gt; g[i][j];</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) x[i] = i;<span class="comment">//初始化为1 2 3 4 </span></span><br><span class="line"> <span class="built_in">backtrack</span>(<span class="number">2</span>);<span class="comment">//从第二层开始遍历,第一层就是从驻地到其他城市 </span></span><br><span class="line"> cout &lt;&lt; ans;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不剪枝时间复杂度为O(n!)</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="n后问题"><a href="#n后问题" class="headerlink" title="n后问题"></a>n后问题</h4><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在n×n格的棋盘上放置彼此不受攻击的n个皇后。按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n×n格的棋盘上放置n个皇后，任何2个皇后不放在同一行或同一列或同一斜线上</span><br><span class="line"></span><br><span class="line">输入格式:</span><br><span class="line">一个数字n</span><br><span class="line"></span><br><span class="line">输出格式:</span><br><span class="line">按照深度优先输出所有可行的解</span><br><span class="line"></span><br><span class="line">输入样例:</span><br><span class="line">4</span><br><span class="line">输出样例:</span><br><span class="line">2 4 1 3 </span><br><span class="line">3 1 4 2 </span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">解法一:</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> x[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fuc</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; t; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x[t] == x[i] || <span class="built_in">abs</span>(x[t] - x[i]) == <span class="built_in">abs</span>(t - i)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t &gt; n) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cout &lt;&lt; x[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">x[t] = i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fuc</span>(t)) &#123;</span><br><span class="line"><span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">backtrack</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解法二:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在n×n格的棋盘上放置彼此不受攻击的n个皇后。按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n×n格的棋盘上放置n个皇后，任何2个皇后不放在同一行或同一列或同一斜线上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">一个数字n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">按照深度优先输出所有可行的解</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">2 4 1 3</span></span><br><span class="line"><span class="comment">3 1 4 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> chosen[MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> result[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(t - i) == <span class="built_in">abs</span>(result[t] - result[i]) || result[t] == result[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cout &lt;&lt; result[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chosen[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            chosen[i] = <span class="number">1</span>;</span><br><span class="line">            result[t] = i;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(t)) &#123;</span><br><span class="line">                <span class="built_in">backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            chosen[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">backtrack</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#### 最小机器重量问题</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7-2 最小重量机器设计问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设某一机器由n个部件组成，每一种部件都可以从m个不同的供应商处购得。设wij是从供应商j 处购得的部件i的重量，cij是相应的价格。</span></span><br><span class="line"><span class="comment">试设计一个算法，给出总价格不超过d的最小重量机器设计。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式:</span></span><br><span class="line"><span class="comment">第一行有3 个正整数n ，m和d， 0&lt;n&lt;30, 0&lt;m&lt;30, 接下来的2n 行，每行m个数。前n行是c，后n行是w。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式:</span></span><br><span class="line"><span class="comment">输出计算出的最小重量，以及每个部件的供应商</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例:</span></span><br><span class="line"><span class="comment">3 3 4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">3 2 1</span></span><br><span class="line"><span class="comment">2 2 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">3 2 1</span></span><br><span class="line"><span class="comment">2 2 2</span></span><br><span class="line"><span class="comment">输出样例:</span></span><br><span class="line"><span class="comment">在这里给出相应的输出。例如：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, cost; <span class="comment">//限定价格 部件数 供应商数</span></span><br><span class="line"><span class="type">int</span> w[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//w[i][j]为第i个零件在第j个供应商的重量</span></span><br><span class="line"><span class="type">int</span> c[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//c[i][j]为第i个零件在第j个供应商的价格</span></span><br><span class="line"><span class="type">int</span> bestx[<span class="number">100</span>];<span class="comment">//bestx[i]用来存放第i个零件的最后选择供应商</span></span><br><span class="line"><span class="type">int</span> x[<span class="number">100</span>];<span class="comment">//x[i]临时存放第i个零件的供应商</span></span><br><span class="line"><span class="type">int</span> cw = <span class="number">0</span>, cc = <span class="number">0</span>, bestw = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Backtrack</span><span class="params">(<span class="type">int</span> t)</span>  <span class="comment">// t对应 部件t </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t &gt; n)<span class="comment">//搜索到叶子结点，一个搜索结束，所有零件已经找完</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cw &lt; bestw) &#123;</span><br><span class="line">            bestw = cw; <span class="comment">//当前最小重量</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                bestx[j] = x[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//return; // 有else就不需要 return，两个选一个 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)  <span class="comment">// 遍历所有供应商 </span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            cc += c[t][i];</span><br><span class="line">            cw += w[t][i];</span><br><span class="line">            x[t] = i;</span><br><span class="line">            <span class="keyword">if</span> (cc &lt;= cost &amp;&amp; cw &lt;= bestw) <span class="comment">// 剪枝操作                     </span></span><br><span class="line">                <span class="built_in">Backtrack</span>(t + <span class="number">1</span>);</span><br><span class="line">            cc -= c[t][i];</span><br><span class="line">            cw -= w[t][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; cost;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//各部件在不同供应商的重量 cij:物品i在供应商j的价格 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            cin &gt;&gt; c[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//各部件在不同供应商的价格 wij:物品i在供应商j的重量 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Backtrack</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; bestw &lt;&lt; endl; <span class="comment">// 最低的重量 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// 输出各个部件的供应商 </span></span><br><span class="line">        cout &lt;&lt; bestx[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h1 id="算法第六章、分支限界法-广度优先或者最小生成树"><a href="#算法第六章、分支限界法-广度优先或者最小生成树" class="headerlink" title="算法第六章、分支限界法(广度优先或者最小生成树)"></a>算法第六章、分支限界法(广度优先或者最小生成树)</h1><h3 id="分支限界法的基本思想"><a href="#分支限界法的基本思想" class="headerlink" title="分支限界法的基本思想:"></a>分支限界法的基本思想:</h3><blockquote><p>不断的广度优先遍历所有的层次</p></blockquote><blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从下一扩展结点的不同方式导致不同的分支限界法。    </span><br><span class="line">  1、FIFO分支限界法</span><br><span class="line">    将活结点表组织成为一个队列，按先进先出原则选择下一个结点。</span><br><span class="line">2、优先队列分支限界法</span><br><span class="line">    按照优先队列中规定的优先级选取优先级最高的节点成为当前扩展节点。</span><br><span class="line">- 最大优先队列：使用最大堆，体现最大效益优先</span><br><span class="line">- 最小优先队列：使用最小堆，体现最小费用优先</span><br></pre></td></tr></table></figure></blockquote><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="0-1背包问题-FIFO"><a href="#0-1背包问题-FIFO" class="headerlink" title="0-1背包问题(FIFO)"></a>0-1背包问题(FIFO)</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> level; <span class="comment">//该节点所在解空间树中的层次</span></span><br><span class="line"><span class="type">int</span> cw; <span class="comment">//该节点的当前载重量</span></span><br><span class="line"><span class="type">int</span> cp; <span class="comment">// 该节点的当前价值</span></span><br><span class="line">&#125;;</span><br><span class="line">queue &lt;Node&gt; q; <span class="comment">// 定义队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line"><span class="type">double</span> value;</span><br><span class="line"><span class="type">double</span> weight;</span><br><span class="line">&#125;;<span class="comment">//每件物品的重量及价值</span></span><br><span class="line">Obj objs[<span class="number">101</span>]; <span class="comment">//定义存储n件物品的数组，方便调用sort函数</span></span><br><span class="line"><span class="type">int</span> bestv = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bound</span><span class="params">(<span class="type">int</span> t,<span class="type">double</span> cleft)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> v = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = t; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(objs[i].weight &lt; cleft) &#123;</span><br><span class="line">v+=objs[i].value;</span><br><span class="line">cleft=objs[i].weight;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">v+= cleft*objs[i].value/objs[i].weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node node;</span><br><span class="line">node.cp = <span class="number">0</span>;</span><br><span class="line">node.cw = <span class="number">0</span>;</span><br><span class="line">node.level = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(node);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">Node node = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(node.level &gt; n) &#123;</span><br><span class="line"><span class="keyword">if</span>(node.cp &gt; bestv)&#123;</span><br><span class="line">bestv = node.cp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node.cw + objs[node.level].weight &lt;= c) &#123;</span><br><span class="line"><span class="comment">//判断左分支是否入队</span></span><br><span class="line">Node nextnode;</span><br><span class="line">nextnode.level = node.level + <span class="number">1</span>;</span><br><span class="line">nextnode.cw = node.cw + objs[node.level].weight;</span><br><span class="line">nextnode.cp = node.cp + objs[node.level].value;</span><br><span class="line">q.<span class="built_in">push</span>( nextnode );</span><br><span class="line"><span class="keyword">if</span> ( bestv &lt; nextnode.cp )</span><br><span class="line">bestv = nextnode.cp;</span><br><span class="line"><span class="comment">//及时刷新暂时最优值，提高效率</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((node.cp + <span class="built_in">bound</span>(node.level+<span class="number">1</span>,c - node.cw)) &gt; bestv) &#123;</span><br><span class="line"><span class="comment">//判断右分支是否入队</span></span><br><span class="line">Node nextnode;</span><br><span class="line">nextnode.level = node.level + <span class="number">1</span>;</span><br><span class="line">nextnode.cw = node.cw;</span><br><span class="line">nextnode.cp = node.cp;</span><br><span class="line">q.<span class="built_in">push</span>(nextnode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Obj a, Obj b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.value/a.weight &gt; b.value/b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n&gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; objs[i].weight &gt;&gt; objs[i].value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(objs + <span class="number">1</span>, objs + <span class="number">1</span> + n,cmp);</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line">cout &lt;&lt; bestv &lt;&lt; endl; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h4 id="0-1背包-最小堆"><a href="#0-1背包-最小堆" class="headerlink" title="0-1背包(最小堆)"></a>0-1背包(最小堆)</h4><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> level; <span class="comment">//该节点所在解空间树中的层次</span></span><br><span class="line"><span class="type">double</span> cw; <span class="comment">//该节点的当前载重量</span></span><br><span class="line"><span class="type">double</span> cv; <span class="comment">// 该节点的当前价值</span></span><br><span class="line"><span class="type">double</span> uvalue; <span class="comment">//该节点的上界 = 当前载重量 + 剩余容量的最大价值（采用背包问题的计算方法）</span></span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Node a, Node b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.uvalue &lt; b.uvalue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x[<span class="number">110</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line"><span class="type">double</span> value;</span><br><span class="line"><span class="type">double</span> weight;</span><br><span class="line"><span class="type">int</span> preindex;</span><br><span class="line">&#125;;<span class="comment">//每件物品的重量及价值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, c, bestc;</span><br><span class="line"><span class="type">int</span> bestx[MAXN];</span><br><span class="line">Obj objs[MAXN];</span><br><span class="line"></span><br><span class="line">priority_queue &lt; Node &gt; q; <span class="comment">// 定义队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Obj a, Obj b)</span> </span>&#123; <span class="comment">//用于sort排序时以单位重量价值降序排序</span></span><br><span class="line"><span class="keyword">return</span> a.value / a.weight &gt; b.value / b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bound</span><span class="params">(<span class="type">int</span> t, <span class="type">double</span> left)</span></span></span><br><span class="line"><span class="function"><span class="comment">//利用背包问题（贪心算法）计算剩余容量为left，可选物品为第t~n件时可装入的最大价值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( t &lt;= n &amp;&amp; left &gt;= objs[t].weight) &#123;</span><br><span class="line">maxv += objs[t].value;</span><br><span class="line">left -= objs[t].weight;</span><br><span class="line">t++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( t &lt;= n ) maxv +=  left * objs[t].value / objs[t].weight;</span><br><span class="line"><span class="keyword">return</span> maxv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化根节点，加入队列</span></span><br><span class="line">Node node;</span><br><span class="line">node.level = <span class="number">1</span>;</span><br><span class="line">node.cw = <span class="number">0</span>;</span><br><span class="line">node.cv = <span class="number">0</span>;</span><br><span class="line">node.uvalue = <span class="built_in">bound</span>(<span class="number">1</span>, c);</span><br><span class="line">q.<span class="built_in">push</span>(node);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">Node node = q.<span class="built_in">top</span>(); <span class="comment">//上界最大者出堆</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用优先级队列，如果优先访问叶子节点，说明该叶子节点的上界值要高于其他所有待扩展节点的上界，</span></span><br><span class="line"><span class="comment">//由于该叶子节点的值与上界值相等，所以该叶子节点代表最优解，直接退出循环</span></span><br><span class="line"><span class="keyword">if</span> ( node.level &gt; n ) &#123;</span><br><span class="line">bestc = node.cv;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">bestx[i] = node.x[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//约束函数，如果第level个物品可以装入背包，则左分支节点进入优先队列</span></span><br><span class="line"><span class="keyword">if</span> ( node.cw + objs[node.level].weight &lt;= c ) &#123;</span><br><span class="line">Node nextnode;</span><br><span class="line">nextnode.level = node.level + <span class="number">1</span>;</span><br><span class="line">nextnode.cw = node.cw + objs[node.level].weight;</span><br><span class="line">nextnode.cv = node.cv + objs[node.level].value;</span><br><span class="line">nextnode.uvalue = node.uvalue;</span><br><span class="line"><span class="comment">//复制父节点到根的路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; node.level; i++)</span><br><span class="line">nextnode.x[i] = node.x[i];</span><br><span class="line">nextnode.x[node.level] = <span class="number">1</span>; <span class="comment">//左孩子，路径为1</span></span><br><span class="line">q.<span class="built_in">push</span>(nextnode);<span class="comment">//节点加入队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限界函数，如果右分支上界大于最优的中间结果，则进入优先队列</span></span><br><span class="line"><span class="type">double</span> uvalue = <span class="built_in">bound</span>(node.level+<span class="number">1</span>, c - node.cw) + node.cv;</span><br><span class="line"><span class="keyword">if</span> ( uvalue &gt; bestc) &#123;</span><br><span class="line">Node nextnode;</span><br><span class="line">nextnode.level = node.level + <span class="number">1</span>;</span><br><span class="line">nextnode.cw = node.cw;</span><br><span class="line">nextnode.cv = node.cv;</span><br><span class="line">nextnode.uvalue = uvalue;</span><br><span class="line"><span class="comment">//复制父节点的到根的路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; node.level; i++)</span><br><span class="line">nextnode.x[i] = node.x[i];</span><br><span class="line">nextnode.x[node.level] = <span class="number">0</span>;<span class="comment">//右孩子，路径为0</span></span><br><span class="line">q.<span class="built_in">push</span>(nextnode); <span class="comment">//节点加入队列</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bestc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; objs[i].weight &gt;&gt; objs[i].value;</span><br><span class="line">objs[i].preindex = i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//按单位重量价值一次性降序排序，便于后续贪心法计算上界</span></span><br><span class="line"><span class="built_in">sort</span>( objs + <span class="number">1</span>, objs + <span class="number">1</span> + n, cmp );</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出最优值</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;best value:&quot;</span> &lt;&lt; <span class="built_in">bfs</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出最优解，所选物品的重量和价值</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;best plan:\nweight\tvalue&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (bestx[i] == <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选择了第&quot;</span> &lt;&lt; objs[i].preindex &lt;&lt; <span class="string">&quot;个物品&quot;</span> &lt;&lt; objs[i].weight &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; objs[i].value &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt做一个表白小程序</title>
      <link href="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/"/>
      <url>/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt实战01"><a href="#Qt实战01" class="headerlink" title="Qt实战01"></a>Qt实战01</h1><ul><li><p>刷视频看到大家学了图形化界面编程后的第一件事,一定是写出一个表白小程序用来对自己心爱的人用来表白,而且一定要让他接受,所以我写了一个qt小程序,能够把窗口置于顶层,让她一直烂到你的爱意,而且怎么关也关不掉,正好适合对不怎么会使用电脑的人使用</p></li><li><p>当然,关掉的方法还是有很多的,包括但不限于调出任务管理器kill掉等方法</p></li></ul><h3 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h3><p>这是点击不接受的窗口,右侧是马里奥的gif动画</p><p>若是不接受,会一直置于顶层</p><p><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128090249459.png" alt="image-20240128090249459"></p><p>这是接受后弹出的窗口,可以拖拽</p><p><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128090322689.png" alt="image-20240128090322689"></p><h3 id="关键部分讲解"><a href="#关键部分讲解" class="headerlink" title="关键部分讲解"></a>关键部分讲解</h3><h4 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h4><p>使用了qt写好的qmovie类,创建时指定动画资源,设置好播放速度,窗口创建就会开始播放,默认循环播放</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加马里奥动画</span></span><br><span class="line">QMovie * mario = <span class="keyword">new</span> <span class="built_in">QMovie</span>(<span class="string">&quot;:/mario.gif&quot;</span>);</span><br><span class="line">ui-&gt;marioLabel-&gt;<span class="built_in">setMovie</span>(mario);</span><br><span class="line">ui-&gt;marioLabel-&gt;<span class="built_in">setScaledContents</span>(<span class="literal">true</span>); <span class="comment">// 将内容缩放以适应控件大小</span></span><br><span class="line"><span class="comment">//设置播放速度</span></span><br><span class="line">mario-&gt;<span class="built_in">setSpeed</span>(<span class="number">150</span>);</span><br><span class="line">mario-&gt;<span class="built_in">start</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h4 id="循环逻辑"><a href="#循环逻辑" class="headerlink" title="循环逻辑"></a>循环逻辑</h4><p>这里使用connect链接按钮的点击事件,若是接受了,会弹出一个自定义的yes_next窗口,里面是我写好的从多处收集来的情诗和句子,背景我使用了爱心图片填充</p><p>如果用户点击了不接受,就会创建一个循环对话框,一直监听信号,直到用户点击yes,在弹出yes_next对话框</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接按钮的点击事件</span></span><br><span class="line"> QObject::<span class="built_in">connect</span>(ui-&gt;pushButton_Yes, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">     Yes_Next *y = <span class="keyword">new</span> Yes_Next;</span><br><span class="line">     y-&gt;<span class="built_in">setVisible</span>(<span class="literal">true</span>);</span><br><span class="line">     y-&gt;<span class="built_in">setWindowFlag</span>(Qt::WindowStaysOnTopHint);</span><br><span class="line">     <span class="comment">//y-&gt;setGeometry(100, 100, 400, 400); // 设置窗口位置和大小</span></span><br><span class="line">     y-&gt;<span class="built_in">setGeometry</span>(<span class="number">600</span>,<span class="number">150</span>,<span class="number">400</span>,<span class="number">600</span>);</span><br><span class="line">     y-&gt;<span class="built_in">show</span>();</span><br><span class="line">     y-&gt;<span class="built_in">raise</span>();</span><br><span class="line">     <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">     <span class="comment">//exit(0);</span></span><br><span class="line"> &#125;);</span><br><span class="line"> QObject::<span class="built_in">connect</span>(ui-&gt;pushButton_No, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 用户点击了 &quot;No&quot; 按钮，继续循环</span></span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         QDialog loopDialog;</span><br><span class="line">         loopDialog.<span class="built_in">setWindowTitle</span>(<span class="string">&quot;循环对话框&quot;</span>);</span><br><span class="line">         loopDialog.<span class="built_in">setWindowFlag</span>(Qt::WindowStaysOnTopHint);</span><br><span class="line">         loopDialog.<span class="built_in">setModal</span>(<span class="literal">true</span>);</span><br><span class="line">         loopDialog.<span class="built_in">setFixedSize</span>(<span class="number">350</span>, <span class="number">100</span>); <span class="comment">// 设置固定大小</span></span><br><span class="line"></span><br><span class="line">         QLabel *label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(&amp;loopDialog);</span><br><span class="line">         label-&gt;<span class="built_in">setText</span>(<span class="string">&quot;你在考虑下,接不接受&quot;</span>); <span class="comment">// 确保文本正确设置</span></span><br><span class="line">         label-&gt;<span class="built_in">show</span>();</span><br><span class="line">         label-&gt;<span class="built_in">setGeometry</span>(<span class="number">120</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">35</span>); <span class="comment">// 设置位置和大小</span></span><br><span class="line">         <span class="comment">//label-&gt;setStyleSheet(&quot;border: 1px solid black&quot;); // 添加边框以显示位置</span></span><br><span class="line">         QPalette palette = label-&gt;<span class="built_in">palette</span>();</span><br><span class="line">         palette.<span class="built_in">setColor</span>(QPalette::Text, <span class="built_in">QColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)); <span class="comment">// 设置文本颜色为蓝色</span></span><br><span class="line">         label-&gt;<span class="built_in">setPalette</span>(palette);</span><br><span class="line"></span><br><span class="line">         QPushButton *btnYesLoop = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Yes&quot;</span>, &amp;loopDialog);</span><br><span class="line">         QPushButton *btnNoLoop = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;No&quot;</span>, &amp;loopDialog);</span><br><span class="line">         btnYesLoop-&gt;<span class="built_in">setGeometry</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">         btnNoLoop-&gt;<span class="built_in">setGeometry</span>(<span class="number">200</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 设置父子关系</span></span><br><span class="line">         btnYesLoop-&gt;<span class="built_in">setParent</span>(&amp;loopDialog);</span><br><span class="line">         btnNoLoop-&gt;<span class="built_in">setParent</span>(&amp;loopDialog);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 连接按钮的点击事件</span></span><br><span class="line">         QObject::<span class="built_in">connect</span>(btnYesLoop, &amp;QPushButton::clicked, &amp;loopDialog, &amp;QDialog::accept);</span><br><span class="line">         QObject::<span class="built_in">connect</span>(btnNoLoop, &amp;QPushButton::clicked, &amp;loopDialog, &amp;QDialog::reject);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示循环对话框</span></span><br><span class="line">         <span class="keyword">if</span> (loopDialog.<span class="built_in">exec</span>() == QDialog::Accepted) &#123;</span><br><span class="line">             <span class="comment">// 用户点击了 &quot;Yes&quot; 按钮，退出循环</span></span><br><span class="line">             Yes_Next *y = <span class="keyword">new</span> Yes_Next;</span><br><span class="line">             y-&gt;<span class="built_in">setGeometry</span>(<span class="number">600</span>, <span class="number">150</span>, <span class="number">400</span>, <span class="number">400</span>); <span class="comment">// 设置窗口位置和大小</span></span><br><span class="line">             y-&gt;<span class="built_in">show</span>();</span><br><span class="line">             y-&gt;<span class="built_in">raise</span>();</span><br><span class="line">             <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">             <span class="comment">//exit(0);</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></blockquote><h4 id="yes-next窗口"><a href="#yes-next窗口" class="headerlink" title="yes_next窗口"></a>yes_next窗口</h4><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;yes_next.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_yes_next.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Yes_Next::<span class="built_in">Yes_Next</span>(QWidget *parent)</span><br><span class="line"> : <span class="built_in">QWidget</span>(parent)</span><br><span class="line"> , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Yes_Next)</span><br><span class="line">&#123;</span><br><span class="line"> ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"> <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;poems&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*使用HTML标记：你可以使用HTML标记来在QLabel中显示换行文字。例如，你可以使用&lt;br&gt;标记来表示换行。示例代码如下：</span></span><br><span class="line"><span class="comment">     ui-&gt;label-&gt;setText(&quot;第一行文字&lt;br&gt;第二行文字&quot;);</span></span><br><span class="line"><span class="comment"> 使用QLabel的setWordWrap方法：你可以使用setWordWrap方法来启用QLabel的自动换行功能。示例代码如下：</span></span><br><span class="line"><span class="comment">     ui-&gt;label-&gt;setText(&quot;这是一段很长的文字，当文字超出label的大小时会自动换行&quot;);</span></span><br><span class="line"><span class="comment">     ui-&gt;label-&gt;setWordWrap(true);</span></span><br><span class="line"><span class="comment"> 这两种方法都可以用来在QLabel中显示换行文字。你可以根据你的需求选择其中一种方法*/</span></span><br><span class="line"></span><br><span class="line"> QString poem = <span class="string">&quot;&lt;br&gt;莎士比亚的《十四行诗》：&lt;br&gt;“我能否将你比作夏日？&lt;br&gt;但你比夏日更可爱也更温柔。”&lt;br&gt;&quot;</span></span><br><span class="line">                <span class="string">&quot;&lt;br&gt;杰拉尔德的《未与你共度一切》：&lt;br&gt;“我曾遇到过无数生灵，曾看过无数美景，&lt;br&gt;这一切却未与你共度，&lt;br&gt;这都会是我的损失；&lt;br&gt;这些事情我都想与你共度，&quot;</span></span><br><span class="line">                <span class="string">&quot;&lt;br&gt;这一切才会是我的收获。”&lt;br&gt;&lt;br&gt;波伏娃的《越洋情书》：&lt;br&gt;“唯有你也想见我的时候，我们的见面才有意义。”&lt;br&gt;&lt;br&gt;“犹如飞蛾扑向星星，又如黑夜追求黎明。”&lt;br&gt;&lt;br&gt;“见你第一眼我就沦陷了。”&lt;br&gt;&lt;br&gt;“他是我的南北，&quot;</span></span><br><span class="line">                <span class="string">&quot;我的西东，我的工作日，我的礼拜天，我的正午，我的深夜，我的言语，我的歌声。我认为爱可以不朽。”&quot;</span>;</span><br><span class="line"></span><br><span class="line"> ui-&gt;label-&gt;<span class="built_in">setText</span>(poem);</span><br><span class="line"> ui-&gt;label-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-color: pink; font-style: italic; font-family: 华文楷体;&quot;</span>);</span><br><span class="line"> QFont font = ui-&gt;label-&gt;<span class="built_in">font</span>(); <span class="comment">// 获取label的当前字体</span></span><br><span class="line"> font.<span class="built_in">setPointSize</span>(<span class="number">16</span>); <span class="comment">// 设置字体大小为16</span></span><br><span class="line"> ui-&gt;label-&gt;<span class="built_in">setFont</span>(font); <span class="comment">// 应用新的字体</span></span><br><span class="line"> ui-&gt;label-&gt;<span class="built_in">setWordWrap</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置背景图片</span></span><br><span class="line"> QString imagePath = <span class="string">&quot;url(:/loveheart.jfif)&quot;</span>; <span class="comment">// 替换成你的图片路径</span></span><br><span class="line"> <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: &quot;</span>+ imagePath + <span class="string">&quot;; background-position: center; background-attachment: fixed;&quot;</span>);</span><br><span class="line"> <span class="comment">/*使用background-size属性来指定背景图片的大小和填充方式。例如，你可以设置为background-size: cover;</span></span><br><span class="line"><span class="comment">     * 来让背景图片覆盖整个窗口，或者设置为background-size: contain;来让背景图片完整显示在窗口内，不进行裁剪。*/</span></span><br><span class="line">    <span class="comment">//background-repeat: no-repeat不重复</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yes_Next::~<span class="built_in">Yes_Next</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>这个窗口里面有使用到一些html和qss之类的知识,我都在注释中写了,看注释就可以</p><h4 id="Qt打包成品"><a href="#Qt打包成品" class="headerlink" title="Qt打包成品"></a>Qt打包成品</h4><p>如果不打包的话,这个程序只能在qt框架中使用,到别人的电脑上不一定能用(缺少依赖环境),所以最好把成品打包,再发给别人</p><h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><p><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128091709599.png" alt="image-20240128091709599"></p><ol><li><p>箭头处切换成release版本在编译运行</p></li><li><p>找到release的生成文件夹,一般就在项目的同级目录下</p></li></ol><p>  <img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128091957364.png" alt="image-20240128091957364"></p><ol start="3"><li><p>找到.exe文件,复制到任意一个空文件夹</p></li><li><p>右键在终端中打开<br> <img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128092221532.png" alt="image-20240128092221532"></p></li><li><p>输入windeployqt “你的exe程序名字”,就会帮你自动打包需要的资源文件,最后放在此文件夹中,然后你就可以把这个文件夹发给别人开心的玩耍了!</p><p> <img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128092456774.png" alt="image-20240128092456774"></p></li></ol><img src="image-20240128092516992.png" alt="image-20240128092516992" style="zoom:80%;" /><h3 id="获取成品"><a href="#获取成品" class="headerlink" title="获取成品"></a>获取成品</h3><p>链接：<a href="https://pan.baidu.com/s/1dNQ9S1uWGD7fw-RxlXoIRA?pwd=1234">https://pan.baidu.com/s/1dNQ9S1uWGD7fw-RxlXoIRA?pwd=1234</a><br>提取码：1234</p>]]></content>
      
      
      <categories>
          
          <category> GUI程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取番茄小说</title>
      <link href="/2024/06/21/pa-qu-fan-qie-xiao-shuo/"/>
      <url>/2024/06/21/pa-qu-fan-qie-xiao-shuo/</url>
      
        <content type="html"><![CDATA[<h2 id="本文用于纪录爬取番茄小说过程中遇到的困难和解决措施"><a href="#本文用于纪录爬取番茄小说过程中遇到的困难和解决措施" class="headerlink" title="本文用于纪录爬取番茄小说过程中遇到的困难和解决措施"></a>本文用于纪录爬取番茄小说过程中遇到的困难和解决措施</h2><p>首先找到我想要的小说第一章</p><h4 id="1-找网络接口"><a href="#1-找网络接口" class="headerlink" title="1.找网络接口"></a>1.找网络接口</h4><p>右键检查,清空网络日志,刷新,找到6893843740742386183document类型请求标头URL确实是<a href="https://fanqienovel.com/reader/6893843740742386183,%E6%B2%A1%E6%9C%89%E5%81%9A%E5%85%B6%E4%BB%96%E6%8E%AA%E6%96%BD,%E6%89%80%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%94%A8requests%E5%BA%93%E4%BC%AA%E8%A3%85%E8%AE%BF%E9%97%AE,%E8%BF%99%E4%B8%80%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B">https://fanqienovel.com/reader/6893843740742386183,没有做其他措施,所以直接用requests库伪装访问,这一部分代码如下</a></p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126232926232-1706330347599-1.png"></p><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cap01_url = &#x27;https://fanqienovel.com/reader/6893843740742386183?enter_from=reader&#x27;</span></span><br><span class="line"><span class="comment"># cap02_url = &#x27;https://fanqienovel.com/reader/6893843740834660878?enter_from=reader&#x27;</span></span><br><span class="line"><span class="comment"># cap03_url = &#x27;https://fanqienovel.com/reader/6893843740910158344?enter_from=reader&#x27;</span></span><br><span class="line">观察发现,网页之间并没有直接关联</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cap01_url = <span class="string">&#x27;https://fanqienovel.com/reader/6893843740742386183?enter_from=reader&#x27;</span></span><br><span class="line"><span class="comment"># cap02_url = &#x27;https://fanqienovel.com/reader/6893843740834660878?enter_from=reader&#x27;</span></span><br><span class="line"><span class="comment"># cap03_url = &#x27;https://fanqienovel.com/reader/6893843740910158344?enter_from=reader&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=cap01_url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-接下来就使用xpath提取数据了"><a href="#2-接下来就使用xpath提取数据了" class="headerlink" title="2.接下来就使用xpath提取数据了"></a>2.接下来就使用xpath提取数据了</h4><p>“””先不要管乱码问题待会解决”””</p><p>通过观察层级结构,我们使用xpath语法  &#x2F;&#x2F;div[@class&#x3D;”muye-reader-content noselect”]&#x2F;div&#x2F;&#x2F;p   获得文章内容,</p><p>同时保存了章节标题  &#x2F;&#x2F;h1[@class &#x3D; “muye-reader-title”],先把这一部分内容获取到</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tree = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">title = tree.xpath(<span class="string">&#x27;//h1[@class = &quot;muye-reader-title&quot;]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content_tags = tree.xpath(<span class="string">&#x27;//div[@class=&quot;muye-reader-content noselect&quot;]/div//p/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(content_tags))</span><br><span class="line"><span class="keyword">for</span> content_tag <span class="keyword">in</span> content_tags:</span><br><span class="line"> <span class="built_in">print</span>(content_tag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(title))</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126220945788.png" alt="image-20240126220945788"></p><p>获取内容如图,具有乱码</p><p>通过对网页结构分析,发现文字有一些超出了编码范围,于是可以推断出,字体暗藏玄机,找到网页字体文件后,下载到本地,用Fontforge打开,发现只从e3e8到e55b有文字,所以可以得出番茄使用了两套字体加载文本内容,当字符超出一定范围,就使用另一种</p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126221219344.png" alt="image-20240126221219344"></p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126221529195.png" alt="image-20240126221529195"></p><p>于是这一段代码为:</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">CODE_ST = <span class="number">58344</span>  <span class="comment"># 十六进制e3e8的十进制</span></span><br><span class="line">CODE_ED = <span class="number">58715</span>  <span class="comment"># 十六进制e55b的十进制</span></span><br><span class="line">charset = [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;在&#x27;</span>, <span class="string">&#x27;主&#x27;</span>, <span class="string">&#x27;特&#x27;</span>, <span class="string">&#x27;家&#x27;</span>, <span class="string">&#x27;军&#x27;</span>, <span class="string">&#x27;然&#x27;</span>, <span class="string">&#x27;表&#x27;</span>, <span class="string">&#x27;场&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;要&#x27;</span>, <span class="string">&#x27;只&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;和&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;别&#x27;</span>, <span class="string">&#x27;还&#x27;</span>, <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;现&#x27;</span>, <span class="string">&#x27;儿&#x27;</span>, <span class="string">&#x27;岁&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;此&#x27;</span>, <span class="string">&#x27;象&#x27;</span>, <span class="string">&#x27;月&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;出&#x27;</span>, <span class="string">&#x27;战&#x27;</span>, <span class="string">&#x27;工&#x27;</span>, <span class="string">&#x27;相&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;首&#x27;</span>, <span class="string">&#x27;失&#x27;</span>, <span class="string">&#x27;世&#x27;</span>, <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;都&#x27;</span>, <span class="string">&#x27;平&#x27;</span>, <span class="string">&#x27;文&#x27;</span>, <span class="string">&#x27;什&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;将&#x27;</span>, <span class="string">&#x27;真&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;那&#x27;</span>, <span class="string">&#x27;当&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;会&#x27;</span>, <span class="string">&#x27;立&#x27;</span>, <span class="string">&#x27;些&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;是&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;学&#x27;</span>, <span class="string">&#x27;气&#x27;</span>, <span class="string">&#x27;大&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>, <span class="string">&#x27;两&#x27;</span>, <span class="string">&#x27;命&#x27;</span>, <span class="string">&#x27;全&#x27;</span>, <span class="string">&#x27;后&#x27;</span>, <span class="string">&#x27;东&#x27;</span>, <span class="string">&#x27;性&#x27;</span>, <span class="string">&#x27;通&#x27;</span>, <span class="string">&#x27;被&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;它&#x27;</span>, <span class="string">&#x27;乐&#x27;</span>, <span class="string">&#x27;接&#x27;</span>, <span class="string">&#x27;而&#x27;</span>, <span class="string">&#x27;感&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;车&#x27;</span>, <span class="string">&#x27;山&#x27;</span>, <span class="string">&#x27;公&#x27;</span>, <span class="string">&#x27;了&#x27;</span>, <span class="string">&#x27;常&#x27;</span>, <span class="string">&#x27;以&#x27;</span>, <span class="string">&#x27;何&#x27;</span>, <span class="string">&#x27;可&#x27;</span>, <span class="string">&#x27;话&#x27;</span>, <span class="string">&#x27;先&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;叫&#x27;</span>, <span class="string">&#x27;轻&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;士&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;着&#x27;</span>, <span class="string">&#x27;变&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;尔&#x27;</span>, <span class="string">&#x27;快&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;个&#x27;</span>, <span class="string">&#x27;说&#x27;</span>, <span class="string">&#x27;少&#x27;</span>, <span class="string">&#x27;色&#x27;</span>, <span class="string">&#x27;里&#x27;</span>, <span class="string">&#x27;安&#x27;</span>, <span class="string">&#x27;花&#x27;</span>, <span class="string">&#x27;远&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;难&#x27;</span>, <span class="string">&#x27;师&#x27;</span>, <span class="string">&#x27;放&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;报&#x27;</span>, <span class="string">&#x27;认&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;面&#x27;</span>, <span class="string">&#x27;道&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;克&#x27;</span>, <span class="string">&#x27;地&#x27;</span>, <span class="string">&#x27;度&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;好&#x27;</span>, <span class="string">&#x27;机&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;民&#x27;</span>, <span class="string">&#x27;写&#x27;</span>, <span class="string">&#x27;把&#x27;</span>, <span class="string">&#x27;万&#x27;</span>, <span class="string">&#x27;同&#x27;</span>, <span class="string">&#x27;水&#x27;</span>, <span class="string">&#x27;新&#x27;</span>, <span class="string">&#x27;没&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;书&#x27;</span>, <span class="string">&#x27;电&#x27;</span>, <span class="string">&#x27;吃&#x27;</span>, <span class="string">&#x27;像&#x27;</span>, <span class="string">&#x27;斯&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;为&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;几&#x27;</span>, <span class="string">&#x27;日&#x27;</span>, <span class="string">&#x27;教&#x27;</span>, <span class="string">&#x27;看&#x27;</span>, <span class="string">&#x27;但&#x27;</span>, <span class="string">&#x27;第&#x27;</span>, <span class="string">&#x27;加&#x27;</span>, <span class="string">&#x27;候&#x27;</span>, <span class="string">&#x27;作&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;上&#x27;</span>, <span class="string">&#x27;拉&#x27;</span>, <span class="string">&#x27;住&#x27;</span>, <span class="string">&#x27;有&#x27;</span>, <span class="string">&#x27;法&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;事&#x27;</span>, <span class="string">&#x27;应&#x27;</span>, <span class="string">&#x27;位&#x27;</span>, <span class="string">&#x27;利&#x27;</span>, <span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;声&#x27;</span>, <span class="string">&#x27;身&#x27;</span>, <span class="string">&#x27;国&#x27;</span>, <span class="string">&#x27;问&#x27;</span>, <span class="string">&#x27;马&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;他&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;比&#x27;</span>, <span class="string">&#x27;父&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;边&#x27;</span>, <span class="string">&#x27;美&#x27;</span>, <span class="string">&#x27;对&#x27;</span>, <span class="string">&#x27;所&#x27;</span>, <span class="string">&#x27;金&#x27;</span>, <span class="string">&#x27;活&#x27;</span>, <span class="string">&#x27;回&#x27;</span>, <span class="string">&#x27;意&#x27;</span>, <span class="string">&#x27;到&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;从&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;知&#x27;</span>, <span class="string">&#x27;又&#x27;</span>, <span class="string">&#x27;内&#x27;</span>, <span class="string">&#x27;因&#x27;</span>, <span class="string">&#x27;点&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;定&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;正&#x27;</span>, <span class="string">&#x27;或&#x27;</span>, <span class="string">&#x27;夫&#x27;</span>, <span class="string">&#x27;向&#x27;</span>, <span class="string">&#x27;德&#x27;</span>, <span class="string">&#x27;听&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;更&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;得&#x27;</span>, <span class="string">&#x27;告&#x27;</span>, <span class="string">&#x27;并&#x27;</span>, <span class="string">&#x27;本&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;过&#x27;</span>, <span class="string">&#x27;记&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;让&#x27;</span>, <span class="string">&#x27;打&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;人&#x27;</span>, <span class="string">&#x27;就&#x27;</span>, <span class="string">&#x27;者&#x27;</span>, <span class="string">&#x27;去&#x27;</span>, <span class="string">&#x27;原&#x27;</span>, <span class="string">&#x27;满&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;体&#x27;</span>, <span class="string">&#x27;做&#x27;</span>, <span class="string">&#x27;经&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;走&#x27;</span>, <span class="string">&#x27;如&#x27;</span>, <span class="string">&#x27;孩&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;给&#x27;</span>, <span class="string">&#x27;使&#x27;</span>, <span class="string">&#x27;物&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;最&#x27;</span>, <span class="string">&#x27;笑&#x27;</span>, <span class="string">&#x27;部&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;员&#x27;</span>, <span class="string">&#x27;等&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;受&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;行&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;条&#x27;</span>, <span class="string">&#x27;果&#x27;</span>, <span class="string">&#x27;动&#x27;</span>, <span class="string">&#x27;光&#x27;</span>, <span class="string">&#x27;门&#x27;</span>, <span class="string">&#x27;头&#x27;</span>, <span class="string">&#x27;见&#x27;</span>, <span class="string">&#x27;往&#x27;</span>, <span class="string">&#x27;自&#x27;</span>, <span class="string">&#x27;解&#x27;</span>, <span class="string">&#x27;成&#x27;</span>, <span class="string">&#x27;处&#x27;</span>, <span class="string">&#x27;天&#x27;</span>, <span class="string">&#x27;能&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;于&#x27;</span>, <span class="string">&#x27;名&#x27;</span>, <span class="string">&#x27;其&#x27;</span>, <span class="string">&#x27;发&#x27;</span>, <span class="string">&#x27;总&#x27;</span>, <span class="string">&#x27;母&#x27;</span>, <span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;死&#x27;</span>, <span class="string">&#x27;手&#x27;</span>, <span class="string">&#x27;入&#x27;</span>, <span class="string">&#x27;路&#x27;</span>, <span class="string">&#x27;进&#x27;</span>, <span class="string">&#x27;心&#x27;</span>, <span class="string">&#x27;来&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;时&#x27;</span>, <span class="string">&#x27;力&#x27;</span>, <span class="string">&#x27;多&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;开&#x27;</span>, <span class="string">&#x27;己&#x27;</span>, <span class="string">&#x27;许&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;至&#x27;</span>, <span class="string">&#x27;由&#x27;</span>, <span class="string">&#x27;很&#x27;</span>, <span class="string">&#x27;界&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;小&#x27;</span>, <span class="string">&#x27;与&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;想&#x27;</span>, <span class="string">&#x27;代&#x27;</span>, <span class="string">&#x27;么&#x27;</span>, <span class="string">&#x27;分&#x27;</span>, <span class="string">&#x27;生&#x27;</span>, <span class="string">&#x27;口&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;再&#x27;</span>, <span class="string">&#x27;妈&#x27;</span>, <span class="string">&#x27;望&#x27;</span>, <span class="string">&#x27;次&#x27;</span>, <span class="string">&#x27;西&#x27;</span>, <span class="string">&#x27;风&#x27;</span>, <span class="string">&#x27;种&#x27;</span>, <span class="string">&#x27;带&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;实&#x27;</span>, <span class="string">&#x27;情&#x27;</span>, <span class="string">&#x27;才&#x27;</span>, <span class="string">&#x27;这&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;神&#x27;</span>, <span class="string">&#x27;格&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;长&#x27;</span>, <span class="string">&#x27;觉&#x27;</span>, <span class="string">&#x27;间&#x27;</span>, <span class="string">&#x27;年&#x27;</span>, <span class="string">&#x27;眼&#x27;</span>, <span class="string">&#x27;无&#x27;</span>, <span class="string">&#x27;不&#x27;</span>, <span class="string">&#x27;亲&#x27;</span>, <span class="string">&#x27;关&#x27;</span>, <span class="string">&#x27;结&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;友&#x27;</span>, <span class="string">&#x27;信&#x27;</span>, <span class="string">&#x27;下&#x27;</span>, <span class="string">&#x27;却&#x27;</span>, <span class="string">&#x27;重&#x27;</span>, <span class="string">&#x27;己&#x27;</span>, <span class="string">&#x27;老&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;音&#x27;</span>, <span class="string">&#x27;字&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;呢&#x27;</span>, <span class="string">&#x27;明&#x27;</span>, <span class="string">&#x27;之&#x27;</span>, <span class="string">&#x27;前&#x27;</span>, <span class="string">&#x27;高&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;目&#x27;</span>, <span class="string">&#x27;太&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;起&#x27;</span>, <span class="string">&#x27;稜&#x27;</span>, <span class="string">&#x27;她&#x27;</span>, <span class="string">&#x27;也&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;用&#x27;</span>, <span class="string">&#x27;方&#x27;</span>, <span class="string">&#x27;子&#x27;</span>, <span class="string">&#x27;英&#x27;</span>, <span class="string">&#x27;每&#x27;</span>, <span class="string">&#x27;理&#x27;</span>, <span class="string">&#x27;便&#x27;</span>, <span class="string">&#x27;西&#x27;</span>, <span class="string">&#x27;数&#x27;</span>, <span class="string">&#x27;期&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;外&#x27;</span>, <span class="string">&#x27;样&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;海&#x27;</span>, <span class="string">&#x27;们&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;任&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpreter</span>(<span class="params">cc</span>):  <span class="comment"># 原字符减去e338获取到另一套字体的该编码字符</span></span><br><span class="line"> bias = cc - CODE_ST</span><br><span class="line"> <span class="keyword">if</span> charset[bias] == <span class="string">&#x27;?&#x27;</span>:  <span class="comment"># 特殊处理</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">chr</span>(cc)</span><br><span class="line"> <span class="keyword">return</span> charset[bias]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取小说章节</span></span><br><span class="line"><span class="built_in">print</span>(title)</span><br><span class="line">content = []</span><br><span class="line"><span class="keyword">for</span> content_tag <span class="keyword">in</span> content_tags:</span><br><span class="line"> para = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> <span class="keyword">for</span> char <span class="keyword">in</span> content_tag:</span><br><span class="line">     cc = <span class="built_in">ord</span>(char)</span><br><span class="line">     <span class="keyword">if</span> CODE_ST &lt;= cc &lt;= CODE_ED:</span><br><span class="line">         ch = interpreter(cc)</span><br><span class="line">         para += ch</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         para += char  <span class="comment"># 这里应该是拼接字符，而不是其ASCII码</span></span><br><span class="line"> content.append(para)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> content:</span><br><span class="line"> fp.write(<span class="string">&#x27;    &#x27;</span>)</span><br><span class="line"> fp.write(para)</span><br><span class="line"> fp.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>到这按理说应该去找底部下一章节按钮的超链接,但是番茄给我们反爬了,没有有用信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只能去网络接口里面找,在点击下一张之后,发现网络请求中有一个请求返回的json数据不仅有内容还有下一页的**ItemID**,所以解析获得,然后拼接到本身url(替换原本的id,  *注意:原本的url里面的参数可以删去部分,不影响返回,最后的url是这样*https://fanqienovel.com/api/reader/full?itemId=6893843740834660878)</span><br></pre></td></tr></table></figure><p>注意,经过实验下一张的编号是itemId,而不是nextitemId</p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126232926232-1706330347599-1.png"></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cap01_url = <span class="string">&#x27;https://fanqienovel.com/api/reader/full?itemId=6893843740834660878&#x27;</span></span><br><span class="line"><span class="comment"># cap02_url = &#x27;https://fanqienovel.com/reader/6893843740834660878?enter_from=reader&#x27;</span></span><br><span class="line"><span class="comment"># cap03_url = &#x27;https://fanqienovel.com/reader/6893843740910158344?enter_from=reader&#x27;</span></span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;人类不死以后.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=cap01_url, headers=headers)</span><br><span class="line"></span><br><span class="line">data = response.json()</span><br><span class="line"></span><br><span class="line">json_obj = response.json()  <span class="comment"># 解析JSON数据为Python字典</span></span><br><span class="line"></span><br><span class="line">next_id = json_obj[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;chapterData&#x27;</span>][<span class="string">&#x27;nextItemId&#x27;</span>] <span class="comment"># 解嵌套</span></span><br><span class="line"></span><br><span class="line">next_url = <span class="string">&#x27;https://fanqienovel.com/api/reader/full?itemId=&#x27;</span> + <span class="built_in">str</span>(next_id)</span><br></pre></td></tr></table></figure></blockquote><p>到此,所以需要的信息已经爬完了,只需要处理循环逻辑,保存文件就行</p><p>最后全部代码如下,做了一些修改</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line"># Time: 2024/1/22/22:59</span><br><span class="line"># Theme: 爬虫程序</span><br><span class="line"># Author: 0zxm</span><br><span class="line"># E-mail: m15813109801@163.com</span><br><span class="line"># Dependencies: urllib.request, lxml</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">CODE_ST = 58344  # 十六进制e3e8的十进制</span><br><span class="line">CODE_ED = 58715  # 十六进制e55b的十进制</span><br><span class="line">charset = [&#x27;D&#x27;, &#x27;在&#x27;, &#x27;主&#x27;, &#x27;特&#x27;, &#x27;家&#x27;, &#x27;军&#x27;, &#x27;然&#x27;, &#x27;表&#x27;, &#x27;场&#x27;, &#x27;4&#x27;, &#x27;要&#x27;, &#x27;只&#x27;, &#x27;v&#x27;, &#x27;和&#x27;, &#x27;?&#x27;, &#x27;6&#x27;, &#x27;别&#x27;, &#x27;还&#x27;, &#x27;g&#x27;,</span><br><span class="line">     &#x27;现&#x27;, &#x27;儿&#x27;, &#x27;岁&#x27;, &#x27;?&#x27;, &#x27;?&#x27;, &#x27;此&#x27;, &#x27;象&#x27;, &#x27;月&#x27;, &#x27;3&#x27;, &#x27;出&#x27;, &#x27;战&#x27;, &#x27;工&#x27;, &#x27;相&#x27;, &#x27;o&#x27;, &#x27;男&#x27;, &#x27;首&#x27;, &#x27;失&#x27;, &#x27;世&#x27;, &#x27;F&#x27;,</span><br><span class="line">     &#x27;都&#x27;, &#x27;平&#x27;, &#x27;文&#x27;, &#x27;什&#x27;, &#x27;V&#x27;, &#x27;O&#x27;, &#x27;将&#x27;, &#x27;真&#x27;, &#x27;T&#x27;, &#x27;那&#x27;, &#x27;当&#x27;, &#x27;?&#x27;, &#x27;会&#x27;, &#x27;立&#x27;, &#x27;些&#x27;, &#x27;u&#x27;, &#x27;是&#x27;, &#x27;十&#x27;, &#x27;张&#x27;,</span><br><span class="line">     &#x27;学&#x27;, &#x27;气&#x27;, &#x27;大&#x27;, &#x27;爱&#x27;, &#x27;两&#x27;, &#x27;命&#x27;, &#x27;全&#x27;, &#x27;后&#x27;, &#x27;东&#x27;, &#x27;性&#x27;, &#x27;通&#x27;, &#x27;被&#x27;, &#x27;1&#x27;, &#x27;它&#x27;, &#x27;乐&#x27;, &#x27;接&#x27;, &#x27;而&#x27;, &#x27;感&#x27;,</span><br><span class="line">     &#x27;车&#x27;, &#x27;山&#x27;, &#x27;公&#x27;, &#x27;了&#x27;, &#x27;常&#x27;, &#x27;以&#x27;, &#x27;何&#x27;, &#x27;可&#x27;, &#x27;话&#x27;, &#x27;先&#x27;, &#x27;p&#x27;, &#x27;i&#x27;, &#x27;叫&#x27;, &#x27;轻&#x27;, &#x27;M&#x27;, &#x27;士&#x27;, &#x27;w&#x27;, &#x27;着&#x27;, &#x27;变&#x27;,</span><br><span class="line">     &#x27;尔&#x27;, &#x27;快&#x27;, &#x27;l&#x27;, &#x27;个&#x27;, &#x27;说&#x27;, &#x27;少&#x27;, &#x27;色&#x27;, &#x27;里&#x27;, &#x27;安&#x27;, &#x27;花&#x27;, &#x27;远&#x27;, &#x27;7&#x27;, &#x27;难&#x27;, &#x27;师&#x27;, &#x27;放&#x27;, &#x27;t&#x27;, &#x27;报&#x27;, &#x27;认&#x27;,</span><br><span class="line">     &#x27;面&#x27;, &#x27;道&#x27;, &#x27;S&#x27;, &#x27;?&#x27;, &#x27;克&#x27;, &#x27;地&#x27;, &#x27;度&#x27;, &#x27;I&#x27;, &#x27;好&#x27;, &#x27;机&#x27;, &#x27;U&#x27;, &#x27;民&#x27;, &#x27;写&#x27;, &#x27;把&#x27;, &#x27;万&#x27;, &#x27;同&#x27;, &#x27;水&#x27;, &#x27;新&#x27;, &#x27;没&#x27;,</span><br><span class="line">     &#x27;书&#x27;, &#x27;电&#x27;, &#x27;吃&#x27;, &#x27;像&#x27;, &#x27;斯&#x27;, &#x27;5&#x27;, &#x27;为&#x27;, &#x27;y&#x27;, &#x27;白&#x27;, &#x27;几&#x27;, &#x27;日&#x27;, &#x27;教&#x27;, &#x27;看&#x27;, &#x27;但&#x27;, &#x27;第&#x27;, &#x27;加&#x27;, &#x27;候&#x27;, &#x27;作&#x27;,</span><br><span class="line">     &#x27;上&#x27;, &#x27;拉&#x27;, &#x27;住&#x27;, &#x27;有&#x27;, &#x27;法&#x27;, &#x27;r&#x27;, &#x27;事&#x27;, &#x27;应&#x27;, &#x27;位&#x27;, &#x27;利&#x27;, &#x27;你&#x27;, &#x27;声&#x27;, &#x27;身&#x27;, &#x27;国&#x27;, &#x27;问&#x27;, &#x27;马&#x27;, &#x27;女&#x27;, &#x27;他&#x27;,</span><br><span class="line">     &#x27;Y&#x27;, &#x27;比&#x27;, &#x27;父&#x27;, &#x27;x&#x27;, &#x27;A&#x27;, &#x27;H&#x27;, &#x27;N&#x27;, &#x27;s&#x27;, &#x27;X&#x27;, &#x27;边&#x27;, &#x27;美&#x27;, &#x27;对&#x27;, &#x27;所&#x27;, &#x27;金&#x27;, &#x27;活&#x27;, &#x27;回&#x27;, &#x27;意&#x27;, &#x27;到&#x27;, &#x27;z&#x27;,</span><br><span class="line">     &#x27;从&#x27;, &#x27;j&#x27;, &#x27;知&#x27;, &#x27;又&#x27;, &#x27;内&#x27;, &#x27;因&#x27;, &#x27;点&#x27;, &#x27;Q&#x27;, &#x27;三&#x27;, &#x27;定&#x27;, &#x27;8&#x27;, &#x27;R&#x27;, &#x27;b&#x27;, &#x27;正&#x27;, &#x27;或&#x27;, &#x27;夫&#x27;, &#x27;向&#x27;, &#x27;德&#x27;, &#x27;听&#x27;,</span><br><span class="line">     &#x27;更&#x27;, &#x27;?&#x27;, &#x27;得&#x27;, &#x27;告&#x27;, &#x27;并&#x27;, &#x27;本&#x27;, &#x27;q&#x27;, &#x27;过&#x27;, &#x27;记&#x27;, &#x27;L&#x27;, &#x27;让&#x27;, &#x27;打&#x27;, &#x27;f&#x27;, &#x27;人&#x27;, &#x27;就&#x27;, &#x27;者&#x27;, &#x27;去&#x27;, &#x27;原&#x27;, &#x27;满&#x27;,</span><br><span class="line">     &#x27;体&#x27;, &#x27;做&#x27;, &#x27;经&#x27;, &#x27;K&#x27;, &#x27;走&#x27;, &#x27;如&#x27;, &#x27;孩&#x27;, &#x27;c&#x27;, &#x27;G&#x27;, &#x27;给&#x27;, &#x27;使&#x27;, &#x27;物&#x27;, &#x27;?&#x27;, &#x27;最&#x27;, &#x27;笑&#x27;, &#x27;部&#x27;, &#x27;?&#x27;, &#x27;员&#x27;, &#x27;等&#x27;,</span><br><span class="line">     &#x27;受&#x27;, &#x27;k&#x27;, &#x27;行&#x27;, &#x27;一&#x27;, &#x27;条&#x27;, &#x27;果&#x27;, &#x27;动&#x27;, &#x27;光&#x27;, &#x27;门&#x27;, &#x27;头&#x27;, &#x27;见&#x27;, &#x27;往&#x27;, &#x27;自&#x27;, &#x27;解&#x27;, &#x27;成&#x27;, &#x27;处&#x27;, &#x27;天&#x27;, &#x27;能&#x27;,</span><br><span class="line">     &#x27;于&#x27;, &#x27;名&#x27;, &#x27;其&#x27;, &#x27;发&#x27;, &#x27;总&#x27;, &#x27;母&#x27;, &#x27;的&#x27;, &#x27;死&#x27;, &#x27;手&#x27;, &#x27;入&#x27;, &#x27;路&#x27;, &#x27;进&#x27;, &#x27;心&#x27;, &#x27;来&#x27;, &#x27;h&#x27;, &#x27;时&#x27;, &#x27;力&#x27;, &#x27;多&#x27;,</span><br><span class="line">     &#x27;开&#x27;, &#x27;己&#x27;, &#x27;许&#x27;, &#x27;d&#x27;, &#x27;至&#x27;, &#x27;由&#x27;, &#x27;很&#x27;, &#x27;界&#x27;, &#x27;n&#x27;, &#x27;小&#x27;, &#x27;与&#x27;, &#x27;Z&#x27;, &#x27;想&#x27;, &#x27;代&#x27;, &#x27;么&#x27;, &#x27;分&#x27;, &#x27;生&#x27;, &#x27;口&#x27;,</span><br><span class="line">     &#x27;再&#x27;, &#x27;妈&#x27;, &#x27;望&#x27;, &#x27;次&#x27;, &#x27;西&#x27;, &#x27;风&#x27;, &#x27;种&#x27;, &#x27;带&#x27;, &#x27;J&#x27;, &#x27;?&#x27;, &#x27;实&#x27;, &#x27;情&#x27;, &#x27;才&#x27;, &#x27;这&#x27;, &#x27;?&#x27;, &#x27;E&#x27;, &#x27;我&#x27;, &#x27;神&#x27;, &#x27;格&#x27;,</span><br><span class="line">     &#x27;长&#x27;, &#x27;觉&#x27;, &#x27;间&#x27;, &#x27;年&#x27;, &#x27;眼&#x27;, &#x27;无&#x27;, &#x27;不&#x27;, &#x27;亲&#x27;, &#x27;关&#x27;, &#x27;结&#x27;, &#x27;0&#x27;, &#x27;友&#x27;, &#x27;信&#x27;, &#x27;下&#x27;, &#x27;却&#x27;, &#x27;重&#x27;, &#x27;己&#x27;, &#x27;老&#x27;,</span><br><span class="line">     &#x27;2&#x27;, &#x27;音&#x27;, &#x27;字&#x27;, &#x27;m&#x27;, &#x27;呢&#x27;, &#x27;明&#x27;, &#x27;之&#x27;, &#x27;前&#x27;, &#x27;高&#x27;, &#x27;P&#x27;, &#x27;B&#x27;, &#x27;目&#x27;, &#x27;太&#x27;, &#x27;e&#x27;, &#x27;9&#x27;, &#x27;起&#x27;, &#x27;稜&#x27;, &#x27;她&#x27;, &#x27;也&#x27;,</span><br><span class="line">     &#x27;W&#x27;, &#x27;用&#x27;, &#x27;方&#x27;, &#x27;子&#x27;, &#x27;英&#x27;, &#x27;每&#x27;, &#x27;理&#x27;, &#x27;便&#x27;, &#x27;西&#x27;, &#x27;数&#x27;, &#x27;期&#x27;, &#x27;中&#x27;, &#x27;C&#x27;, &#x27;外&#x27;, &#x27;样&#x27;, &#x27;a&#x27;, &#x27;海&#x27;, &#x27;们&#x27;,</span><br><span class="line">     &#x27;任&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解析章节加密内容</span><br><span class="line">def interpreter(cc):  # 原字符减去e338获取到另一套字体的该编码字符</span><br><span class="line">bias = cc - CODE_ST</span><br><span class="line">if charset[bias] == &#x27;?&#x27;:  # 特殊处理</span><br><span class="line">  return chr(cc)</span><br><span class="line">return charset[bias]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cap_url = &#x27;https://fanqienovel.com/api/reader/full?itemId=6893843740742386183&#x27;</span><br><span class="line">cap02_url = &#x27;https://fanqienovel.com/reader/6893843740910158344&#x27;</span><br><span class="line"># cap02_url = &#x27;https://fanqienovel.com/reader/6893843740834660878?enter_from=reader&#x27;</span><br><span class="line"># cap03_url = &#x27;https://fanqienovel.com/reader/6893843740910158344?enter_from=reader&#x27;</span><br><span class="line"></span><br><span class="line">fp = open(&#x27;人类不死以后.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;:</span><br><span class="line">         &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0&#x27;&#125;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;第一章爬取&quot;&quot;&quot;</span><br><span class="line">content_url = &#x27;http://fanqienovel.com/reader/6893843740742386183&#x27;</span><br><span class="line">response = requests.get(url=content_url, headers=headers)</span><br><span class="line">tree = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">title = tree.xpath(&#x27;//h1[@class = &quot;muye-reader-title&quot;]/text()&#x27;)</span><br><span class="line">fp.write(title[0] + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">content_tags = tree.xpath(&#x27;//div[@class=&quot;muye-reader-content noselect&quot;]/div//p/text()&#x27;)</span><br><span class="line"># 获取小说章节</span><br><span class="line"># print(title)</span><br><span class="line">content = []</span><br><span class="line">for content_tag in content_tags:</span><br><span class="line">para = &#x27;&#x27;</span><br><span class="line">for char in content_tag:</span><br><span class="line">  cc = ord(char)</span><br><span class="line">  if CODE_ST &lt;= cc &lt;= CODE_ED:</span><br><span class="line">      ch = interpreter(cc)</span><br><span class="line">      para += ch</span><br><span class="line">  else:</span><br><span class="line">      para += char  # 这里应该是拼接字符，而不是其ASCII码</span><br><span class="line">content.append(para)</span><br><span class="line"></span><br><span class="line"># print(content)</span><br><span class="line">print(&#x27;正在下载第1章&#x27;)</span><br><span class="line">for para in content:</span><br><span class="line">fp.write(&#x27;    &#x27;)</span><br><span class="line">fp.write(para)</span><br><span class="line">fp.write(&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">index = 1</span><br><span class="line">while True:</span><br><span class="line"># TODO:获取下一章节ID</span><br><span class="line">response = requests.get(url=cap_url, headers=headers)</span><br><span class="line"></span><br><span class="line">data = response.json()</span><br><span class="line"></span><br><span class="line">json_obj = response.json()  # 解析JSON数据为Python字典</span><br><span class="line"></span><br><span class="line">next_id = json_obj[&#x27;data&#x27;][&#x27;chapterData&#x27;][&#x27;nextItemId&#x27;]  # 解嵌套</span><br><span class="line"></span><br><span class="line">next_id_url = &#x27;https://fanqienovel.com/api/reader/full?itemId=&#x27; + str(next_id)</span><br><span class="line"></span><br><span class="line">next_content_url = &#x27;http://fanqienovel.com/reader/&#x27; + str(next_id)</span><br><span class="line"></span><br><span class="line"># print(next_id_url)</span><br><span class="line"></span><br><span class="line">cap_url = next_id_url  # 迭代更新获取下一章id的url</span><br><span class="line"></span><br><span class="line"># TODO:获取每章节内容</span><br><span class="line">response = requests.get(url=next_content_url, headers=headers)</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">title = tree.xpath(&#x27;//h1[@class = &quot;muye-reader-title&quot;]/text()&#x27;)</span><br><span class="line">fp.write(title[0] + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">content_tags = tree.xpath(&#x27;//div[@class=&quot;muye-reader-content noselect&quot;]/div//p/text()&#x27;)</span><br><span class="line"></span><br><span class="line"># print(len(content_tags))</span><br><span class="line"></span><br><span class="line"># 获取小说章节</span><br><span class="line">content = []</span><br><span class="line">for content_tag in content_tags:</span><br><span class="line">  para = &#x27;&#x27;</span><br><span class="line">  for char in content_tag:</span><br><span class="line">      cc = ord(char)</span><br><span class="line">      if CODE_ST &lt;= cc &lt;= CODE_ED:</span><br><span class="line">          ch = interpreter(cc)</span><br><span class="line">          para += ch</span><br><span class="line">      else:</span><br><span class="line">          para += char  # 这里应该是拼接字符，而不是其ASCII码</span><br><span class="line">  content.append(para)</span><br><span class="line"></span><br><span class="line"># print(content)</span><br><span class="line">index += 1</span><br><span class="line"></span><br><span class="line">for para in content:</span><br><span class="line">  fp.write(&#x27;    &#x27;)</span><br><span class="line">  fp.write(para)</span><br><span class="line">  fp.write(&#x27;\n&#x27;)</span><br><span class="line">print(&#x27;正在下载第&#x27; + str(index) + &#x27;章&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240127095944844-1706320789213-1.png" alt="image-20240127095944844"></p><p>特别鸣谢</p><p>在写程序的时候,参考了一些文章,感谢</p><p>参考链接:</p><ul><li><a href="https://blog.csdn.net/m0_61248085/article/details/134538792">python爬虫番茄小说CSDN博客</a></li><li><a href="https://www.bilibili.com/video/BV1Pj41197rh">https://www.bilibili.com/video/BV1Pj41197rh</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5加密 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2024/06/21/hexo-da-jian-bo-ke/"/>
      <url>/2024/06/21/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="安装Git-和-NodeJs"><a href="#安装Git-和-NodeJs" class="headerlink" title="安装Git 和 NodeJs"></a>安装Git 和 NodeJs</h2><p>这是我搭建的时候对照的视频链接<a href="https://www.bilibili.com/video/BV1Eg41157tL/">教程]Hexo &amp; Github搭建自己的专属博客_哔哩哔哩_bilibili</a></p><ul><li><p>首先要安装</p><ul><li><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%E5%AE%89">https://git-scm.com/downloads，然后按默认选项安</a> 装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就 说明Git安装成功！</p></li><li><p>在Git中绑定Github账号，打开“Git Bash”，在命令框中依次输入两行命令：</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.name “Your Name”</span><br><span class="line">git config <span class="literal">--global</span> user.email email@example.com</span><br><span class="line"><span class="comment"># 其中Your Name和email@example.com替换成上面注册时的账户名和邮箱</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><p>和</p><ul><li><p>由于 Hexo 是基于 Node.js 驱动的一款博客框架，所以安装NodeJs <a href="https://nodejs.org/en/downl">https://nodejs.org/en/downl</a></p></li><li><p>安装之后可以输入以下命令查看是否安装成功:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>出现版本号则安装配置成功</p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/image-20240126185511681.png" alt="image-20240126185511681"></p></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>以上环境准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure></blockquote><p>安装 Hexo 完成后，在指定文件夹下打开”Git Bash”，再执行下列命令，Hexo 将会在指定文件夹中新建所须要的文件:</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line"><span class="built_in">cd</span> myBlog</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><p>若是上面的命令都没报错的话，就恭喜了，运行hexo s命令，其中s是server 的缩写，在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 回车就能够预览效果了。</p></blockquote><p><img src="/2024/06/21/hexo-da-jian-bo-ke/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240126193709.png"></p><h2 id="加载主题"><a href="#加载主题" class="headerlink" title="加载主题"></a>加载主题</h2><p>大家可以去官网上找自己喜欢的主题下载<a href="https://hexo.io/themes/%EF%BC%8C%E8%87%AA%E5%B7%B1%E9%87%87%E7%94%A8%E7%9A%84%E4%B8%BB%E9%A2%98%E6%98%AFhttps://github.com/Siricee/hexo-theme-Chic%EF%BC%8C%E8%BF%99%E6%AC%BE%E6%9C%89%E6%98%8E%E6%9A%97%E4%B8%A4%E7%A7%8D%E9%A2%9C%E8%89%B2%E3%80%82">https://hexo.io/themes/，自己采用的主题是https://github.com/Siricee/hexo-theme-Chic，这款有明暗两种颜色。</a></p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240126193855.png"></p><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><p>修改在主题文件夹下的_config.ym1文件，完成自己个人的配置，</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"># Header 主页面标题</span><br><span class="line">navname: Bentham&#x27;s Blog</span><br><span class="line"># navigatior items 四个文件归类</span><br><span class="line">nav:</span><br><span class="line">Posts: /archives</span><br><span class="line">Categories: /category</span><br><span class="line">Tags: /tag</span><br><span class="line">About: /about</span><br><span class="line"># favicon 图标</span><br><span class="line">favicon: /favicon.ico</span><br><span class="line"># Profile 中间显示名字</span><br><span class="line">nickname: Jeremy Bentham</span><br><span class="line">### this variable is MarkDown form.</span><br><span class="line"># 个人描述，可以修改成自己要显示的句子</span><br><span class="line">description: Lorem ipsum dolor sit amet, **consectetur adipiscing elit.**</span><br><span class="line">&lt;br&gt;Fusce eget urna vitae velit *eleifend interdum at ac* nisi.</span><br><span class="line"># 个人头像图片</span><br><span class="line">avatar: /image/avatar.jpeg</span><br><span class="line"># main menu navigation</span><br><span class="line">## links key words should not be changed.</span><br><span class="line">## Complete url after key words.</span><br><span class="line">## Unused key can be commented out.</span><br><span class="line"># 下方超链接</span><br><span class="line">links:</span><br><span class="line">Blog: /archives</span><br><span class="line"># Category:</span><br><span class="line"># Tags:</span><br><span class="line"># Link:</span><br><span class="line"># Resume:</span><br><span class="line"># Publish:</span><br><span class="line"># Trophy:</span><br><span class="line"># Gallery:</span><br><span class="line"># RSS:</span><br><span class="line"># AliPay:</span><br><span class="line">ZhiHu: https://www.zhihu.com/people/sirice</span><br><span class="line"># LinkedIn:</span><br><span class="line"># FaceBook:</span><br><span class="line"># Twitter:</span><br><span class="line"># Skype:</span><br><span class="line"># CodeSandBox:</span><br><span class="line"># CodePen:</span><br><span class="line"># Sketch:</span><br><span class="line"># Gitlab:</span><br><span class="line"># Dribbble:</span><br><span class="line">Instagram:</span><br><span class="line">Reddit:</span><br><span class="line"># YouTube:</span><br><span class="line"># QQ:</span><br><span class="line"># Weibo:</span><br><span class="line"># WeChat:</span><br><span class="line">Github: https://github.com/Siricee</span><br><span class="line"># how links show: you have 2 choice--text or icon. 图标 or 文字</span><br><span class="line">links_text_enable: false</span><br><span class="line">links_icon_enable: true</span><br><span class="line"># Post page</span><br><span class="line">## Post_meta</span><br><span class="line">post_meta_enable: true</span><br><span class="line">post_author_enable: true</span><br><span class="line">post_date_enable: true</span><br><span class="line">post_category_enable: true</span><br><span class="line">## Post copyright</span><br><span class="line">post_copyright_enable: true</span><br><span class="line">post_copyright_author_enable: true</span><br><span class="line">post_copyright_permalink_enable: true</span><br><span class="line">post_copyright_license_enable: true</span><br><span class="line">post_copyright_license_text: Copyright (c) 2019 &lt;a</span><br><span class="line">href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;CC-BY-NC-4.0&lt;/a&gt;</span><br><span class="line">LICENSE</span><br><span class="line">post_copyright_slogan_enable: true</span><br><span class="line">post_copyright_slogan_text: Do you believe in &lt;strong&gt;DESTINY&lt;/strong&gt;?</span><br><span class="line">## toc</span><br><span class="line">post_toc_enable: true</span><br><span class="line"># Page</span><br><span class="line">page_title_enable: true</span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: MMMM D, YYYY</span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"># stylesheets loaded in the &lt;head&gt;</span><br><span class="line">stylesheets:</span><br><span class="line">- /css/style.css</span><br><span class="line"># scripts loaded in the end of the body</span><br><span class="line">scripts:</span><br><span class="line">- /js/script.js</span><br><span class="line">- /js/tocbot.min.js</span><br><span class="line"># tscanlin/tocbot: Build a table of contents from headings in an HTML</span><br><span class="line">document.</span><br><span class="line"># https://github.com/tscanlin/tocbot</span><br><span class="line"></span><br><span class="line"># plugin functions</span><br><span class="line">## Mathjax: Math Formula Support</span><br><span class="line">## https://www.mathjax.org</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax:</span><br><span class="line">enable: true</span><br><span class="line">import: demand # global or demand</span><br><span class="line">## global: all pages will load mathjax,this will degrade performance and</span><br><span class="line">some grammers may be parsed wrong.</span><br><span class="line">## demand: Recommend option,if your post need fomula, you can declare</span><br><span class="line">&#x27;mathjax: true&#x27; in Front-matter</span><br></pre></td></tr></table></figure></blockquote><h2 id="将博客部署在GitHub上"><a href="#将博客部署在GitHub上" class="headerlink" title="将博客部署在GitHub上"></a>将博客部署在GitHub上</h2><ol><li>点击 Start project 或者下面的 new repository 建立一个新的仓库，注意Github 仅能使用一个同 名仓库的代码托管一个静态站点，这里. 注意仓库名一定要是： 用户名.github.io    </li><li>配置 SSH key ，要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 作准备。</li></ol><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&#x27;上面的邮箱&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>按照提示完成三次回车，便可生成 ssh key，采用以下指令也可以查看自己的ssh：</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></blockquote><p> 首次使用还须要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证实添加成功。 </p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure></blockquote><p>登陆 Github 上添加刚刚生成的SSH key，按如下步骤添加，右上角点击头像-&gt; settings -&gt; SSH and GPG keys，建立一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认建立，这样在你 的 SSH keys 列表里就会看到你刚刚添加的密钥。</p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/image-20240126194544764.png" alt="image-20240126194544764"></p><h2 id="SSH无法添加信任的主机列表"><a href="#SSH无法添加信任的主机列表" class="headerlink" title="!!!SSH无法添加信任的主机列表"></a>!!!SSH无法添加信任的主机列表</h2><blockquote><p>这是我搭建博客中遇到的最大的问题,一开始我以为是公钥添加问题,中途尝试了许多方法</p><ol><li>运行npm install 时，卡在sill idealTree buildDeps没有反应，内心OS:明明早就配过淘宝镜像源，果然没用<br>检查node和npm，发现版本不匹配，按官网匹配表，npm版本太高，于是升级node，还是不行,npm失灵<br>删除.npmrc<br>清理缓存npm cache clean –force</li><li>都不行,最后排查才发现,忘记把github主机添加到本机ssh可信列表</li></ol></blockquote><p>第一次使用要把github主机添加到本机ssh可信列表,</p><p>但是添加的时候有可能会失败,这是官方文档中的原文</p><p>“有时，防火墙会完全拒绝允许 SSH 连接。 如果无法选择使用<a href="https://docs.github.com/zh/github/getting-started-with-github/caching-your-github-credentials-in-git">具有凭据缓存的 HTTPS 克隆</a>，可以尝试使用通过 HTTPS 端口建立的 SSH 连接克隆”</p><p>那么怎么解决呢,对照官方文档就能解决,大致步骤如下,建议对照详细官方文档<br>最终解决方法<a href="https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">HTTPS 端口使用 SSH</a></p><p>1.在控制台输入以下命令查看是否能连接到github,如果回复为Hi xxxxx! 表示连接成功,已加入可信列表</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br><span class="line"></span><br><span class="line">&gt; Hi USERNAME! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>如果不行,尝试一下命令:   ssh -T -p 443ssh:&#x2F;&#x2F;<a href="mailto:&#x67;&#105;&#116;&#x40;&#x73;&#115;&#104;&#x2e;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x73;&#115;&#104;&#x2e;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a>,这个可以按照提示建立许可连接</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> <span class="literal">-p</span> <span class="number">443</span> git@ssh.github.com</span><br><span class="line">&gt; Hi <span class="string">&#x27;你的id&#x27;</span>!<span class="string">&quot; You&#x27;ve successfully authenticated, but GitHub does not provide shell access.&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>如果你能在端口 443 上通过 SSH 连接到 <code>git@ssh.github.com</code>，则可覆盖你的 SSH 设置来强制与 GitHub.com 的任何连接均通过该服务器和端口运行。</p><p>到此为止,问题解决得差不多了</p><p>在输入命令 git clone ssh:&#x2F;&#x2F;<a href="mailto:&#x67;&#105;&#116;&#64;&#115;&#115;&#104;&#46;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#115;&#115;&#104;&#46;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a>:443&#x2F;0zxm&#x2F;0zxm.github.io时就能够正常clone仓库, 但是每次都输入更长的url难免繁琐,所以可以在你生成密钥的文件夹内新建一个config文件,输入以下内容保存:</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"> Hostname ssh.github.com</span><br><span class="line"> Port 443</span><br><span class="line"> User git</span><br></pre></td></tr></table></figure></blockquote><p>你可以通过再次连接到 GitHub.com 来测试这是否有效：</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br><span class="line">&gt; Hi USERNAME!<span class="string">&quot; You&#x27;ve successfully authenticated, but GitHub does not&quot;</span></span><br><span class="line">&gt; provide shell access.</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>此时，本地和Github的工作做得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署教程。</p></li><li><p>先不着急，部署以前还须要修改配置和安装部署插件。</p></li><li><p>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上以下配置。 </p></li><li><p>第二要安装一个部署插件 hexo-deployer-git，打开“Git Bach”，输如以下指令：</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>最后执行如下两条命令就能够部署上传啦，如下</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 先生成</span></span><br><span class="line">hexo d <span class="comment"># 部署到Github上</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>g 是 generate 缩写，d 是 deploy 缩写 这时用浏览器输入 用户名.github.io 就可以访问刚才的网站</p></li></ul><h2 id="博客-Git常用指令"><a href="#博客-Git常用指令" class="headerlink" title="博客   Git常用指令"></a>博客   Git常用指令</h2><ul><li><p>npm cache clean –force  清理缓存</p></li><li><p>hexo g 生成</p></li><li><p>hexo sever 使用本地服务器构建网页 一般地址是localhost:4000&#x2F;</p></li><li><p>hexo deploy 上传到github项目</p></li><li><p>hexo clean</p></li></ul><h4 id="清除空白categorys和tags"><a href="#清除空白categorys和tags" class="headerlink" title="清除空白categorys和tags"></a>清除空白categorys和tags</h4><p>在发布文章后，有时候会发现标签或分类的描述不够准确，需要修改tags或者categories的内容。</p><p>但是，当某个标签被完全替代，没有文章使用这个标签之后，会发现在标签列表里还是会出现这个标签，点击进去却并没有内容，这非常影响使用体验。</p><p>如何清除无用的标签索引呢，可以使用<code>hexo clean</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d -g</span></span><br></pre></td></tr></table></figure><blockquote><p>命令<code>hexo s -g</code>执行中时，命令<code>hexo clean</code>会没有效果，需要先终止 hexo server服务</p></blockquote><h4 id="写带有图片的文章"><a href="#写带有图片的文章" class="headerlink" title="写带有图片的文章"></a>写带有图片的文章</h4><p><a href="https://blog.csdn.net/qq_41907806/article/details/109064385">hexo博客中如何插入图片-CSDN博客</a></p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/image-20240127141305597-1706432584388-1.png" alt="image-20240127141305597"></p><p>然后记得在hexo的source文件夹下找到该.md文件,删除每一个图片路径的文章名</p><h4 id="注释bug"><a href="#注释bug" class="headerlink" title="注释bug"></a>注释bug</h4><p><img src="/2024/06/21/hexo-da-jian-bo-ke/%E6%B3%A8%E9%87%8Abug.png" alt="alt text"></p><p><a href="https://blog.csdn.net/qq_39698985/article/details/115448040">解决方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/06/21/test/"/>
      <url>/2024/06/21/test/</url>
      
        <content type="html"><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><ul><li>数据库概论<br><a href="PDFs\数据库系统概论\SQL语言.pdf">SQL语言.pdf&lt;\a&gt;<br><a href="PDFs\数据库系统概论\大题解题方法.pdf">大题解题方法.pdf&lt;\a&gt;<br><a href="PDFs\数据库系统概论\范式级别判断.pdf">范式级别判断.pdf&lt;\a&gt;<br><a href="PDFs\数据库系统概论\选填题知识点.pdf">选填题知识点.pdf&lt;\a&gt;</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
