<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pyinstaller使用</title>
      <link href="/2024/08/13/pyinstaller-shi-yong/"/>
      <url>/2024/08/13/pyinstaller-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="pyinstaller-入门"><a href="#pyinstaller-入门" class="headerlink" title="pyinstaller 入门"></a>pyinstaller 入门</h2><ul><li>Pyat5 的安装程序开发</li><li>PyQt6 的安装程序开发<ol><li>编写好的程序编译成可执行文件:</li><li>用 zip 打包，基本可以压缩到 1&#x2F;3 大小;</li><li>然后再用 pyqt 写一个 setup 安装程序，安装到指定目录(安装的过程实际就是把文件解压、拷贝到指定目录、注册到注册表中)</li></ol></li></ul><h2 id="pyinstaller-简介"><a href="#pyinstaller-简介" class="headerlink" title="pyinstaller 简介"></a>pyinstaller 简介</h2><p>PyInstaller bundles a Python application and all its dependencies into a singlepackage.The user can run the packaged app without installing a Pythoninterpreter or any modules. Pyinstaller supports Python 3.7 and newer, andcorrectly bundles many major Python packages such as numpy, matplotlib, PyQtwxPython, and others.<br>PyInstaller is tested against Windows, MacOS X, and Linux. However, it is not across-compiler: to make a Windows app vou run PyInstaller on Windows, and tomake a tinux app you cor it on linps, etc, ioyinsts ler has beer asedst them isnot part of our continuous integration tests, and the development team offersno guarantee (all code for these platforms comes from external contributionsthat PyInstaller will work on these platforms or that they will continue to besupported.)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>pip install pyinstaller -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p><p><a href="https://pyinstaller.org/en/stable">官网</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>进入到 pyinstaller 目录下，执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyinstaller <span class="token parameter variable">-F</span> main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数:</p><ul><li>-F: 打包成一个 exe 文件</li><li>-w: 打包成一个无控制台窗口的 exe 文件</li><li>-i: 打包成带图标的 exe 文件(后面跟图标文件路径)</li><li>-n: 打包成指定名称的 exe 文件(后面跟文件名)</li><li>-D: 打包成一个文件夹，里面包含 exe 文件和其他文件</li></ul><h2 id="打包后的文件"><a href="#打包后的文件" class="headerlink" title="打包后的文件"></a>打包后的文件</h2><ul><li>dist 文件夹: 包含打包后的文件</li><li>main.spec 文件: 包含打包的配置信息</li><li>main.exe 文件: 打包后的可执行文件</li></ul><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-h, –help</td><td>查看该模块的帮助信息</td></tr><tr><td>-F, –onefile</td><td>产生单个的可执行文件</td></tr><tr><td>-D, –onedir</td><td>产生一个目录（包含多个文件）作为可执行程序</td></tr><tr><td>-a, –ascii</td><td>不包含 Unicode 字符集支持</td></tr><tr><td>-d, –debug</td><td>产生 debug 版本的可执行文件</td></tr><tr><td>-w, –windowed, –noconsole</td><td>指定程序运行时不显示命令行窗口（仅对 Windows 有效）</td></tr><tr><td>-c, –nowindowed, –console</td><td>指定使用命令行窗口运行程序（仅对 Windows 有效）</td></tr><tr><td>-o DIR, –out&#x3D;DIR</td><td>指定 spec 文件的生成路径。如果未指定，则默认使用当前目录来生成 spec 文件</td></tr><tr><td>-p DIR, –path&#x3D;DIR</td><td>设定 Python 导入模块的路径（和设置 PYTHONPATH 环境变量的作用相似）。也可使用路径分隔符（Windows 使用分号，Linux 使用冒号）来分隔多个路径</td></tr><tr><td>-n NAME, –name&#x3D;NAME</td><td>指定项目（产生的 spec）的名字。如果省略该选项，那么第一个脚本文件的主文件名将作为 spec 的名字</td></tr></tbody></table><h3 id="pyqt-打包后的图标丢失问题"><a href="#pyqt-打包后的图标丢失问题" class="headerlink" title="pyqt 打包后的图标丢失问题"></a>pyqt 打包后的图标丢失问题</h3><p>在使用 pyinstaller 打包 pyqt 程序时，如果程序中使用了图标，打包后的程序的图标会丢失。</p><p>解决方法：</p><ol><li>把图标文件夹复制放到程序所在目录下，并在程序中指定图标路径。</li><li>编译完成后修改.spec 文件，在其中添加图标文件路径(双斜杠)<br><img src="/2024/08/13/pyinstaller-shi-yong/image.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyinstaller </tag>
            
            <tag> pyqt </tag>
            
            <tag> 打包程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy框架</title>
      <link href="/2024/08/04/scrapy-kuang-jia/"/>
      <url>/2024/08/04/scrapy-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="Scrapy框架简介"><a href="#Scrapy框架简介" class="headerlink" title="Scrapy框架简介"></a>Scrapy框架简介</h2><p><a href="https://docs.scrapy.org/en/latest/">Scrapy官方文档</a></p><p><a href="https://www.bilibili.com/video/BV1jx411b7E3/">B站黑马教程</a></p><p><a href="https://www.bilibili.com/video/BV1Db4y1m7Ho/">B站尚硅谷教程</a></p><p><a href="http://0zxm.github.io/PDFs/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81.zip">代码文件</a></p><h3 id="scrapy框架"><a href="#scrapy框架" class="headerlink" title="scrapy框架"></a>scrapy框架</h3><ul><li>Scrapy是用纯Python实现一个为了爬取网站数据、提取结构性数据而编写的应用框架，用途非常广泛。</li><li>框架的力量，用户只需要定制开发几个模块就可以轻松的实现一个爬虫，用来抓取网页内容以及各种图片，非常之方便。</li><li>Scrapy 使用了 <code>Twisted[&#39;twrstrd]</code>(其主要对手是Tornado)异步网络框架来处理网络通讯，可以加快我们的下载速度，不用自己去实现异步框架，并且包含了各种中间件接口，可以灵活的完成各种需求</li></ul><h3 id="scrapy是什么？"><a href="#scrapy是什么？" class="headerlink" title="scrapy是什么？"></a>scrapy是什么？</h3><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理<br>或存储历史数据等一系列的程序中。</p><h3 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">安装非Python的依赖 sudo apt-get install python-dev python-pip libxm12-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev(Ubuntu下安装)pip install scrapy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装过程中出错：</p><ol><li><p>如果安装有错误！！！！</p> <pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">pip install Scrapybuilding 'twisted.test.raiser' extensionerror: Microsoft Visual C++ 14.0 is required. Get it with "Microsoft Visual C++ Build Tools": http://landinghub.visualstudio.com/visual‐cpp‐build‐tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>解决方案：<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a>         </p><p>下载twisted对应版本的<code>whl</code>文件（如我的Twisted‐17.5.0‐cp36‐cp36m‐win_amd64.whl），cp后面是python版本，amd64代表64位，运行命令：<br>pip install C:\Users...\Twisted‐17.5.0‐cp36‐cp36m‐win_amd64.whl        </p><p>pip install Scrapy        </p><ol start="2"><li>如果再报错: python ‐m pip install ‐‐upgrade pip            </li><li>如果再报错  win32</li></ol><p>解决方法：<br>   pip install pypiwin32      </p><ol start="4"><li>再报错：使用anaconda<br> 使用步骤：        <ul><li>打开anaconda           </li><li>点击environments            </li><li>点击not installed             </li><li>输入scrapy             </li><li>apply(应用)             </li><li>在<strong>pycharm</strong>中选择anaconda的环境</li></ul></li></ol><h2 id="Scrapy架构图-绿线是数据流向"><a href="#Scrapy架构图-绿线是数据流向" class="headerlink" title="Scrapy架构图(绿线是数据流向)"></a>Scrapy架构图(绿线是数据流向)</h2><img src="/2024/08/04/scrapy-kuang-jia/scrapy架构图.png" alt="image" style="zoom: 67%;"><ul><li><code>Scrapy Engine</code>(引擎):负责<code>Spider</code>、<code>Item Pipeline</code>、<code>Downloader</code>、<code>Scheduler</code> 中间的通讯，信号、数据传递等。</li><li><code>Scheduler</code>(调度器):它负责接受<strong>引擎</strong>发送过来的Request请求，并按照一定的方式进行整理排列，入队，当<strong>引擎</strong> 需要时，交还给<strong>引擎</strong>。</li><li><code>Downloader</code>(下载器):负责下载 <code>Scrapy Engine</code>(引擎)发送的所有Requests请求，并将其获取到的Responses交还给 <code>Scrapy Engine</code>(引擎)，由引擎交给 <code>Spider</code> 来处理。</li><li><code>Item Pipeline</code>(管道):它负责处理 <code>Spider</code> 中获取到的 Item(有用的数据，需要存储的)，并进行进行后期处理(详细分析、过滤、存储等)的地方.</li><li><code>Downloader middlewares</code>(下载中间件):你可以当作是一个可以自定义扩展下载功能的组件。</li><li><code>Spider Middlewares</code>(spider中间件):你可以理解为是一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<strong>通信</strong>的功能组件(比如进入<code>Spider</code>的<strong>Responses</strong>;和从<code>Spider</code>出去的<strong>Requests</strong>)</li></ul><h3 id="scrapy架构流程"><a href="#scrapy架构流程" class="headerlink" title="scrapy架构流程"></a>scrapy架构流程</h3><ul><li><p>（1）<strong>引擎</strong>                       ‐‐‐》自动运行，无需关注，会自动组织所有的请求对象，分发给下载器              </p></li><li><p>（2）<strong>下载器</strong>             ‐‐‐》从引擎处获取到请求对象后，请求数据                     </p></li><li><p>（3）<strong>Spiders</strong>          ‐‐‐》Spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。 换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</p></li><li><p>（4）<strong>调度器</strong>              ‐‐‐》有自己的调度规则，无需关注                     </p></li><li><p>（5）<strong>管道（Item Pipeline）</strong>       ‐‐‐》最终处理数据的管道，会预留接口供我们处理数据.当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。每个itempipeline组件(有时称之为<strong>“Item Pipeline”</strong>)是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</p></li><li><p>以下是item pipeline的一些典型应用：</p><ol><li><p>清理HTML数据</p></li><li><p>验证爬取的数据(检查item包含某些字段)</p></li><li><p>查重(并丢弃)</p></li><li><p>将爬取结果保存到数据库中</p></li></ol></li></ul><p><img src="/2024/08/04/scrapy-kuang-jia/scrapy%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image-20240802222000457"></p><h2 id="Scrapy项目的运行流程"><a href="#Scrapy项目的运行流程" class="headerlink" title="Scrapy项目的运行流程"></a>Scrapy项目的运行流程</h2><p>代码写好，程序开始运行 </p><ol><li>引擎: Hi!Spider,你要处理哪一个网站?</li><li>Spider: 老大要我处理xxxx.com。</li><li>引擎: 你把第一个需要处理的URL给我吧。</li><li>Spider: 给你，第一个URL是 xxxxxxx.com。</li><li>引擎: Hi!调度器，我这有request请求,你帮我排序入队一下</li><li>调度器: 好的，正在处理,你等一下。</li><li>引擎: Hi!调度器，把你处理好的request请求给我。</li><li>调度器: 给你，这是我处理好的request</li><li>引擎: Hi!下载器，你按照老大的<code>下载中间件</code>的设置帮我下载一下这个request请求</li><li>下载器: 好的!给你，这是下载好的东西。(如果失败:sorry，这个request下载失败了。然后<code>引擎</code>告诉<code>调度器</code>，这个request下载失败了，你记录一下，我们待会儿再下载)</li><li>引擎: Hi! spider，这是下载好的东西，并且已经按照老大的<code>下载中间件</code>处理过了，你自己处理一下(注意!这儿responses默认是交给 <strong>def parse()</strong> 这个函数处理的)</li><li>Spider: (处理完毕数据之后对于需要跟进的URL)，Hi!引擎，我这里有两个结果，这个是我需要<br>跟进的URL，还有这个是我获取到的Item数据。</li><li>引擎: Hi !管道 我这儿有个Item你帮我处理一下!调度器!这是需要跟进URL你帮我处理下。然后从第四步开始循环，直到获取完老大需要全部信息。</li><li>管道、调度器: 好的，现在就做!</li></ol><p><strong>注意!只有当<code>调度器</code>中不存在任何request了,整个程序才会停止，(也就是说,对于下载失败的URL,Scrapy也会重新下载。)</strong></p><h2 id="制作Scrapy爬虫一共四步"><a href="#制作Scrapy爬虫一共四步" class="headerlink" title="制作Scrapy爬虫一共四步"></a>制作Scrapy爬虫一共四步</h2><ul><li><p>新建项目(scrapy start project xxx):新建一个新的爬虫项词。</p></li><li><p>明确目标(编写items.py):明确你想要抓取的目标。</p></li><li><p>制作爬虫(spiders&#x2F;xxspider.py):制作爬虫开始爬取网页。</p></li><li><p>存储内容(pipelines.py):设计管道存储爬取内容。</p></li></ul><h3 id="1-创建scrapy项目："><a href="#1-创建scrapy项目：" class="headerlink" title="1.创建scrapy项目："></a>1.创建scrapy项目：</h3><pre><code>  终端输入  `scrapy startproject  项目名称`    </code></pre><p>​ </p><h3 id="2-项目组成："><a href="#2-项目组成：" class="headerlink" title="2.项目组成："></a>2.项目组成：</h3><p>​          spiders<br>​              <strong>init</strong>.py<br>​              自定义的爬虫文件.py        ‐‐‐》由我们自己创建，是实现爬虫核心功能的文件<br>​          <strong>init</strong>.py                  </p><p>​          items.py                     ‐‐‐》定义数据结构的地方，是一个继承自scrapy.Item的类<br>​          middlewares.py               ‐‐‐》中间件   代理<br>​          pipelines.py         ‐‐‐》管道文件，里面只有一个类，用于处理下载数据的后续处    理,默认是300优先级，值越小优先级越高（1‐1000）                                       </p><p>​          settings.py          ‐‐‐》配置文件  比如：是否遵守robots协议，User‐Agent    定义   </p><h3 id="3-创建爬虫文件："><a href="#3-创建爬虫文件：" class="headerlink" title="3.创建爬虫文件："></a>3.创建爬虫文件：</h3><ul><li><p>（1）跳转到spiders文件夹   cd 目录名字&#x2F;目录名字&#x2F;spiders           </p></li><li><p>（2）scrapy genspider 爬虫名字 网页的域名             </p></li><li><p>爬虫文件的基本组成：</p><ul><li>继承scrapy.Spider类                                <ol><li>name &#x3D; ‘baidu’        ‐‐‐》 运行爬虫文件时使用的名字</li><li>allowed_domains       ‐‐‐》爬虫允许的域名，在爬取的时候，如果不是此域名之下的url，会被过滤掉</li><li>start_urls            ‐‐‐》 声明了爬虫的起始地址，可以写多个url，一般是一个                        </li><li>parse(self, response) ‐‐‐》解析数据的回调函数<ol><li>response.text         ‐‐‐》响应的是字符串</li><li>response.body         ‐‐‐》响应的是二进制文件</li><li>response.xpath()      –‐》xpath方法的返回值类型是selector列表</li><li>extract()             ‐‐‐》提取的是selector对象的是data</li><li>extract_first()       ‐‐‐》提取的是selector列表中的第一个数据</li></ol></li></ol></li></ul></li></ul><h3 id="4-运行爬虫文件"><a href="#4-运行爬虫文件" class="headerlink" title="4.运行爬虫文件:"></a>4.运行爬虫文件:</h3><pre><code>`scrapy crawl 爬虫名称`注意:应在spiders文件夹内执行</code></pre><h2 id="Scrapy框架终端基本命令"><a href="#Scrapy框架终端基本命令" class="headerlink" title="Scrapy框架终端基本命令"></a>Scrapy框架终端基本命令</h2><ul><li>scrapy bench 测试性能(pages&#x2F;min)</li></ul><p><img src="/2024/08/04/scrapy-kuang-jia/scrapy_fetch.png" alt="scrapy_fetch"></p><ul><li>scrapy fetch ‘<a href="http://www.baidu.com’/">http://www.baidu.com’</a> 爬取百度页面的源代码,DEBUG信息(200)表示爬虫程序正常运行</li><li>genspider 创建爬虫</li><li>runspider 启动爬虫</li><li>shell 使用scrapy的shell环境</li><li>startproject 创建项目</li><li>version 显示版本</li><li>view 使用浏览器视图</li><li>list 显示当前项目有多少个爬虫程序</li></ul><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>创建一个Scrapy项目</li><li>定义提取的结构化数据(Item)</li><li>编写爬取网站的 Spider 并提取出结构化数据(Item)</li><li>编写 Item Pipelines 来存储提取到的Item(即结构化数据)</li></ul><h3 id="1-新建爬虫项目"><a href="#1-新建爬虫项目" class="headerlink" title="1.新建爬虫项目"></a>1.新建爬虫项目</h3><p>在开始爬取之前，必须创建一个新的Scrapy项目。进入自定义的项目目录中，运行下列命令<br><code>scrapy startproject mySpider</code></p><h3 id="2-新建爬虫"><a href="#2-新建爬虫" class="headerlink" title="2.新建爬虫"></a>2.新建爬虫</h3><p>跳转到mySpider&#x2F;mySpider&#x2F;spiders文件夹下</p><p><code>scrapy genspider 爬虫名 网页域名</code></p><p>网页域名的作用,让爬虫程序只在此域名下爬取</p><p>会在spiders文件夹下生成<code>爬虫名.py文件</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#Spider类</span>    name <span class="token operator">=</span> <span class="token string">"itcast"</span><span class="token comment"># 爬虫名称</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"www.itcast.cn"</span><span class="token punctuation">]</span><span class="token comment"># 爬虫运行的域名</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"http://www.itcast.cn"</span><span class="token punctuation">]</span><span class="token comment"># 起始url,爬虫程序启动的第一次请求目的url</span>    <span class="token triple-quoted-string string">"""处理响应数据的方法"""</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token comment"># pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面还会学习到<code>CrawlSpider</code>类</p><h3 id="3-运行和检测爬虫程序"><a href="#3-运行和检测爬虫程序" class="headerlink" title="3.运行和检测爬虫程序"></a>3.运行和检测爬虫程序</h3><ul><li><strong>先看项目能不能正常运行在修改代码</strong></li></ul><p><img src="/2024/08/04/scrapy-kuang-jia/crawl.png" alt="image-20240802130119274"></p><p>此时,输入scrapy会多一些可用指令</p><ul><li>scrapy check 爬虫名检查爬虫是否正常</li><li>scrapy crawl 爬虫名        启动爬虫程序</li></ul><p><img src="/2024/08/04/scrapy-kuang-jia/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt="image-20240802132150074"></p><p>下面来简单介绍一下各个主要文件的作用:</p><ul><li>scrapy.cfg :项目的配置文件</li><li>Itcast&#x2F;:项目的Python模块，将会从这里引用代码</li><li>Itcast&#x2F;items.py:项目的目标文件</li><li>Itcast&#x2F;pipelines.py:项目的管道文件</li><li>Itcast&#x2F;settings.py:项目的设置文件</li><li>Itcast&#x2F;spiders&#x2F;:存储爬虫代码目录</li></ul><h3 id="4-明确目标-Itcast-items-py"><a href="#4-明确目标-Itcast-items-py" class="headerlink" title="4.明确目标(Itcast&#x2F;items.py)"></a>4.明确目标(Itcast&#x2F;items.py)</h3><p>我们打算抓取:<a href="http://www.itcast.cn/channel/teacher.shtml">http://www.itcast.cn/channel/teacher.shtml</a> 网站里的所有讲师的姓名、职称和个人信息。</p><ol><li>打开mySpider目录下的items.py,</li><li>Item 定义结构化数据字段用来保存爬取到的数据，有点像Python中的dict，但是提供了一些额外的保护减少错误。</li><li>可以通过创建一个 <code>scrapy.Item</code> 类，并且定义类型为 <code>scrapy.Field</code> 的类属性来定义一个 Item (可以理解成类似于ORM的映射关系)。</li><li>接下来，创建一个 <code>ItcastItem</code>类，和构建item模型(model)。</li></ol><h3 id="5-制作爬虫"><a href="#5-制作爬虫" class="headerlink" title="5.制作爬虫"></a>5.制作爬虫</h3><h4 id="爬数据-Itcast-spiders-itcast-py"><a href="#爬数据-Itcast-spiders-itcast-py" class="headerlink" title="爬数据(Itcast&#x2F;spiders&#x2F;itcast.py)"></a>爬数据(Itcast&#x2F;spiders&#x2F;itcast.py)</h4><p>在当前目录下输入命令，将在 myspider&#x2F;spider 目录下创建一个名为 itcast 的爬虫，并指定爬取域的范围:<code>Scrapy genspider itcast &quot;itcast.cn&quot;</code></p><p>打开 <code>Itcast/spider</code> 目录里的 itcast.py，默认增加了下列代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"itcast"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"www.itcast.cn"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"http://www.itcast.cn"</span><span class="token punctuation">]</span>    <span class="token triple-quoted-string string">"""处理响应数据的方法"""</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实也可以由我们自行创建 <strong>itcast.py</strong> 并编写上面的代码，只不过使用命令可以免去编写固定代码的麻烦</p><p>要建立一个Spider，你必须用scrapy.Spider类创建一个子类，并确定了<strong>三个强制的属性</strong>和<strong>一个方法</strong>。</p><ul><li><p><code>name = “”</code>: 这个爬虫的识别名称，必须是唯一的，在不同的爬虫必须定义不同的名字。</p></li><li><p><code>allow_domains = []</code>是搜索的域名范围，也就是爬虫的约束区域,规定爬虫只爬取这个域名下的网<br>  页，不存在的URL会被忽略。</p></li><li><p><code>start_ur1s = ()</code>:爬取的URL元祖&#x2F;列表。爬虫从这里开始抓取数据，所以，第一次下载的数据将会从这些URL开始。其他子URL将会从这些起始URL中继承性生成。</p></li><li><p><code>parse(se1f，response)</code>:解析的方法，每个初始URL完成下载后将被调用，调用的时候传入从每一个URL传回的Response对象来作为唯一参数，主要作用如下:</p><ol><li>负责解析返回的网页数据(response.body)，提取结构化数据(生成item)</li><li>生成需要下一页的URL请求。</li></ol></li></ul><p>将start_urls的值修改为需要爬取的第一个url</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">start_urls <span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"http://ww.itcast.cn/channel/teacher.shtml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改parse()方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"teacher.html"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后运行一下看看，在Itcast目录下执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scrapy crawl itcast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是的，就是 itcast,看上面代码，它是 <strong>ItcastSpider</strong> 类的 name 属性,也就是使用 <strong>scrapy genspider</strong> 命令的爬虫名。</p><p>一个Scrapy爬虫项目里，可以存在多个爬虫。各个爬虫在执行时，就是按照 name 属性来区分。</p><p>运行之后，如果打印的日志出现<code>[scrapy]INFO:Spider closed(finished)</code>，代表执行完成。之后当前文件夹中就出现了一个 teacher.html 文件，里面就是我们刚刚要爬取的网页的全部源代码信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 注意，Python2.x默认编码环境是ASCII码,当和取回的数据编码格式不一致时，可能会造成乱码;</span><span class="token comment"># 我们可以指定保存内容的编码格式，一般情况下，我们可以在代码最上方添加:</span><span class="token keyword">import</span> sys<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token comment">#这三行代码是Python2.x里解决中文编码的万能钥匙，经过这么多年的吐槽后Python3学乖了，默认编码是Unicode了..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取数据"><a href="#取数据" class="headerlink" title="取数据"></a>取数据</h4><p>爬取整个网页完毕,接下来的就是取数据过程了,首先观察</p><p><img src="/2024/08/04/scrapy-kuang-jia/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.png"></p><p>很明显可以看出网页结构如下图所示</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/teacher/javaee/20220302113627师老师高级讲师2009年入行.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>li_txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>师老师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>高级讲师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>13年的项目开发和教育培训经验，精通Java EE的主流开发框架、Oracle和MySQL等关系型数据库。曾在中科院遥感应用研究所、慧点科技、达利本斯等公司担任软件开发工程师、项目总监，带团队做过边防部队、人寿集团、平安集团等多个企业的大型项目，之后在互联网公司知果科技担任开发经理，完成知果果网的核心产品开发。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以,直接使用xpath来提取数据</p><p>我们先引用<code>Itcast/items.py</code>里面的<strong>ItcastItem</strong>类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Itcast<span class="token punctuation">.</span>items <span class="token keyword">import</span> ItcastItem导包从项目的根目录下开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后将我们得到的数据封装到一个<strong>Itcastitem</strong>对象中，可以保存每个老师的属性:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> Itcast<span class="token punctuation">.</span>Itcast<span class="token punctuation">.</span>items <span class="token keyword">import</span> ItcastItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Spider类</span>    name <span class="token operator">=</span> <span class="token string">"itcast"</span>  <span class="token comment"># 爬虫名称</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"www.itcast.cn"</span><span class="token punctuation">]</span>  <span class="token comment"># 爬虫运行的域名</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"http://www.itcast.cn/channel/teacher.shtml"</span>    <span class="token punctuation">]</span>  <span class="token comment"># 起始url,爬虫程序启动的第一次请求目的url</span>    <span class="token triple-quoted-string string">"""处理响应数据的方法"""</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"teacher.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment"># 存放老师信息的集合</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"//div[@class=' tea_txt']//ul//li//div[@class='li_txt']"</span>        <span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># each是一个结点,对节点使用xpath方法需要加'./'表示当前节点下</span>                        <span class="token comment"># 将我们得到的数据封装成一个ItcastItem对象</span>            item <span class="token operator">=</span> ItcastItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># extract()方法返回的都是unicode字符串</span>            name <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./h3/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./h4/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./p/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># xpath返回的是包含一个元素的列表</span>            item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"info"</span><span class="token punctuation">]</span> <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># 直接返回最后数据</span>        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先不处理管道,后面会详细解释</p><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><p>scrapy保存信息的最简单的方法主要有四种，-o输出指定格式的文件，命令如下</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">如果spiders&#x2F;itcast.py中使用return 返回的是一个ItcastItem对象,会自动识别给piplines管道来处理数据如果return的是ItcastItem对象的列表,可以使用以下命令来进行持久化存储# json格式，默认为Unicode编码scrapy crawl itcast -o teachers.json# json lines格式，默认为Unicode编码scrapy crawl itcast -o teachers.jsonl# csv 逗号表达式，可用Exce1打开scrapy crawl itcast -o teachers.csv# xml格式scrapy crawl itcast -o teachers.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>如果将代码改成下面形式，结果完全一样。请思考<strong>yield</strong>在这里的作用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> Itcast<span class="token punctuation">.</span>items <span class="token keyword">import</span> ItcastItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Spider类</span>    name <span class="token operator">=</span> <span class="token string">"itcast"</span>  <span class="token comment"># 爬虫名称</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"www.itcast.cn"</span><span class="token punctuation">]</span>  <span class="token comment"># 爬虫运行的域名</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"http://www.itcast.cn/channel/teacher.shtml"</span>    <span class="token punctuation">]</span>  <span class="token comment"># 起始url,爬虫程序启动的第一次请求目的url</span>    <span class="token triple-quoted-string string">"""处理响应数据的方法"""</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"teacher.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment"># 存放老师信息的集合</span>        <span class="token comment"># items = []</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"//div[@class=' tea_txt']//ul//li//div[@class='li_txt']/"</span>        <span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 将我们得到的数据封装成一个ItcastItem对象</span>            item <span class="token operator">=</span> ItcastItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># extract()方法返回的都是unicode字符串</span>            name <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./h3/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./h4/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info <span class="token operator">=</span> each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./p/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># xpath返回的是包含一个元素的列表</span>            item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"info"</span><span class="token punctuation">]</span> <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        <span class="token comment"># items.append(item)</span>                        <span class="token comment"># 将获取到的数据交给piplines,后继续回来执行</span>            <span class="token keyword">yield</span> item        <span class="token comment"># 直接返回最后数据</span>        <span class="token comment"># return items</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>yield</strong>的作用是,执行到yield后,不会像return那样直接返回,函数结束,而是会在返回此次后继续到上次执行的位置继续执行,<strong>return每次调用返回的值都一样</strong></p></li><li><p>带有 <strong>yield</strong> 的函数不再是一个普通函数，而是一个生成器 generator，可用于迭代</p></li><li><p>yield 是一个类似 return 的关键字，迭代一次遇到 <strong>yield</strong> 时就返回 yield 后面(右边)的值。重点是:下一次迭代时，从上一次迭代遇到的yield后面的代码(下一行)开始执行</p></li><li><p>简要理解:yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后(下一行)开始</p></li></ul><h4 id="管道处理保存数据-piplines-py"><a href="#管道处理保存数据-piplines-py" class="headerlink" title="管道处理保存数据(piplines.py)"></a>管道处理保存数据(piplines.py)</h4><p>要先在settings.py中启用管道后,itcast.py爬取的数据才会经过piplines管道进行处理保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">ItcastPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"itcast_piplines.json"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># item就是items.py返回的值</span>        content <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>            <span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span>        <span class="token punctuation">)</span>  <span class="token comment"># 把字典转换成json格式,ensure_ascii表示不把中文字符串当做ascii码,而是unicode</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 返回给引擎,告诉引擎处理完毕,给我下一个</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 整个爬虫程序关闭时做的事</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要在**<code>items.py</code>**中定义需要的属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ItcastItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Field()类似字典</span>    info <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>      title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Item-Pipline"><a href="#Item-Pipline" class="headerlink" title="Item Pipline"></a>Item Pipline</h2><p>当Item在Spider中被收集之后，它将会被传递到Item Pipeline,这些Item Pipeline组件按定义的顺序处理Item.<br>每个Item Pipeline都是实现了简单方法的Python类，比如决定此Item是丢弃而存储。以下是item pipeline的一些典型应用:</p><ul><li>验证爬取的数据(检查item包含某些字段，比如说name字段)</li><li>查重(并丢弃)</li><li>将爬取结果保存到文件或者数据库中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> something  <span class="token comment"># 确保这里的something是您实际想要导入的模块或包  </span>  <span class="token keyword">class</span> <span class="token class-name">SomethingPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># 可选实现，做参数初始化等  </span>        <span class="token comment"># 这里可以添加初始化代码，例如连接数据库等  </span>        <span class="token keyword">pass</span>      <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># item(Item 对象) - 被爬取的item  </span>        <span class="token comment"># spider(Spider 对象) - 爬取该item的spider  </span>        <span class="token comment"># 这个方法必须实现，每个item pipeline组件都需要调用该方法  </span>        <span class="token comment"># 方法必须返回一个 Item 对象，被丢弃的item将不会被之后的pipeline组件处理  </span>        <span class="token comment"># 这里可以添加处理item的代码，比如清洗数据、保存数据到数据库等  </span>        <span class="token keyword">return</span> item        <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># spider(Spider 对象) - 被开启的spider  </span>        <span class="token comment"># 可选实现，当spider被开启时，这个方法被调用  </span>        <span class="token comment"># 这里可以添加一些在spider启动时需要的初始化操作  </span>        <span class="token keyword">pass</span>          <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># spider(Spider 对象) - 被关闭的spider  </span>        <span class="token comment"># 可选实现，当spider被关闭时，这个方法被调用  </span>        <span class="token comment"># 这里可以添加一些清理代码，比如关闭数据库连接等  </span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h2><p><strong>Scrapy终端</strong>是一个交互终端，我们可以在未启动spider的情况下尝试及调试代码，也可以用来测试<strong>XPath</strong>或<strong>CSS</strong>表达式，查看他们的工作方式，方便我们爬取的网页中提取的数据。</p><p>如果安装了IPython，Scrapy终端将使用 IPython(替代标准Python终端)。<strong>IPython</strong>终端与其他相比更为强大，提供智能的自动补全，高亮输出，及其他特性。(推荐安装IPython)</p><h3 id="启动scrapyshell"><a href="#启动scrapyshell" class="headerlink" title="启动scrapyshell"></a>启动scrapyshell</h3><p>进入项目的根目录，执行下列命令来启动shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scrapy shell <span class="token string">"http://ww.itcast.cn/channel/teacher.shtml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/08/04/scrapy-kuang-jia/image-20240803112644048.png" alt="image-20240803112644048"></p><p><strong>Scrapy Shell</strong>根据下载的页面会自动创建一些方便使用的对象，例如<code>Response</code>对象，以及<code>selector</code>对象(对HTML及XML内容)。</p><p>当shell载入后，将得到一个包含response数据的本地response变量，输入<code>response.body</code>将输出response的包体，输出response.headers 可以看到response的包头。</p><p>输入response.selector 时，将获取到一个response 初始化的类 Selector 的对象,此时可以通过使用 <code>response.selector.xpath()</code>或<code>response.selector.css()</code>来对 response 进行查询。</p><p>Scrapy也提供了一些快捷方式,例如 <code>response.xpath()</code>或<code> response.css()</code>同样可以生效(如之前的案例)。</p><h3 id="Selectors选择器"><a href="#Selectors选择器" class="headerlink" title="Selectors选择器"></a>Selectors选择器</h3><p><strong>Scrapy Selectors</strong> 内置 <strong>XPath</strong> 和 <strong>Css Selector</strong> 表达式机制</p><p>Selector有四个基本的方法，最常用的还是xpath</p><ul><li><code>xpath()</code>:传入xpath表达式，返回该表达式所对应的所有节点的selector list列表</li><li><code>extract()</code>:序列化该节点为Unicode字符串并回list</li><li><code>css()</code>:传入CSS表达式，返回该表达式所对应的所有节点的selector list列表,语法同 BeautifulSoup4。</li><li><code>re()</code>:根据传入的正则表达式对数据进行提取，返回Unicode字符串list列表</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt"># 定位页面上的所有链接  //a    # 定位具有特定类名的元素，例如所有类名为"my-class"的&lt;div>元素  //div[@class='my-class']    # 如果类名有多个值，定位包含特定类名的元素  //div[contains(concat(' ', normalize-space(@class), ' '), ' my-class ')]    # 定位包含特定文本的元素，例如所有包含"点击这里"文本的&lt;a>元素  //a[contains(text(), '点击这里')]    # 定位具有特定属性值的元素，例如所有href属性中包含"example.com"的&lt;a>元素  //a[contains(@href, 'example.com')]    # 定位某个特定元素下的所有直接子元素，例如&lt;div id="container">下的所有&lt;p>元素  //div[@id='container']/p    # 定位具有特定id的元素，例如id为"unique-id"的&lt;div>元素  //div[@id='unique-id']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h2><p><strong>Spider</strong>类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。 </p><p>换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</p><p><code>class scrapy.spider</code> 是最基本的类，所有编写的爬虫必须继承这个类。</p><p>主要用到的函数及调用顺序为:</p><ul><li><code>init_()</code>: 初始化爬虫名字和start_urls列表</li><li><code>start_requests()</code>: 调用<code>make_requests_from_url()</code>生成Requests对象交给Scrapy下载并返response </li><li><code>parse()</code>: 解析response,并返回 Item 或 Requests (需指定回调函数)。Item传给<strong>item pipline</strong>持久化 ，而Requests交由Scrapy下载，并由指定的回调函数处理(默认parse()，一直进行循环，直到处理完所有的数据为止。)</li></ul><h3 id="源码参考"><a href="#源码参考" class="headerlink" title="源码参考"></a>源码参考</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 所有爬虫的基类，用户定义的爬虫必须从这个类继承</span><span class="token keyword">class</span> <span class="token class-name">Spider</span><span class="token punctuation">(</span>object_ref<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Base class for scrapy spiders. All spiders must inherit from this class."""</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    custom_settings<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>       <span class="token comment"># 定义spider名字的字符串(string)。spider的名字定义了scrapy如何定位(并初始化)spider，所以其必须是唯一的</span>   <span class="token comment"># name是spider最重要的属性，而且是必须的。</span><span class="token comment"># 一般做法是以该网站(domain)(加或不加后缀)来命名spider。例如，如果spider爬取mywebsite.com，该spider名为mywebsite</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token comment"># 如果爬虫没有名字，中断后续操作则报错</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string"> must have a name"</span></span><span class="token punctuation">)</span>                    <span class="token comment"># python 对象或类型通过内置成员_dict 来存储成员信息</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>update<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>                <span class="token comment"># URL列表。当没有指定的URL时，spider将从该列表中开始进行爬取。 因此，第一个被获取到的页面的URL将是该列表的内容</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"start_urls"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">logger</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> logging<span class="token punctuation">.</span>LoggerAdapter<span class="token punctuation">:</span>        logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> logging<span class="token punctuation">.</span>LoggerAdapter<span class="token punctuation">(</span>logger<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"spider"</span><span class="token punctuation">:</span> self<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 打印scrapy执行后的1og信息</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> level<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Log the given message at the given log level        This helper wraps a log call to the logger within the spider, but you        can use it directly (e.g. Spider.logger.info('msg')) or use any other        Python logger too.        """</span>        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>log<span class="token punctuation">(</span>level<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">:</span> Crawler<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Self<span class="token punctuation">:</span>        spider <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        spider<span class="token punctuation">.</span>_set_crawler<span class="token punctuation">(</span>crawler<span class="token punctuation">)</span>        <span class="token keyword">return</span> spider    <span class="token comment"># 判断对象object的属性是否存在，不存在做断言处理</span>    <span class="token keyword">def</span> <span class="token function">_set_crawler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> crawler<span class="token punctuation">:</span> Crawler<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>crawler <span class="token operator">=</span> crawler        self<span class="token punctuation">.</span>settings <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>close<span class="token punctuation">,</span> signals<span class="token punctuation">.</span>spider_closed<span class="token punctuation">)</span>            <span class="token comment"># 该方法将读取start_urls内的地址，并为每一个地址生成一个Request对象，交给Scrapy下载并返回Response#该方法仅调用一次</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Iterable<span class="token punctuation">[</span>Request<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>start_urls <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"start_url"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>                <span class="token string">"Crawling could not start: 'start_urls' not found "</span>                <span class="token string">"or empty (but found 'start_url' attribute instead, "</span>                <span class="token string">"did you miss an 's'?)"</span>            <span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> self<span class="token punctuation">.</span>make_requests_from_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token keyword">def</span>  <span class="token function">make_requests_from_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#start_requests()中调用，实际生成Request的函数。</span>        <span class="token comment">#Request对象默认的回调函数为parse()，提交的方式为get</span>       <span class="token keyword">return</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">:</span> Response<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Any<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 默认的Request对象回调函数，处理返回的response.</span>    <span class="token comment"># 生成Item或者Request对象。用户必须实现这个类</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">:</span> Response<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Any<span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">.parse callback is not defined"</span></span>        <span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">update_settings</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> settings<span class="token punctuation">:</span> BaseSettings<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        settings<span class="token punctuation">.</span>setdict<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>custom_settings <span class="token keyword">or</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> priority<span class="token operator">=</span><span class="token string">"spider"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">handles_request</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Request<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> url_is_from_spider<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> cls<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>spider<span class="token punctuation">:</span> Spider<span class="token punctuation">,</span> reason<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Union<span class="token punctuation">[</span>Deferred<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        closed <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>spider<span class="token punctuation">,</span> <span class="token string">"closed"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">callable</span><span class="token punctuation">(</span>closed<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> cast<span class="token punctuation">(</span>Union<span class="token punctuation">[</span>Deferred<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> closed<span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"&lt;</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token conversion-option punctuation">!r</span><span class="token punctuation">&#125;</span></span><span class="token string"> at 0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">0x</span><span class="token punctuation">&#125;</span></span><span class="token string">>"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/jira/p/16574364.html">Python @property装饰器详解 - 贾志文 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/zhh763984017/article/details/120072425">【Python】一文弄懂python装饰器（附源码例子）_python 装饰器-CSDN博客</a></p><p><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">Python 函数装饰器 | 菜鸟教程 (runoob.com)</a></p><ul><li><p><strong>name</strong>定义spider名字的字符串。</p><p>  例如，如果spider爬取 mywebsite.com，该spider通常会被命名为 mywebsite</p></li><li><p><strong>allowed domains</strong></p><p>  包含了spider允许爬取的域名(domain)的列表，可选。</p></li><li><p><strong>start urls</strong></p><p>  初始URL元组&#x2F;列表。当没有制定特定的URL时，spider将从该列表中开始进行爬取。</p></li><li><p><strong>start requests(self)</strong></p><p>该方法必须返回一个可迭代对象(iterable)。该对象包含了spider用于爬取(默认实现是使用start urls 的</p><p>url)的第一个Request.当spider启动爬取并且未指定start urls时，该方法被调用。</p></li><li><p><strong>parse(self, response)</strong></p><p>  当请求url返回网页没有指定回调函数时，默认的Request对象回调函数。用来处理网页返回的response，以及生成Item或者Request对象。</p></li><li><p><strong>log(self,messagel.level, component])</strong></p><p>  使用 scrapy.log.msg()方法记录(log)message。更多数据请参见 logging</p></li></ul><h3 id="尝试腾讯招聘案例-普通版"><a href="#尝试腾讯招聘案例-普通版" class="headerlink" title="尝试腾讯招聘案例(普通版)"></a>尝试腾讯招聘案例(普通版)</h3><p><a href="https://blog.csdn.net/hwwaizs/article/details/120392605">python爬虫（二十二）scrapy案例–爬取腾讯招聘数据_爬取腾讯社会招聘“数据分析”岗位的所有招聘信息-CSDN博客</a></p><p>我们用腾讯社招的网站<a href="https://careers.tencent.com/search.html?index=1">搜索 | 腾讯招聘 (tencent.com)</a>举例:</p><p>(<a href="http://hr.tencent.com/position.php?&start=0#a%E4%B8%AD#a%E8%A1%A8%E7%A4%BA%E9%94%9A%E7%82%B9,%E5%AE%9A%E4%BD%8D%E5%88%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%93%AA%E4%B8%AA%E4%BD%8D%E7%BD%AE">http://hr.tencent.com/position.php?&amp;start=0#a中#a表示锚点,定位到页面的哪个位置</a>)</p><h4 id="首先分析要爬取的数据有哪些"><a href="#首先分析要爬取的数据有哪些" class="headerlink" title="首先分析要爬取的数据有哪些"></a>首先分析要爬取的数据有哪些</h4><img src="/2024/08/04/scrapy-kuang-jia/分析要爬取的数据.png" alt="image-20240803133142140"><p>根节点的xpath路径为<code>//div[@class=&#39;recruit-list&#39;]/a</code></p><p><strong>初步确定要爬取的信息</strong></p><p>职位名positionName: <code>//div[@class=&#39;recruit-list&#39;]/a/div/span[1]</code></p><p>职位类别positionType: <code>//div[@class=&#39;recruit-list&#39;]/a/p/span[3]</code></p><p>职位要求positionRequire:<code>//div[@class=&#39;recruit-list&#39;]/a/p/span[5]</code></p><p>工作地点workLocation: <code>//div[@class=&#39;recruit-list&#39;]/a/div/span[2]</code></p><p>详细介绍positionInfo: <code>//div[@class=&#39;recruit-list&#39;]/a/p[@class=&#39;recruit-text&#39;]</code></p><p>最后更新时间updateTime:<code>//div[@class=&#39;recruit-list&#39;]/a/p/span[7]</code></p><h4 id="然后创建爬虫项目和程序"><a href="#然后创建爬虫项目和程序" class="headerlink" title="然后创建爬虫项目和程序"></a>然后创建爬虫项目和程序</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scrapy startproject Tencent <span class="token builtin class-name">cd</span> .<span class="token punctuation">\</span>Tencent<span class="token punctuation">\</span>scrapy genspider  tencent <span class="token string">"tencent.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a>items.py</h4><p>定义要采集的数据模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">TencentItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    <span class="token comment"># 职位名</span>    positionName <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 职位类别</span>    positionType <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 职位要求</span>    positionRequire <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 工作地点</span>    workLocation <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 详细介绍</span>    positionInfo <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 最后更新时间</span>    updateTime <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tencent-py"><a href="#tencent-py" class="headerlink" title="tencent.py"></a>tencent.py</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> Tencent<span class="token punctuation">.</span>items <span class="token keyword">import</span> TencentItem<span class="token keyword">class</span> <span class="token class-name">TencentSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"tencent"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tencent.com"</span><span class="token punctuation">]</span>    baseUrl <span class="token operator">=</span> <span class="token string">"http://hr.tencent.com/search.html?index="</span>    index <span class="token operator">=</span> <span class="token number">1</span>    start_url <span class="token operator">=</span> <span class="token punctuation">[</span>baseUrl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        node_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='recruit-list']/a"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> node <span class="token keyword">in</span> node_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> TencentItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 提取每个职位的信息</span>            item<span class="token punctuation">[</span><span class="token string">"positionName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/span[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"positionType"</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='recruit-list']/a/p/span[3]/text()"</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"positionRequire"</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='recruit-list']/a/p/span[5]/text()"</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"workLocation"</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div/span[2]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"positionInfo"</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='recruit-list']/a/p[@class='recruit-text']/text()"</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"updateTime"</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='recruit-list']/a/p/span[7]/text()"</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> item         <span class="token comment"># 此次硬编码,不是最佳方案,可在每一页中提取下一页url</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token number">282</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>index <span class="token operator">+=</span> <span class="token number">10</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>baseUrl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>index<span class="token punctuation">)</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token comment"># def parse_next(self,response):</span>    <span class="token comment">#     pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>start_url = [baseUrl + str(index)]</code>:拼接请求网址</li><li><code>yield scrapy.Request(url=url, callback=self.parse)</code>: 对新网址发送请求,callback函数可自己定义</li><li>yield会把item&#x2F;Request返回给引擎,引擎判断是交给管道保存还是继续进入请求队列</li></ul><h4 id="piplines-py"><a href="#piplines-py" class="headerlink" title="piplines.py"></a>piplines.py</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">import</span> json<span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">TencentPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> item<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>            <span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="腾讯招聘-抓包"><a href="#腾讯招聘-抓包" class="headerlink" title="腾讯招聘(抓包)"></a>腾讯招聘(抓包)</h3><h4 id="什么是抓包"><a href="#什么是抓包" class="headerlink" title="什么是抓包"></a>什么是抓包</h4><p>在网络爬虫的上下文中，抓包技术可以被用来分析和优化爬虫的性能。具体来说，爬虫开发者可以使用抓包工具（如</p><p>Wireshark、tcpdump等）来捕获爬虫程序与服务器之间的通信数据包。通过对这些数据包的分析，开发者可以了解爬虫</p><p>请求的发送情况、服务器的响应情况，以及请求和响应中携带的具体数据内容。</p><h4 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h4><p>打开腾讯招聘页面,右键源代码,随便搜索一个网页中的职位名称,结果为空,说明,职位信息是动态响应到界面中的;</p><p>此时,就要到网络中去抓包,按F11打开调试工具,点到网络项,XHR,然后刷新界面,逐个检查发现<code>Query</code>开头的请求返回的响应数据(预览)中有我们想要的数据.</p><p>复制请求url,在另一窗口打开,不断删除参数,最后发现,只需要简单的<code>https://careers.tencent.com/tencentcareer/api/post/Query?pageIndex=281&amp;pageSize=10</code>就能访问到数据,再将相隔两页对比数据,发现<strong>pageIndex的值</strong>就是当前页面的索引,<strong>pageSize固定为10</strong>(每页展示的招聘信息总数)</p><p><img src="/2024/08/04/scrapy-kuang-jia/%E6%8A%93%E5%8C%85%E4%B9%8Bxhr.png" alt="image-20240804094111942"></p><p>所以,我们试探性的将pageIndex改为1,果然发现获取到了第一页的招聘信息</p><p><img src="/2024/08/04/scrapy-kuang-jia/%E7%AE%80%E5%8C%96url.png" alt="image-20240804094920088"></p><h4 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h4><p>把上面请求的响应数据放到json解析器中去,解析想要的数据所处的格式</p><p><img src="/2024/08/04/scrapy-kuang-jia/json%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%93%8D%E5%BA%94.png" alt="image-20240804095531422"></p><h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><p>在<code>spiders/tencent.py</code>中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> Tencent<span class="token punctuation">.</span>items <span class="token keyword">import</span> TencentItem<span class="token keyword">class</span> <span class="token class-name">TencentSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"tencent"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tencent.com"</span><span class="token punctuation">]</span>    index <span class="token operator">=</span> <span class="token number">1</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-interpolation"><span class="token string">f"http://careers.tencent.com/tencentcareer/api/post/Query?pageIndex=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">&amp;pageSize=10"</span></span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"======================================"</span><span class="token punctuation">)</span><span class="token comment"># 输出一行,让你更容易看到输出信息,后面写完项目可以注释掉</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># 返回json数据</span>        data_dict <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 把json数据变成python字典类型</span>        RecruitPostName <span class="token operator">=</span> data_dict<span class="token punctuation">[</span><span class="token string">"Data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"Posts"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"RecruitPostName"</span><span class="token punctuation">]</span><span class="token comment"># 解嵌套</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>RecruitPostName<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"======================================"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过一系列操作,最后成功获得想要的第一个职位信息</p><p><img src="/2024/08/04/scrapy-kuang-jia/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF.png" alt="image-20240804102136386"></p><p>最终代码为</p><h5 id="tencent-py-1"><a href="#tencent-py-1" class="headerlink" title="tencent.py"></a>tencent.py</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> Tencent<span class="token punctuation">.</span>items <span class="token keyword">import</span> TencentItem<span class="token keyword">class</span> <span class="token class-name">TencentSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"tencent"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tencent.com"</span><span class="token punctuation">]</span>    index <span class="token operator">=</span> <span class="token number">1</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-interpolation"><span class="token string">f"http://careers.tencent.com/tencentcareer/api/post/Query?pageIndex=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">&amp;pageSize=10"</span></span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        data_dict <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        datas <span class="token operator">=</span> data_dict<span class="token punctuation">[</span><span class="token string">"Data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"Posts"</span><span class="token punctuation">]</span>  <span class="token comment"># 返回一个数组</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">:</span>            item <span class="token operator">=</span> TencentItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">"positionName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"RecruitPostName"</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"workLocation"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"LocationName"</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"positionType"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"CategoryName"</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"positionInfo"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"Responsibility"</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"PostURL"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"PostURL"</span><span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">"updateTime"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"LastUpdateTime"</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> item        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token number">282</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>index <span class="token operator">+=</span> <span class="token number">1</span>            url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"http://careers.tencent.com/tencentcareer/api/post/Query?pageIndex=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>index<span class="token punctuation">&#125;</span></span><span class="token string">&amp;pageSize=10"</span></span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span class="token comment"># def parse_next(self,response):</span><span class="token comment">#     pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="items-py-1"><a href="#items-py-1" class="headerlink" title="items.py"></a>items.py</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">TencentItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    <span class="token comment"># 职位名</span>    positionName <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 职位类别</span>    positionType <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 职位详情url</span>    PostURL <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 工作地点</span>    workLocation <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 详细介绍</span>    positionInfo <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 最后更新时间</span>    updateTime <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="piplines-py-1"><a href="#piplines-py-1" class="headerlink" title="piplines.py"></a>piplines.py</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">import</span> json<span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">class</span> <span class="token class-name">TencentPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"成功写入</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">个字符"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item        <span class="token comment"># def close_spider(self, spider):</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示"></a>运行结果展示</h5><p><img src="/2024/08/04/scrapy-kuang-jia/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="image-20240804103841776"></p><h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><h3 id="独门秘笈"><a href="#独门秘笈" class="headerlink" title="独门秘笈"></a>独门秘笈</h3><ol><li><p>继承自scrapy.Spider</p></li><li><p>独门秘笈<br> CrawlSpider可以定义规则，再解析html内容的时候，可以根据链接规则提取出指定的链接，然后再向这些链接发</p><p> 送请求所以，如果有需要跟进链接的需求，意思就是爬取了网页之后，需要提取链接再次爬取，使用<strong>CrawlSpider</strong></p><p> 是非常合适的</p></li><li><p>提取链接<br> 链接提取器，在这里就可以写规则提取指定链接    </p> <pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy<span class="token punctuation">.</span>linkextractors<span class="token punctuation">.</span>LinkExtractor<span class="token punctuation">(</span>     <span class="token comment"># 正则表达式  提取符合正则的链接</span>    allow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment"># (不用)正则表达式  不提取符合正则的链接</span>    deny <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">#（不用）允许的域名  </span>    allow_domains <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">#（不用）不允许的域名   </span>    deny_domains <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># xpath，提取符合xpath规则的链接</span>    restrict_xpaths <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment"># 提取符合选择器规则的链接</span>    restrict_css <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模拟使用</p><ul><li>正则用法:<code>links1 = LinkExtractor(allow=r&#39;list 23 \d+\.html&#39;)</code></li><li>xpath用法:<code>links2 = LinkExtractor(restrict xpaths=r&#39;//div[@class=&quot;x&quot;]&#39;)</code></li><li>css用法:<code>links3 = LinkExtractor(restrict css=&#39;.x&#39;)</code></li></ul></li><li><p>提取连接<br> <code>link.extract_links(response)</code></p></li><li><p>注意事项<br> 【注1】callback只能写函数名字符串，<strong>callback&#x3D;’parse item’</strong><br> 【注2】在基本的spider中，如果重新发送请求，那里的callback写的是callback&#x3D;self.parse_item</p></li><li><p>follow&#x3D;true 是否跟进 就是按照提取连接规则进行提取</p></li></ol><p><img src="/2024/08/04/scrapy-kuang-jia/follow%E8%A7%84%E5%88%99.png" alt="image-20240804110723859"></p><h2 id="CrawlSpider案例"><a href="#CrawlSpider案例" class="headerlink" title="CrawlSpider案例"></a>CrawlSpider案例</h2><h3 id="read-py"><a href="#read-py" class="headerlink" title="read.py"></a><code>read.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> scrapy_dushuwang<span class="token punctuation">.</span>items <span class="token keyword">import</span> ScrapyDushuwangItem<span class="token keyword">class</span> <span class="token class-name">ReadSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"read"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"www.dushu.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://www.dushu.com/book/1107.html"</span><span class="token punctuation">]</span>    <span class="token comment"># 正则表达式r"/book/\d+\.html"</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r"/book/\d+\.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  callback<span class="token operator">=</span><span class="token string">"parse_item"</span><span class="token punctuation">,</span>                  follow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># follow是要不要继续提取</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span>        <span class="token comment"># 第一张图片没有懒加载,所以要加入图片源</span>        <span class="token comment"># img_list[0] = "https://a.dushu.com/img/n142.png"</span>        img_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="bookslist"]/ul//img/@data-original'</span><span class="token punctuation">)</span>        name_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="bookslist"]/ul//a/@title'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>img_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                name <span class="token operator">=</span> name_list<span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>                src <span class="token operator">=</span> <span class="token string">"https://a.dushu.com/img/n142.png"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                name <span class="token operator">=</span> name_list<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>                src <span class="token operator">=</span> img_list<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            book <span class="token operator">=</span> ScrapyDushuwangItem<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span> src<span class="token operator">=</span>src<span class="token punctuation">)</span>            <span class="token keyword">yield</span> book<span class="token comment"># item = &#123;&#125; # 建议使用在items文件中定义数据结构</span><span class="token comment"># # item["domain_id"] = response.xpath('//input[@id="sid"]/@value').get()</span><span class="token comment"># # item["name"] = response.xpath('//div[@id="name"]').get()</span><span class="token comment"># # item["description"] = response.xpath('//div[@id="description"]').get()</span><span class="token comment"># return item</span><span class="token comment"># 创建新的请求并重新执行提取</span><span class="token comment"># next_page = response.xpath('//a[contains(text(), "下一页")]/@href').get()  # 获取下一页的链接</span><span class="token comment"># if next_page:</span><span class="token comment"># yield scrapy.Request(next_page, callback=self.parse_item)  # 重新执行提取，回调函数为 self.parse_item</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="items-py-2"><a href="#items-py-2" class="headerlink" title="items.py"></a><code>items.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ScrapyDushuwangItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="piplines-py-2"><a href="#piplines-py-2" class="headerlink" title="piplines.py"></a><code>piplines.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># useful for handling different item types with a single interface</span><span class="token keyword">class</span> <span class="token class-name">ScrapyDushuwangPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'book.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> pymysql<span class="token comment"># 加载settings文件</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settings<span class="token keyword">class</span> <span class="token class-name">MySqlPipline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        settings <span class="token operator">=</span> get_project_settings<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> settings<span class="token punctuation">[</span><span class="token string">'DB_HOST'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>port <span class="token operator">=</span> settings<span class="token punctuation">[</span><span class="token string">'DB_PORT'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>user <span class="token operator">=</span> settings<span class="token punctuation">[</span><span class="token string">'DB_USER'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> settings<span class="token punctuation">[</span><span class="token string">'DB_PASSWORD'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> settings<span class="token punctuation">[</span><span class="token string">'DB_NAME'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>charset <span class="token operator">=</span> settings<span class="token punctuation">[</span><span class="token string">'DB_CHARSET'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span>            port<span class="token operator">=</span>self<span class="token punctuation">.</span>port<span class="token punctuation">,</span>            user<span class="token operator">=</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span>            password<span class="token operator">=</span>self<span class="token punctuation">.</span>password<span class="token punctuation">,</span>            db<span class="token operator">=</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            charset<span class="token operator">=</span>self<span class="token punctuation">.</span>charset        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">'insert into book(name,src) values("&#123;&#125;","&#123;&#125;")'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 执行sql语句</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment"># 提交</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a><code>settings.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Scrapy settings for scrapy_dushuwang project</span><span class="token comment">#</span><span class="token comment"># For simplicity, this file contains only settings considered important or</span><span class="token comment"># commonly used. You can find more settings consulting the documentation:</span><span class="token comment">#</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/settings.html</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span>BOT_NAME <span class="token operator">=</span> <span class="token string">"scrapy_dushuwang"</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"scrapy_dushuwang.spiders"</span><span class="token punctuation">]</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">"scrapy_dushuwang.spiders"</span><span class="token comment"># 连接mysql参数</span>DB_HOST <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token comment"># DB_HOST = 'localhost'</span>DB_PORT <span class="token operator">=</span> <span class="token number">3306</span>DB_USER <span class="token operator">=</span> <span class="token string">'root'</span>DB_PASSWORD <span class="token operator">=</span> <span class="token string">'Xubin159753123'</span>DB_NAME <span class="token operator">=</span> <span class="token string">"spider01"</span><span class="token comment"># 注意utf-8的-不允许写</span>DB_CHARSET <span class="token operator">=</span> <span class="token string">'utf8'</span><span class="token comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><span class="token comment"># USER_AGENT = "scrapy_dushuwang (+http://www.yourdomain.com)"</span><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><span class="token comment"># CONCURRENT_REQUESTS = 32</span><span class="token comment"># Configure a delay for requests for the same website (default: 0)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay</span><span class="token comment"># See also autothrottle settings and docs</span><span class="token comment"># DOWNLOAD_DELAY = 3</span><span class="token comment"># The download delay setting will honor only one of:</span><span class="token comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><span class="token comment"># CONCURRENT_REQUESTS_PER_IP = 16</span><span class="token comment"># Disable cookies (enabled by default)</span><span class="token comment"># COOKIES_ENABLED = False</span><span class="token comment"># Disable Telnet Console (enabled by default)</span><span class="token comment"># TELNETCONSOLE_ENABLED = False</span><span class="token comment"># Override the default request headers:</span><span class="token comment"># DEFAULT_REQUEST_HEADERS = &#123;</span><span class="token comment">#    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",</span><span class="token comment">#    "Accept-Language": "en",</span><span class="token comment"># &#125;</span><span class="token comment"># Enable or disable spider middlewares</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token comment"># SPIDER_MIDDLEWARES = &#123;</span><span class="token comment">#    "scrapy_dushuwang.middlewares.ScrapyDushuwangSpiderMiddleware": 543,</span><span class="token comment"># &#125;</span><span class="token comment"># Enable or disable downloader middlewares</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment"># DOWNLOADER_MIDDLEWARES = &#123;</span><span class="token comment">#    "scrapy_dushuwang.middlewares.ScrapyDushuwangDownloaderMiddleware": 543,</span><span class="token comment"># &#125;</span><span class="token comment"># Enable or disable extensions</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/extensions.html</span><span class="token comment"># EXTENSIONS = &#123;</span><span class="token comment">#    "scrapy.extensions.telnet.TelnetConsole": None,</span><span class="token comment"># &#125;</span><span class="token comment"># Configure item pipelines</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"scrapy_dushuwang.pipelines.ScrapyDushuwangPipeline"</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    <span class="token comment"># MySqlPipline:"</span>    <span class="token string">"scrapy_dushuwang.pipelines.MySqlPipline"</span><span class="token punctuation">:</span> <span class="token number">301</span><span class="token punctuation">&#125;</span><span class="token comment"># Enable and configure the AutoThrottle extension (disabled by default)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/autothrottle.html</span><span class="token comment"># AUTOTHROTTLE_ENABLED = True</span><span class="token comment"># The initial download delay</span><span class="token comment"># AUTOTHROTTLE_START_DELAY = 5</span><span class="token comment"># The maximum download delay to be set in case of high latencies</span><span class="token comment"># AUTOTHROTTLE_MAX_DELAY = 60</span><span class="token comment"># The average number of requests Scrapy should be sending in parallel to</span><span class="token comment"># each remote server</span><span class="token comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><span class="token comment"># Enable showing throttling stats for every response received:</span><span class="token comment"># AUTOTHROTTLE_DEBUG = False</span><span class="token comment"># Enable and configure HTTP caching (disabled by default)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><span class="token comment"># HTTPCACHE_ENABLED = True</span><span class="token comment"># HTTPCACHE_EXPIRATION_SECS = 0</span><span class="token comment"># HTTPCACHE_DIR = "httpcache"</span><span class="token comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><span class="token comment"># HTTPCACHE_STORAGE = "scrapy.extensions.httpcache.FilesystemCacheStorage"</span><span class="token comment"># Set settings whose default value is deprecated to a future-proof value</span>REQUEST_FINGERPRINTER_IMPLEMENTATION <span class="token operator">=</span> <span class="token string">"2.7"</span>TWISTED_REACTOR <span class="token operator">=</span> <span class="token string">"twisted.internet.asyncioreactor.AsyncioSelectorReactor"</span>FEED_EXPORT_ENCODING <span class="token operator">=</span> <span class="token string">"utf-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志信息和日志等级"><a href="#日志信息和日志等级" class="headerlink" title="日志信息和日志等级"></a>日志信息和日志等级</h2><ul><li><p>日志级别:</p><ul><li><p><strong>CRITICAL</strong>: 严重错误</p></li><li><p><strong>ERROR</strong>: 一般错误</p></li><li><p><strong>WARNING</strong>: 警告</p></li><li><p><strong>INFO</strong>: 一般信息</p></li><li><p><strong>DEBUG</strong>: 调试信息</p></li></ul><p>  默认的日志等级是DEBUG,只要出现了DEBUG或者DEBUG以上等级的日志,那么这些日志将会打印</p></li><li><p><code>settings.py</code>文件设置:</p><p>  默认的级别为 DEBUG，会显示上面所有的信息</p><p>  在配置文件中settings.py</p><p>  LOG FILE: 将屏幕显示的信息全部记录到文件中，屏幕不再显示，注意文件后缀一定是<code>.log</code></p><p>  LOG LEVEL: 设置日志显示的等级，就是显示哪些，不显示哪些</p></li></ul><h2 id="scrapy的post请求"><a href="#scrapy的post请求" class="headerlink" title="scrapy的post请求"></a>scrapy的post请求</h2><ol><li><p>重写start requests方法:</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> start requests<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>start requests的返回值:</p><p> <code>scrapy.FormRequest(url=url.headers=headers, callback=self.parse item, formdata=data)</code></p><ul><li>url: 要发送的post地址</li><li>headers: 可以定制头信息</li><li>callback: 回调函数</li><li>formdata: post所携带的数据，这是一个字典</li></ul></li></ol><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>到<strong>settings.py</strong>中，打开一个选项<code>DOWNLOADER MIDDLEWARES=&#123;postproject.middlewares.Proxy&#39;:543,&#125;</code></p><p>到<strong>middlewares.py</strong>中写代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'https://113.68.202.10:9999'</span><span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
            <tag> python </tag>
            
            <tag> 数据持久化存储 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2024/07/19/javascript/"/>
      <url>/2024/07/19/javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="一、JavaScript的介绍"><a href="#一、JavaScript的介绍" class="headerlink" title="一、JavaScript的介绍"></a>一、JavaScript的介绍</h3><p>JavaScript是运行在浏览器端的脚本语言，它的作用就是负责网页和用户的交互效果</p><h3 id="二、Javascript的使用"><a href="#二、Javascript的使用" class="headerlink" title="二、Javascript的使用"></a>二、Javascript的使用</h3><ol><li>行内式(主要用于事件)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> name<span class="token operator">=</span><span class="token string">""</span>onclick<span class="token operator">=</span><span class="token string">"alert('ok!');"</span><span class="token operator">></span>      <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>内嵌式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'ok !'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>外链式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/index.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="三、变量和数据类型"><a href="#三、变量和数据类型" class="headerlink" title="三、变量和数据类型"></a>三、变量和数据类型</h3><p>JavaScript 是一种<strong>弱类型语言</strong>，也就是说<strong>不需要指定变量的类型</strong><br>JavaScript的变量类型由它的值来决定，定义变量需要用关键字**’var’**,一条JavaScript语句应该以<code>;</code>结尾</p><h4 id="6种数据类型-5种基本数据类型和1种复合数据类型"><a href="#6种数据类型-5种基本数据类型和1种复合数据类型" class="headerlink" title="6种数据类型(5种基本数据类型和1种复合数据类型):"></a>6种数据类型(5种基本数据类型和1种复合数据类型):</h4><ul><li>5种基本数据类型<br>number 数字类型<br>string 字符串类型<br>boolean 布尔类型 true 或 false<br>undefined undefined类型，变量声明末初始化，它的值就是undefined<br>null null类型，表示空对象，在页面上获取不到对象，返回的值就是null</li><li>1种复合类型:<br>object 后面学习的<strong>JavaScript</strong>对象属于复合类型</li></ul><h4 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h4><p>JavaScript的注释分为单行注释(&#x2F;&#x2F;注释内容)和多行注释(&#x2F;<em>多行注释</em>&#x2F;)</p><h4 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h4><ul><li>变量命名规范<ol><li>区分大小写</li><li>第一个字母必须是字母,下划线_,或者美元符号$</li><li>其他字符可以是字母、下划线、美元符或数字</li></ol></li></ul><h4 id="匈牙利命名风格"><a href="#匈牙利命名风格" class="headerlink" title="匈牙利命名风格"></a>匈牙利命名风格</h4><ul><li>匈牙利命名风格:</li><li>对象o Object 比如:oDiv</li><li>字符串s String 比如:sUserName</li><li>整数i Integer比如:iltemCount</li><li>布尔值b Boolean 比如:bIsComplete</li><li>浮点数f Float 比如:fPrice</li><li>函数fn Function 比如:fnHandler</li></ul><h3 id="四、函数的定义和调用"><a href="#四、函数的定义和调用" class="headerlink" title="四、函数的定义和调用"></a>四、函数的定义和调用</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><ul><li><code>js中的函数</code>:函数就是可以重复使用的代码块,使用关键字<code>function</code>定义函数</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token comment">// 函数定义</span><span class="token keyword">function</span> <span class="token function">fnAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="带有参数有返回值的函数"><a href="#带有参数有返回值的函数" class="headerlink" title="带有参数有返回值的函数"></a>带有参数有返回值的函数</h5><ul><li>js中有参数有返回值的函数:<br>定义函数时，函数如果有参数，参数放到小括号里面，函数如果有返回值，返回值通过 <code>return</code> 关键字来返回<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span> script type <span class="token operator">=</span> <span class="token string">"text/javascript"</span> <span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fnAdd</span><span class="token punctuation">(</span><span class="token parameter">iNum01<span class="token punctuation">,</span> iNum02</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> iRs <span class="token operator">=</span> iNum1 <span class="token operator">+</span> iNum02<span class="token punctuation">;</span>            <span class="token keyword">return</span> iRs<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'here!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">var</span> iCount <span class="token operator">=</span> <span class="token function">fnAdd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>iCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出7&lt;/script></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><ul><li>js中的函数调用:<br>函数调用就是函数名加小括号<br>比如:函数名(参数[参数可选]) <pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&#x2F;&#x2F; 函数定义function fnAlert()&#123;    alert(&#39;hello!&#39;);&#125;&#x2F;&#x2F; 函数调用fnAlert();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、变量的作用域"><a href="#五、变量的作用域" class="headerlink" title="五、变量的作用域"></a>五、变量的作用域</h3><h4 id="5-1-变量作用域的介绍"><a href="#5-1-变量作用域的介绍" class="headerlink" title="5.1 变量作用域的介绍"></a>5.1 变量作用域的介绍</h4><ul><li>变量作用域:变量作用域就是变量的使用范围</li><li>变量分为:局部变量、全局变量</li></ul><h4 id="5-2-局部变量"><a href="#5-2-局部变量" class="headerlink" title="5.2 局部变量"></a>5.2 局部变量</h4><p>局部变量就是在函数内使用的变量，只能在函数内部使用</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;function myalert()&#123;    &#x2F;&#x2F; 定义局部变量    var b&#x3D; 23;    alert(b);    &#125;    myalert();&#x2F;&#x2F;弹出23    alert(b);&#x2F;&#x2F; 函数外使用出错&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-全局变量"><a href="#5-3-全局变量" class="headerlink" title="5.3 全局变量"></a>5.3 全局变量</h4><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;var b&#x3D; 23;function myalert()&#123;    &#x2F;&#x2F; 定义局部变量    alert(b);    &#125;    myalert();&#x2F;&#x2F;弹出23    alert(b);&#x2F;&#x2F; 函数外使用不出错&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、条件语句"><a href="#六、条件语句" class="headerlink" title="六、条件语句"></a>六、条件语句</h3><h4 id="6-1-条件语句的介绍"><a href="#6-1-条件语句的介绍" class="headerlink" title="6.1 条件语句的介绍"></a>6.1 条件语句的介绍</h4><ul><li><strong>条件语句</strong>就是通过条件控制程序的走向</li></ul><p>条件语句语法:</p><ol><li><code>if 语句</code>: 只有当指定条件为”true 时，使用该语句来执行代码</li><li><code>if..else 语句</code>: 当条件为 true 时执行代码，当条件为 false 时执行其他代码</li><li><code>if...else if...else 语句</code>: 使用该语句来判断多条件，执行条件成立的语句</li></ol><h4 id="6-2-比较运算符"><a href="#6-2-比较运算符" class="headerlink" title="6.2 比较运算符"></a>6.2 比较运算符</h4><p>假如<code>x = 5</code> 与下列做运算</p><table><thead><tr><th>比较运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td><td>x &#x3D;&#x3D; 8 为 false</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>全等(值和类型)</td><td>x <code>===</code> 5 为 true;<br>x <code>===</code> “5” 为 false</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>x !&#x3D; 8 为 true</td></tr><tr><td>&gt;</td><td>大于</td><td>x &gt; 8 为 false</td></tr><tr><td>&lt;</td><td>小于</td><td>x &lt; 8 为 true</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td><td>x &gt;&#x3D; 8 为 false</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td><td>x &lt;&#x3D; 8 为 true</td></tr></tbody></table><h4 id="6-3-逻辑运算符"><a href="#6-3-逻辑运算符" class="headerlink" title="6.3 逻辑运算符"></a>6.3 逻辑运算符</h4><p>下面是关于逻辑运算符的比较及描述，以及根据 x&#x3D;6, y&#x3D;3 提供的例子：</p><table><thead><tr><th align="left">逻辑运算符</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="center">and</td><td align="center">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="left">||</td><td align="center">or</td><td align="center">(x &#x3D;&#x3D; 5 || y &#x3D;&#x3D; 5) 为 false</td></tr><tr><td align="left">!</td><td align="center">not</td><td align="center">!(x &#x3D;&#x3D; y) 为 true</td></tr></tbody></table><h3 id="七、获取标签元素"><a href="#七、获取标签元素" class="headerlink" title="七、获取标签元素"></a>七、获取标签元素</h3><h4 id="7-1-获取标签元素的作用"><a href="#7-1-获取标签元素的作用" class="headerlink" title="7.1 获取标签元素的作用"></a>7.1 获取标签元素的作用</h4><p>实现页面的变换和交互效果</p><h4 id="7-2-获取标签元素"><a href="#7-2-获取标签元素" class="headerlink" title="7.2 获取标签元素"></a>7.2 获取标签元素</h4><p>步骤:</p><ol><li>获取标签元素</li></ol><p>可以使用<strong>内置对象document</strong>上的 <strong>getElementById方法</strong>来获取页面上设置了id属性的标签元素获取到的是一个html对象，然后将它赋值给一个变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//定义一个函数,方便调用</span>        <span class="token keyword">function</span> <span class="token function">fnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//通过内置方法获取对应id的标签 如果没获取成功就返回null</span>            <span class="token keyword">var</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>oBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//onload事件: 页面加载完成后触发</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> fnLoad<span class="token punctuation">;</span>        <span class="token comment">// 匿名的写法</span>        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//通过内置方法获取对应id的标签 如果没获取成功就返回null</span>            <span class="token keyword">var</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>oBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"按钮"</span> id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>改变(设置)标签元素属性</li></ol><ul><li>使用获取到的标签对象直接修改属性</li></ul><p>标签属性和样式修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">// 获取标签对象</span><span class="token keyword">var</span> oBtn <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改标签属性</span>oBtn<span class="token punctuation">.</span>value <span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">;</span><span class="token comment">// 修改样式属性</span>oBtn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"按钮"</span> id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性名在js中的写法</p><ol><li>html的属性和is里面属性大多数写法一样，但是“class”属性写成“className”<br>“font-size”改 “style.fontSize”</li><li>“style” 属性里面的属性，有横杠的改成驼峰式，比如:“font-size”改成“style.fontSize”</li></ol><h3 id="八、操作标签元素"><a href="#八、操作标签元素" class="headerlink" title="八、操作标签元素"></a>八、操作标签元素</h3><h4 id="8-1-读取或者设置标签包裹的内容"><a href="#8-1-读取或者设置标签包裹的内容" class="headerlink" title="8.1 读取或者设置标签包裹的内容"></a>8.1 读取或者设置标签包裹的内容</h4><p><strong>innerHTML</strong>可以读取或者设置标签包裹的内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"mydiv"</span><span class="token operator">></span>我是一个标签<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 获取标签对象</span>    <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取标签中的内容</span>    <span class="token function">alert</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置标签中的内容</span>    oDiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"你好阳光"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、数组及操作方法"><a href="#九、数组及操作方法" class="headerlink" title="九、数组及操作方法"></a>九、数组及操作方法</h3><h4 id="9-1-数组的介绍"><a href="#9-1-数组的介绍" class="headerlink" title="9.1 数组的介绍"></a>9.1 数组的介绍</h4><ul><li>什么是数组:</li></ul><p>数组就是一组数据的集合</p><p>javascript 中，数组里面的数据可以是不同类型的数据，好比 python 里面的列表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数组的定义:</span><span class="token comment">// 实例化对象方式创建</span><span class="token keyword">var</span> aList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字面量方式创建，推荐使用</span><span class="token keyword">var</span> aList2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'asd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多维数组</li></ul><p>多维数组指的是数组的成员也是数组，把这样的数组叫做多维数组</p><h4 id="9-2-数组的操作"><a href="#9-2-数组的操作" class="headerlink" title="9.2 数组的操作"></a>9.2 数组的操作</h4><ul><li>获取数组长度</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aList <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>aList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>根据下标获取元素</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aList <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>aList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>从数组的尾部插入或删除数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>aList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>aList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出1,2,3,4,5</span>aList<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>aList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出1,2,3,4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据下标添加(或删除)元素</li></ul><p><code>数组.splice(start, num, elementl,,elementN)</code><br>参数解析。<br>①start:必需开始删除的索引<br>②num:可选，删除数组元素的个数<br>③elementN:可选，在start索引位置要插入的新元素<br>此方法会删除从<strong>start索引</strong>开始的<strong>num</strong>个元素，并将<strong>elementN</strong>参数插入到start索引位置</p><h3 id="十、循环"><a href="#十、循环" class="headerlink" title="十、循环"></a>十、循环</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for 循环代码示例:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环代码示例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><p>do-while循环代码示例:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> index<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十一、字符串拼接"><a href="#十一、字符串拼接" class="headerlink" title="十一、字符串拼接"></a>十一、字符串拼接</h3><h4 id="使用-拼接"><a href="#使用-拼接" class="headerlink" title="使用+拼接"></a>使用<code>+</code>拼接</h4><p>字符串拼接使用:”+”运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> iNum1 <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> fNum2 <span class="token operator">=</span> <span class="token number">11.1</span><span class="token punctuation">;</span><span class="token keyword">var</span> sStr<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">;</span>result <span class="token operator">=</span>iNum1 <span class="token operator">+</span> fNum2<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出21.1</span>result <span class="token operator">=</span> fNum2 <span class="token operator">+</span> sStr<span class="token punctuation">;</span> <span class="token comment">//把数字类型转换成字符串拼接</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出11.1abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隐式类型转换:数字和字符串拼接会自动进行类型转换，把数字类型转成字符串类型进行拼接</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>能够实现反复执行的定时器</p><h4 id="1-定时器的介绍"><a href="#1-定时器的介绍" class="headerlink" title="1. 定时器的介绍"></a>1. 定时器的介绍</h4><p>定时器的作用:定时器就是在一段特定的时间后执行某段程序代码</p><h4 id="2-js中的定时器"><a href="#2-js中的定时器" class="headerlink" title="2.js中的定时器"></a>2.js中的定时器</h4><table><thead><tr><th align="center">函数</th><th align="center"></th></tr></thead><tbody><tr><td align="center">setTimeout(func[, delay, paraml, param2, …])</td><td align="center">以指定的时间间隔(以毫秒计)调用一次函数的定时器</td></tr><tr><td align="center">setInterval(func[, delay, paraml, param2, ..])</td><td align="center">以指定的时间间隔(以毫秒计)重复调用一个函数的定时器</td></tr></tbody></table><ul><li><strong>setTimeout的参数说明</strong></li></ul><p>第一个参数 func，表示定时器要执行的函数名</p><p>第二个参数 delay,表示时间间隔,默认是0,单位是亳秒</p><p>第三个参数 param1,表示定时器执行函数的第一个参数，依次类推传入多个执行函数对应的参数</p><ul><li><strong>setInterval的参数说明</strong></li></ul><p>第一个参数 func，表示定时器要执行的函数名</p><p>第二个参数 delay,表示时间间隔,默认是0,单位是亳秒</p><p>第三个参数 param1,表示定时器执行函数的第一个参数，依次类推传入多个执行函数对应的参数</p><h4 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h4><ul><li>js 清除定时器分别是:<ul><li>clearTimeout(timeoutID)清除只执行一次的定时器(setTimeout函数)</li><li>clearnterval(timeoutID)清除反复执行的定时器(setInterval函数)</li></ul></li></ul><ol><li><p><strong>clearTimeout函数的参数说明：</strong></p><p> timeoutID 为调用 setTimeout 函数时所获得的返回值，使用该返回标识符作为参数,可以取消该 setTimeout 所设定的定时执行操作</p></li><li><p><strong>clearInterval函数的参数说明:</strong></p><p> timeoutID 为调用 setinterval 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setInterval 所设定的定时执行操作</p></li></ol><h3 id="Javascript的事件"><a href="#Javascript的事件" class="headerlink" title="Javascript的事件"></a>Javascript的事件</h3><h4 id="onload事件-被动触发"><a href="#onload事件-被动触发" class="headerlink" title="onload事件(被动触发)"></a>onload事件(被动触发)</h4><p>当页面完全加载完成后触发，可以用来触发自定义函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//定义一个函数,方便调用</span>        <span class="token keyword">function</span> <span class="token function">fnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//通过内置方法获取对应id的标签 如果没获取成功就返回null</span>            <span class="token keyword">var</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>oBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//onload事件: 页面加载完成后触发</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> fnLoad<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="onclick事件-主动触发"><a href="#onclick事件-主动触发" class="headerlink" title="onclick事件(主动触发)"></a>onclick事件(主动触发)</h4><p>按钮点击触发</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//定义一个函数,方便调用</span>        <span class="token keyword">function</span> <span class="token function">fnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//通过内置方法获取对应id的标签 如果没获取成功就返回null</span>            <span class="token keyword">var</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>oBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token comment">//onclick事件，点击触发</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"按钮"</span> id<span class="token operator">=</span><span class="token string">"btn"</span> onclick<span class="token operator">=</span><span class="token function">fnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h3><h4 id="JavaScript对象的介绍"><a href="#JavaScript对象的介绍" class="headerlink" title="JavaScript对象的介绍"></a>JavaScript对象的介绍</h4><p><strong>JavaScript对象:</strong></p><p>JavaScript 中的所有事物都是对象:字符串、数值、数组、函数等都可以认为是对象，此外，JavaScript 允许自定义对象，对象可以拥有属性和方法</p><p><strong>创建自定义javascript对象有两种方式</strong>:</p><p>①通过顶级Object类型来实例化一个对象</p><p>②通过对象字面量创建一个对象</p><h4 id="Object类创建自定义对象"><a href="#Object类创建自定义对象" class="headerlink" title="Object类创建自定义对象"></a>Object类创建自定义对象</h4><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;var person &#x3D;new Object();&#x2F;&#x2F; 添加属性person.name &#x3D; &#39;tom&#39;;person.age &#x3D; &#39;25&#39;;&#x2F;&#x2F; 添加方法person.sayName &#x3D; function()&#123;        alert(this.name);    &#125;&#x2F;&#x2F; 调用属性和方法alert(person.age);person.sayName();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象字面量创建对象"><a href="#对象字面量创建对象" class="headerlink" title="对象字面量创建对象"></a>对象字面量创建对象</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Rose"</span><span class="token punctuation">.</span>     <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'My name is'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                <span class="token comment">// 调用属性和方法</span>                <span class="token function">alert</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>age<span class="token punctuation">)</span>                person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery库"><a href="#jQuery库" class="headerlink" title="jQuery库"></a>jQuery库</h2><h3 id="一、jQuery的介绍"><a href="#一、jQuery的介绍" class="headerlink" title="一、jQuery的介绍"></a>一、jQuery的介绍</h3><h4 id="1-1-jQuery的定义"><a href="#1-1-jQuery的定义" class="headerlink" title="1.1 jQuery的定义"></a>1.1 jQuery的定义</h4><p>jQuery是对JavaScript的封装，它是免费、开源的JavaScript函数库,jQuery 极大地简化了 JavaScript 编程</p><h4 id="1-2jQuery的作用"><a href="#1-2jQuery的作用" class="headerlink" title="1.2jQuery的作用"></a>1.2jQuery的作用</h4><p>jQuery和JavaScript它们的作用一样,都是负责网页行为操作,增加网页和用户的交互效果的，只不过jQuery<br>简化了JavaScript编程，jQuery实现交互效果更简单</p><h4 id="1-3-jQuery的优点"><a href="#1-3-jQuery的优点" class="headerlink" title="1.3 jQuery的优点"></a>1.3 jQuery的优点</h4><ul><li><p>jQuery兼容了现在主流的浏览器，增加了程序员的开发效率</p></li><li><p>jQuery简化了 JavaScript 编程，代码编写更加简单</p></li></ul><h3 id="二、-jQuery的使用"><a href="#二、-jQuery的使用" class="headerlink" title="二、 jQuery的使用"></a>二、 jQuery的使用</h3><h4 id="2-1-jQuery的引入"><a href="#2-1-jQuery的引入" class="headerlink" title="2.1 jQuery的引入"></a>2.1 jQuery的引入</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-1.12.4.min.js"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>jQuery的入口函数：</strong><br>我们知道使用js获取标签元素，需要页面加载完成以后再获取，我们通过使用onload事件来获取标签元素而jquery提供了<strong>ready函数</strong>来解决这个问题，保证获取标签元素没有问题，它的速度比原生的<strong>window.onload</strong>更快</p><h4 id="2-2-jQuery的入口函数"><a href="#2-2-jQuery的入口函数" class="headerlink" title="2.2 jQuery的入口函数"></a>2.2 jQuery的入口函数</h4><p>jQuery入口函数有两种写法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//完整写法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简化写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 导入jQuery文件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../../jquery-1.12.4.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 入口函数 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//原生js代码</span>        <span class="token comment">// window.onload = function () &#123;</span>        <span class="token comment">//     var oDiv = document.getElementById("mydiv");</span>        <span class="token comment">//     alert(oDiv);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// jQuery的获取标签的方式</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//jQuery获取标签的方式和css中是一样的</span>            <span class="token keyword">var</span> $mydiv <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>$mydiv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//jQuery获取标签的方式和css中是一样的</span>            <span class="token keyword">var</span> $mydiv <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>$mydiv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、jQuery选择器"><a href="#三、jQuery选择器" class="headerlink" title="三、jQuery选择器"></a>三、jQuery选择器</h3><p><strong>jQuery选择器的介绍:</strong><br>jquery选择器就是快速选择标签元素，获取标签的，选择规则和css选择器一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#myId'</span><span class="token punctuation">)</span><span class="token comment">//选择id为myId的标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token comment">//选择class为myClass的标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token comment">//选择所有的1i标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ul1 li span'</span><span class="token punctuation">)</span><span class="token comment">//选择id为ul1标签下的所有li标签下的span标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=first]'</span><span class="token punctuation">)</span><span class="token comment">// 选择name属性等于first的input标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、jQuery的选择集过滤"><a href="#四、jQuery的选择集过滤" class="headerlink" title="四、jQuery的选择集过滤"></a>四、jQuery的选择集过滤</h3><p>选择集过滤的介绍:选择集过滤就是在选择标签的集合里面过滤自己需要的标签</p><p>选择集过滤的操作:</p><ol><li><p>①has(选择器名称)方法，表示选取包含指定选择器的标签</p></li><li><p>②eq(索引)方法，表示选取指定索引的标签</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// has方法的使用</span><span class="token keyword">var</span> $div <span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"#mytext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置样式</span>$div<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"background"</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// eq方法的使用</span><span class="token keyword">var</span> $div <span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置样式$div.css(&#123;"background":"yellow"&#125;);</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>这是第一个div<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"mytext"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>这是第二个div<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、选择集转移"><a href="#五、选择集转移" class="headerlink" title="五、选择集转移"></a>五、选择集转移</h3><p><strong>选择集转移介绍:</strong><br>选择集转移就是以选择的标签为参照，然后获取转移后的标签</p><p>选择集转移操作:<br><code>$(&#39;#box&#39;).prev(); </code>表示选择id是box元素的上一个的同级元素</p><p><code>$(&#39;#box&#39;).prevAll(); </code>表示选择id是box元素的上面所有的同级元素</p><p><code>$(&#39;#box&#39;).next();</code>表示选择id是box元素的下一个的同级元素</p><p><code>$(&#39;#box&#39;).nextAll();</code> 表示选择id是box元素的下面所有的同级元素</p><p><code>$(&#39;#box&#39;).parent();</code> 表示选择id是box元素的父元素</p><p><code>$(&#39;#box&#39;).children(); </code>表示选择id是box元素的所有子元素</p><p><code>$(&#39;#box&#39;).siblings(); </code>表示选择id是box元素的其它同级元素</p><p><code>$(&#39;#box&#39;).find(&#39;.myClass&#39;);</code>表示选择id是box元素的class属性等于myClass的元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> $div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保 HTML 中有 ID 为 'div01' 的元素</span>            $div<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'color'</span><span class="token operator">:</span> <span class="token string">'red'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">prevAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'text-indent'</span><span class="token operator">:</span> <span class="token string">'50px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'color'</span><span class="token operator">:</span> <span class="token string">'blue'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'text-indent'</span><span class="token operator">:</span> <span class="token string">'80px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'text-decoration'</span><span class="token operator">:</span> <span class="token string">'underline'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'background'</span><span class="token operator">:</span> <span class="token string">'gray'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'color'</span><span class="token operator">:</span> <span class="token string">'red'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $div<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.sp02'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">'font-size'</span><span class="token operator">:</span> <span class="token string">'30px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>这是第一个h2标签<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>这是第一个段落<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div01"</span><span class="token operator">></span>            这是一个<span class="token operator">&lt;</span>span<span class="token operator">></span>div<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sp02"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>第二个span<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>这是第二个h2标签<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>这是第二个段落<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、获取和设置元素内容"><a href="#六、获取和设置元素内容" class="headerlink" title="六、获取和设置元素内容"></a>六、获取和设置元素内容</h3><h4 id="6-1-html方法的使用"><a href="#6-1-html方法的使用" class="headerlink" title="6.1 html方法的使用"></a>6.1 html方法的使用</h4><p>jquery中的html方法可以获取和设置标签的内容</p><h4 id="6-2-append方法追加内容"><a href="#6-2-append方法追加内容" class="headerlink" title="6.2 append方法追加内容"></a>6.2 append方法追加内容</h4><p>&#x2F;&#x2F; 追加html内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> $div <span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取标签的html内容</span><span class="token keyword">var</span> result <span class="token operator">=</span>$div<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置标签的html内容，之前的内容会清除</span>   $div<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;span style='color:red'>你好&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 追加html内容</span>$div<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;span style='color:red'>你好&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、-获取和设置元素属性"><a href="#七、-获取和设置元素属性" class="headerlink" title="七、 获取和设置元素属性"></a>七、 获取和设置元素属性</h3><h4 id="7-1-元素-标签属性"><a href="#7-1-元素-标签属性" class="headerlink" title="7.1 元素&amp;标签属性"></a>7.1 元素&amp;标签属性</h4><p><strong>元素属性:</strong><br>标签样式: height, width,font-size,background等样式相关的</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>p</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>标签属性:</strong> type,value,id等标签中的属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-2-获取和设置元素属性"><a href="#7-2-获取和设置元素属性" class="headerlink" title="7.2 获取和设置元素属性"></a>7.2 获取和设置元素属性</h4><p>**获取和修改标签样式:**使用css方法可以给标签设置样式属性<br>**获取和修改标签属性:**设置标签的其它属性可以使用prop方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 获取标签对象</span>       <span class="token keyword">var</span> $myp <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取标签样式</span>       <span class="token keyword">var</span> $px <span class="token operator">=</span> $myp<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">alert</span><span class="token punctuation">(</span>$px<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//设置标签样式</span>       $myp<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">"font-size"</span><span class="token operator">:</span> <span class="token string">"30px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取标签属性</span>       <span class="token keyword">var</span> $mybtn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> $mytype <span class="token operator">=</span> $mybtn<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">alert</span><span class="token punctuation">(</span>$mytype<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 设置标签属性</span>       $mybtn<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token string">"heima"</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> $mybtn<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> itcast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**<code>val方法</code>**可以简便设置value属性</p><h3 id="八、jQuery事件"><a href="#八、jQuery事件" class="headerlink" title="八、jQuery事件"></a>八、jQuery事件</h3><h4 id="8-1-常见的事件"><a href="#8-1-常见的事件" class="headerlink" title="8.1 常见的事件"></a>8.1 常见的事件</h4><p><code>click()</code> 鼠标单击</p><p><code>blur() </code>元素失去焦点</p><p><code>focus() </code>元素获得焦点</p><p><code>mouseover() </code>鼠标进入(进入子元素也触发)</p><p><code>mouseout()</code> 鼠标离开(离开子元素也触发)</p><p><code>ready()</code> DOM加载完成，(与JavaScript的onload事件不同，onload事件要所有资源加载完才触发，ready事件只要代码文档加载完就触发)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jQuery常用事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// ready()DOM加载完成</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取标签对象</span>            <span class="token keyword">var</span> $mytext <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#text1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> $mybtn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// click()鼠标单击</span>            $mybtn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// focus()元素获得焦点</span>            $mytext<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//this是原生js写法</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>                <span class="token comment">//jQuery写法</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'background'</span><span class="token operator">:</span> <span class="token string">'red'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// blur()元素失去焦点</span>            $mytext<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'background'</span><span class="token operator">:</span> <span class="token string">'white'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// mouseover()鼠标进入(进入子元素也触发)</span>            <span class="token keyword">var</span> $mydiv <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $mydiv<span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'background'</span><span class="token operator">:</span> <span class="token string">'blue'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// mouseout()鼠标离开(离开子元素也触发)</span>            <span class="token keyword">var</span> $mydiv <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $mydiv<span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'background'</span><span class="token operator">:</span> <span class="token string">'white'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、事件代理"><a href="#九、事件代理" class="headerlink" title="九、事件代理"></a>九、事件代理</h3><h4 id="9-1-事件冒泡"><a href="#9-1-事件冒泡" class="headerlink" title="9.1 事件冒泡"></a>9.1 事件冒泡</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取标签对象</span>            <span class="token keyword">var</span> $mydiv1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> $mydiv2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//绑定事件</span>            $mydiv1<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// alert("div1 父标签被点击了");</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'父标签div1被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $mydiv2<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// alert("div2 子标签被点击了");</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子标签div2被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            itcast        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子元素绑定了click事件,点击子元素时也会触发父元素的click事件</p><h4 id="9-2-什么是事件代理"><a href="#9-2-什么是事件代理" class="headerlink" title="9.2 什么是事件代理?"></a>9.2 什么是事件代理?</h4><p><strong>事件代理:</strong></p><p>事件代理就是利用事件冒泡的原理(事件冒泡就是事件会向它的父级一级一级传递),把事件加到父级上通过判断事件来源，执行相应的子元素的操作</p><p><strong>事件代理的好处:</strong><br>事件代理首先可以极大减少事件绑定次数，提高性能,其次可以让新加入的子元素也可以拥有相同的操作</p><h4 id="9-3-事件代理的使用"><a href="#9-3-事件代理的使用" class="headerlink" title="9.3 事件代理的使用"></a>9.3 事件代理的使用</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$list <span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父元素u1 来代理 子元素1i的点击事件</span>    $list<span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//$(this)表示当前点击的子元素对象</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">background</span><span class="token operator">:</span><span class="token string">'red'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事件代理的写法:</strong></p><p>这里实际上只对<code>&lt;li&gt;</code>的父标签<code>&lt;ul&gt;</code>进行了1次事件绑定了</p><p><strong>delegate方法参数说明:</strong></p><ol><li>delegate(childSelector,event,function)</li><li>childSelector:子元素的选择器</li><li>event: 事件名称</li><li>function:当事件触发执行的函数</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>事件代理:</strong></p><p>事件代理就是使用父元素来代理子元素的事件，好处是减少事件的绑定次数，提高性能</p><p><strong>事件代理使用场景:</strong></p><p>使用场景当多个相同的子元素绑定同一个事件，可以使用事件代理</p><p><strong>事件代理方法:</strong></p><p>事件代理是使用delegate方法来完成</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON的作用"><a href="#JSON的作用" class="headerlink" title="JSON的作用"></a>JSON的作用</h3><p><strong>JSON的介绍:</strong><br>JSON(JavaScript Object Notation,JS 对象简谱) 是一种轻量级的数据交换格式采用完全独立于编程语言的文本格式来存储和表示数据,简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言</p><p><strong>JSON的优点:</strong><br>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</p><p><strong>JSON的格式</strong></p><p>①对象格式</p><p>②数组格式</p><h4 id="对象格式"><a href="#对象格式" class="headerlink" title="对象格式"></a>对象格式</h4><ul><li><p>对象格式的JSON数据，使用一对大括号()，大括号里面放入<code>key:value</code>形式的键值对，多个键值对使用<strong>逗号</strong>分隔</p></li><li><p>对象格式的JSON数据:</p>  <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式说明:<br>  JOSN中的(key)属性名称和字符串值需要用双引号引起来，用单引号或者不用引号会导致读取数据错误</p></li></ul><h4 id="数组格式"><a href="#数组格式" class="headerlink" title="数组格式"></a>数组格式</h4><p><strong>数组格式:</strong></p><p>数组格式的JSON数据，使用一对中括号[]，中括号里面的数据使用逗号分隔</p><p><strong>数组格式的JSON数据:</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"programmer"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实际开发的JSON格式比较复杂:</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span> <span class="token operator">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token property">"hobby"</span> <span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"reading"</span><span class="token punctuation">,</span><span class="token string">"travel"</span><span class="token punctuation">,</span><span class="token string">"photography"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"school"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Merrimack College"</span><span class="token punctuation">,</span><span class="token property">"location"</span><span class="token operator">:</span><span class="token string">"North Andover, MA"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="json格式字符串转换成JavaScript对象"><a href="#json格式字符串转换成JavaScript对象" class="headerlink" title="json格式字符串转换成JavaScript对象"></a>json格式字符串转换成JavaScript对象</h4><p>JSON本质上是字符串，如果在js中操作JSON数据，可以将JSON字符串转化为JavaScript对象</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var sJson &#x3D;&#39;&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;&#39;;var oPerson&#x3D;JSON.parse(sJson);&#x2F;&#x2F; 操作属性alert(oPerson.name);alert(oPerson.age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;        &#x2F;&#x2F;对象格式的json数据        var sJson1 &#x3D; &#39;&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;&#39;;        &#x2F;&#x2F;数组格式的json数据        var sJson2 &#x3D; &#39;[&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;jack&quot;,&quot;age&quot;:50&#125;]&#39;;        &#x2F;&#x2F; 浏览器获取对象格式的josn数据转换成JavaScript对象        var oPerson &#x3D; JSON.parse(sJson1);        console.log(oPerson.name);        &#x2F;&#x2F;浏览器获取数组格式的josn数据转换成数组        var aArry &#x3D; JSON.parse(sJson2);        console.log(aArry);        &#x2F;&#x2F;服务器获取对象格式的josn数据转换成字典，数组格式的josn数据转换列表    &lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><h4 id="ajax的介绍"><a href="#ajax的介绍" class="headerlink" title="ajax的介绍"></a>ajax的介绍</h4><ul><li><p>它可以让 <strong>javascript</strong> 发送 <strong>ajax</strong> 是<code>Asynchronous JavaScript and XML</code>的简写，ajax一个前后台配合的技术异步的 http 请求，与后台通信进行数据的获取，<strong>ajax 最大的优点是实现局部刷新</strong></p></li><li><p><strong>ajax</strong>可以发送<strong>http请求</strong>当获取到后台数据的时候更新页面显示数据实现<strong>局部刷新</strong>，在这里大家只需要记住当前端页面想和后台服务器进行数据交互就可以使用ajax了</p></li></ul><p><img src="/2024/07/19/javascript/ajax.jpg" alt="image-20240727191105742"></p><p><strong>说明:</strong><br>对于浏览器来说唯一需要改变的数据只有天气数据,也就是<strong>局部数据的更新</strong></p><h5 id="ajax的使用"><a href="#ajax的使用" class="headerlink" title="ajax的使用"></a>ajax的使用</h5><ul><li><p><strong>ajax的实现</strong></p><p>  jquery将它封装成了一个方法$.ajax()</p><p>  我们可以直接用这个方法来执行ajax请求</p></li><li><p><strong>ajax方法的参数说明:</strong><br>  ur 请求地址</p><p>  type 请求方式，默认是’GET’，常用的还有 “POST”</p><p>  dataType设置返回的数据格式，常用的是’Json’格式</p><p>  data 设置发送给服务器的数据，没有参数不需要设置</p><p>  success 设置请求成功后的回调函数</p><p>  error 设置请求失败后的回调函数</p><p>  async 设置是否异步，默认值是”true’，表示异步，一般不用写</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ajax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 接口参考网址 http://doc.tianqiapi.com/603579查询天气网址'https://www.tianqiapi.com/api/ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 页面搭建 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>天气查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>请输入查询的城市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>查询<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">searchWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>查询结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>城市:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>天气:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>weather<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- ajax --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> ../../jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">searchWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input-text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token comment">// url 请求地址</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://tianqiapi.com/api/'</span><span class="token punctuation">,</span>                <span class="token comment">// type 请求方式，默认是'GET'，常用的还有'POST'</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>                <span class="token comment">// dataType 设置返回的数据格式，常用的是'json'格式</span>                <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                <span class="token comment">// data 设置发送给服务器的数据，没有参数不需要设置</span>                <span class="token comment">// city=北京</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"city="</span> <span class="token operator">+</span> city<span class="token punctuation">,</span>                <span class="token comment">//success 设置请求成功后的回调函数    resp服务器返回的数据</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#weather"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>                <span class="token comment">// error 设置请求失败后的回调函数</span>                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'获取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">// async 设置是否异步，默认值是'true'，表示异步，一般不用写</span>                <span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h2><h3 id="1-web框架概述"><a href="#1-web框架概述" class="headerlink" title="1.web框架概述"></a>1.web框架概述</h3><p><strong>web框架和web服务器的关系</strong></p><p>前面已经学习过web服务器,我们知道web服务器主要是接收用户的http请求根据用户的请求返回不同的资源数据，但是之前我们开发的是静态web服务器返回的都是静态资源数据，假如我们想要web服务器返回动态资源那么该如何进行处理呢 ?</p><p><strong>web框架:</strong><br>使用web框架专门负责处理用户的动态资源请求,这个web框架其实就是一个为web服务器提供服务的<strong>应用程序</strong>，简称web框架</p><h4 id="静态动态资源"><a href="#静态动态资源" class="headerlink" title="静态动态资源"></a>静态动态资源</h4><p><strong>静态资源:</strong></p><p>不需要经常变化的资源，这种资源web服务器可以提前准备好，比如: png&#x2F;jpg&#x2F;css&#x2F;js等文件<br><strong>动态资源:</strong><br>和静态资源相反,这种资源会经常变化，比如:我们在京东浏览商品时经常会根据条件进行筛选选择不同条件,浏览的商品就不同，这种资源web服务器无法提前准备好，需要web框架来帮web服务器进行准备，在这里web服务器可以把.html的资源请求认为是动态资源请求交由web框架进行处理</p><h4 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h4><p><img src="/2024/07/19/javascript/web%E6%A1%86%E6%9E%B6.jpg" alt="image-20240727204621413"></p><h4 id="WSGI协议"><a href="#WSGI协议" class="headerlink" title="WSGI协议"></a>WSGI协议</h4><p>web服务器和web框架之间进行协同工作的一个规则</p><p><img src="/2024/07/19/javascript/wsgi%E5%8D%8F%E8%AE%AE.jpg" alt="image-20240727205217349"></p><h3 id="框架程序开发"><a href="#框架程序开发" class="headerlink" title="框架程序开发"></a>框架程序开发</h3><p><img src="/2024/07/19/javascript/JavaScript%5C%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="alt text"><br><strong>框架职责介绍:</strong><br>接收web服务器的动态资源请求，给web服务器提供处理动态资源请求的服务</p><p><strong>服务器中动态资源判断:</strong><br>根据<strong>请求资源路径的后缀名</strong>进行判断<br>①请求资源路径的后缀名是.html则是动态资源请求,让web框架程序进行处理<br>②否则是静态资源请求，让web服务器程序进行处理</p><p><strong>web框架:</strong><br>③创建web框架程序<br>④接收web服务器的动态资源请求<br>⑤处理web服务器的动态资源请求并把处理结果返回给web服务器⑥web服务器把处理结果组装成响应报文发送给浏览器</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> json </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计</title>
      <link href="/2024/07/17/c-cheng-xu-she-ji/"/>
      <url>/2024/07/17/c-cheng-xu-she-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h2><h3 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h3><h4 id="1-1-第一个-C-程序"><a href="#1-1-第一个-C-程序" class="headerlink" title="1.1 第一个 C++程序"></a>1.1 第一个 C++程序</h4><p>编写一个 C++程序总共分为 4 个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h5 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h5><pre><code>Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</code></pre><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541383178746.png" alt="1541383178746"></p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541384366413.png" alt="1541384366413"></p><h5 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h5><p>右键源文件，选择添加-&gt;新建项</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541383817248.png" alt="1541383817248"></p><p>给 C++文件起个名称，然后点击添加即可。</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541384140042.png" alt="1541384140042"></p><h5 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h5><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541384818688.png" alt="1541384818688"></p><h4 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h4><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code><ul><li>通常放在一行代码的上方，或者一条语句的末尾，&#x3D;&#x3D;对该行代码说明&#x3D;&#x3D;</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，&#x3D;&#x3D;对该段代码做整体说明&#x3D;&#x3D;</li></ul></li></ol><p>提示：编译器在编译代码时，会忽略注释的内容</p><h4 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h4><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//变量的定义</span><span class="token comment">//语法：数据类型  变量名 = 初始值</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p><h4 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h4><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>&#x3D;&#x3D;通常在文件上方定义&#x3D;&#x3D;，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>&#x3D;&#x3D;通常在变量定义前加关键字 const&#x3D;&#x3D;，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1、宏常量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">day</span> <span class="token expression"><span class="token number">7</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"一周里总共有 "</span> <span class="token operator">&lt;&lt;</span> day <span class="token operator">&lt;&lt;</span> <span class="token string">" 天"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//day = 8;  //报错，宏常量不可以修改</span><span class="token comment">//2、const修饰变量</span><span class="token keyword">const</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"一年里总共有 "</span> <span class="token operator">&lt;&lt;</span> month <span class="token operator">&lt;&lt;</span> <span class="token string">" 个月份"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//month = 24; //报错，常量是不可以修改的</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h4><p><strong>作用：</strong>关键字是 C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h4 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h4><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h3><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h4><p><strong>作用</strong>：整型变量表示的是&#x3D;&#x3D;整数类型&#x3D;&#x3D;的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2 字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4 字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows 为 4 字节，Linux 为 4 字节(32 位)，8 字节(64 位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8 字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h4 id="2-2-sizeof-关键字"><a href="#2-2-sizeof-关键字" class="headerlink" title="2.2 sizeof 关键字"></a>2.2 sizeof 关键字</h4><p><strong>作用：</strong>利用 sizeof 关键字可以&#x3D;&#x3D;统计数据类型所占内存大小&#x3D;&#x3D;</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"short 类型所占内存空间为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"int 类型所占内存空间为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"long 类型所占内存空间为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"long long 类型所占内存空间为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>整型结论</strong>：&#x3D;&#x3D;short &lt; int &lt;&#x3D; long &lt;&#x3D; long long&#x3D;&#x3D;</p><h4 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h4><p><strong>作用</strong>：用于&#x3D;&#x3D;表示小数&#x3D;&#x3D;</p><p>浮点型变量分为两种：</p><ol><li>单精度 float</li><li>双精度 double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>7 位有效数字</td></tr><tr><td>double</td><td>8 字节</td><td>15 ～ 16 位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> f1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> d1<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"float  sizeof = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"double sizeof = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//科学计数法</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token number">3e2</span><span class="token punctuation">;</span> <span class="token comment">// 3 * 10 ^ 2</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f2 = "</span> <span class="token operator">&lt;&lt;</span> f2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">float</span> f3 <span class="token operator">=</span> <span class="token number">3e-2</span><span class="token punctuation">;</span>  <span class="token comment">// 3 * 0.1 ^ 2</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f3 = "</span> <span class="token operator">&lt;&lt;</span> f3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h4><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p><p>注意 1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p><p>注意 2：单引号内只能有一个字符，不可以是字符串</p><ul><li>C 和 C++中字符型变量只占用&#x3D;&#x3D;1 个字节&#x3D;&#x3D;。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//ch = "abcde"; //错误，不可以用双引号</span><span class="token comment">//ch = 'abcde'; //错误，单引号内只能引用一个字符</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//查看字符a对应的ASCII码</span>ch <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span> <span class="token comment">//可以直接用ASCII给字符型变量赋值</span>cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASCII 码表格：</p><p>| <strong>ASCII</strong>值 | <strong>控制字符</strong> | <strong>ASCII</strong>值 | <strong>字符</strong> | <strong>ASCII</strong>值 | <strong>字符</strong> | <strong>ASCII</strong>值 | <strong>字符</strong> |<br>| ———– | ———— | ———– | ——– | ———– | ——– | ———– | ——– | — |<br>| 0           | NUT          | 32          | (space)  | 64          | @        | 96          | 、       |<br>| 1           | SOH          | 33          | !        | 65          | A        | 97          | a        |<br>| 2           | STX          | 34          | “        | 66          | B        | 98          | b        |<br>| 3           | ETX          | 35          | #        | 67          | C        | 99          | c        |<br>| 4           | EOT          | 36          | $        | 68          | D        | 100         | d        |<br>| 5           | ENQ          | 37          | %        | 69          | E        | 101         | e        |<br>| 6           | ACK          | 38          | &amp;        | 70          | F        | 102         | f        |<br>| 7           | BEL          | 39          | ,        | 71          | G        | 103         | g        |<br>| 8           | BS           | 40          | (        | 72          | H        | 104         | h        |<br>| 9           | HT           | 41          | )        | 73          | I        | 105         | i        |<br>| 10          | LF           | 42          | *       | 74          | J        | 106         | j        |<br>| 11          | VT           | 43          | +        | 75          | K        | 107         | k        |<br>| 12          | FF           | 44          | ,        | 76          | L        | 108         | l        |<br>| 13          | CR           | 45          | -        | 77          | M        | 109         | m        |<br>| 14          | SO           | 46          | .        | 78          | N        | 110         | n        |<br>| 15          | SI           | 47          | &#x2F;        | 79          | O        | 111         | o        |<br>| 16          | DLE          | 48          | 0        | 80          | P        | 112         | p        |<br>| 17          | DCI          | 49          | 1        | 81          | Q        | 113         | q        |<br>| 18          | DC2          | 50          | 2        | 82          | R        | 114         | r        |<br>| 19          | DC3          | 51          | 3        | 83          | S        | 115         | s        |<br>| 20          | DC4          | 52          | 4        | 84          | T        | 116         | t        |<br>| 21          | NAK          | 53          | 5        | 85          | U        | 117         | u        |<br>| 22          | SYN          | 54          | 6        | 86          | V        | 118         | v        |<br>| 23          | TB           | 55          | 7        | 87          | W        | 119         | w        |<br>| 24          | CAN          | 56          | 8        | 88          | X        | 120         | x        |<br>| 25          | EM           | 57          | 9        | 89          | Y        | 121         | y        |<br>| 26          | SUB          | 58          | :        | 90          | Z        | 122         | z        |<br>| 27          | ESC          | 59          | ;        | 91          | [        | 123         | {        |<br>| 28          | FS           | 60          | &lt;        | 92          | &#x2F;        | 124         |          |     |<br>| 29          | GS           | 61          | &#x3D;        | 93          | ]        | 125         | }        |<br>| 30          | RS           | 62          | &gt;        | 94          | ^        | 126         | &#96;        |<br>| 31          | US           | 63          | ?        | 95          | _       | 127         | DEL      |</p><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h4 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h4><p><strong>作用：</strong>用于表示一些&#x3D;&#x3D;不能显示出来的 ASCII 字符&#x3D;&#x3D;</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT) （跳到下一个 TAB 位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>&#39;</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字 0</td><td>000</td></tr><tr><td>\ddd</td><td>8 进制转义字符，d 范围 0~7</td><td>3 位 8 进制</td></tr><tr><td>\xhh</td><td>16 进制转义字符，h 范围 0<del>9，a</del>f，A~F</td><td>3 位 16 进制</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\\"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\tHello"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h4><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C 风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：C 风格的字符串要用双引号括起来</p><ol><li><p><strong>C++风格字符串</strong>： <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>string str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：C++风格字符串，需要加入头文件&#x3D;&#x3D;#include&lt;string&gt;&#x3D;&#x3D;</p><h4 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h4><p><strong>作用：</strong>布尔数据类型代表真或假的值</p><p>bool 类型只有两个值：</p><ul><li>true — 真（本质是 1）</li><li>false — 假（本质是 0）</li></ul><p><strong>bool 类型占&#x3D;&#x3D;1 个字节&#x3D;&#x3D;大小</strong></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> flag <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> flag <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 0</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of bool = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//1</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h4><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//整型输入</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入整型变量："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//浮点型输入</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入浮点型变量："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> d<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//字符型输入</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入字符型变量："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//字符串型输入</span>string str<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入字符串型变量："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> str<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//布尔类型输入</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入布尔型变量："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> flag<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> flag <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h3><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h4 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h4><p><strong>作用</strong>：用于处理四则运算</p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10 &#x2F; 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a&#x3D;2; b&#x3D;++a;</td><td>a&#x3D;3; b&#x3D;3;</td></tr><tr><td>++</td><td>后置递增</td><td>a&#x3D;2; b&#x3D;a++;</td><td>a&#x3D;3; b&#x3D;2;</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2; b&#x3D;–a;</td><td>a&#x3D;1; b&#x3D;1;</td></tr><tr><td>–</td><td>后置递减</td><td>a&#x3D;2; b&#x3D;a–;</td><td>a&#x3D;1; b&#x3D;2;</td></tr></tbody></table><p><strong>示例 1：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//加减乘除</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a1 <span class="token operator">+</span> b1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a1 <span class="token operator">-</span> b1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a1 <span class="token operator">*</span> b1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a1 <span class="token operator">/</span> b1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//两个整数相除结果依然是整数</span><span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a2 <span class="token operator">/</span> b2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span><span class="token comment">//两个小数可以相除</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> d1 <span class="token operator">/</span> d2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：在除法运算中，除数不能为 0</p><p><strong>示例 2：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//取模</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a2 <span class="token operator">%</span> b2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span><span class="token comment">//两个小数不可以取模</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：只有整型变量可以进行取模运算</p><p><strong>示例 3：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//递增</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//后置递增</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//等价于a = a + 1</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 11</span><span class="token comment">//前置递增</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 11</span><span class="token comment">//区别</span><span class="token comment">//前置递增先对变量进行++，再计算表达式</span><span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token operator">++</span>a2 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//后置递增先计算表达式，后对变量进行++</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b3 <span class="token operator">=</span> a3<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p><h4 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h4><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2; b&#x3D;3;</td><td>a&#x3D;2; b&#x3D;3;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; a-&#x3D;3;</td><td>a&#x3D;2;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%2;</td><td>a&#x3D;1;</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//赋值运算符</span><span class="token comment">// =</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// +=</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// a = a + 2;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// -=</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// a = a - 2</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// *=</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// a = a * 2</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// /=</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// a = a / 2;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// %=</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// a = a % 2;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h4><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 1</td><td>1</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 0</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 0</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 0</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：C 和 C++ 语言的比较运算中， &#x3D;&#x3D;“真”用数字“1”来表示， “假”用数字“0”来表示。&#x3D;&#x3D;</p><h4 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h4><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果 a 为假，则!a 为真； 如果 a 为真，则!a 为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果 a 和 b 都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果 a 和 b 有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例 1：</strong>逻辑非</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//逻辑运算符  --- 非</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 0</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span><span class="token operator">!</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 真变假，假变真</p><p><strong>示例 2：</strong>逻辑与</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//逻辑运算符  --- 与</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 1</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 0</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：逻辑&#x3D;&#x3D;与&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同真为真，其余为假&#x3D;&#x3D;</p><p><strong>示例 3：</strong>逻辑或</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//逻辑运算符  --- 或</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 1</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 1</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑&#x3D;&#x3D;或&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同假为假，其余为真&#x3D;&#x3D;</p><h3 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h3><p>C&#x2F;C++支持最基本的三种程序运行结构：&#x3D;&#x3D;顺序结构、选择结构、循环结构&#x3D;&#x3D;</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h4 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h4><h5 id="4-1-1-if-语句"><a href="#4-1-1-if-语句" class="headerlink" title="4.1.1 if 语句"></a>4.1.1 if 语句</h5><p><strong>作用：</strong>执行满足条件的语句</p><p>if 语句的三种形式</p><ul><li><p>单行格式 if 语句</p></li><li><p>多行格式 if 语句</p></li><li><p>多条件的 if 语句</p></li></ul><ol><li><p>单行格式 if 语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//选择结构-单行if语句</span><span class="token comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入一个分数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> score<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"您输入的分数为： "</span> <span class="token operator">&lt;&lt;</span> score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//if语句</span><span class="token comment">//注意事项，在if判断语句后面，不要加分号</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了一本大学！！！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：if 条件表达式后不要加分号</p><ol start="2"><li>多行格式 if 语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1541662519170.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入考试分数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> score<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了一本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我未考上一本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多条件的 if 语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1541662566808.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入考试分数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> score<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了一本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了二本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了三本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我未考上本科"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套 if 语句</strong>：在 if 语句中，可以嵌套使用 if 语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于 600 分视为考上一本，大于 500 分考上二本，大于 400 考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 考入人大。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入考试分数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> score<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了一本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了北大"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">650</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了清华"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了人大"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了二本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我考上了三本大学"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我未考上本科"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪 ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2024/07/17/c-cheng-xu-she-ji/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p><h5 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h5><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式 1 的值为真，执行表达式 2，并返回表达式 2 的结果；</p><p>如果表达式 1 的值为假，执行表达式 3，并返回表达式 3 的结果。</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//C++中三目运算符返回的是变量,可以继续赋值</span><span class="token punctuation">(</span>a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：和 if 语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p><h5 id="4-1-3-switch-语句"><a href="#4-1-3-switch-语句" class="headerlink" title="4.1.3 switch 语句"></a>4.1.3 switch 语句</h5><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> 结果<span class="token number">1</span>：执行语句<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 结果<span class="token number">2</span>：执行语句<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token operator">:</span>执行语句<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//请给电影评分</span><span class="token comment">//10 ~ 9   经典</span><span class="token comment">// 8 ~ 7   非常好</span><span class="token comment">// 6 ~ 5   一般</span><span class="token comment">// 5分以下 烂片</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请给电影打分"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> score<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"经典"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"非常好"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"一般"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"烂片"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 1：switch 语句中表达式类型只能是整型或者字符型</p><p>注意 2：case 里如果没有 break，那么程序会一直向下执行</p><p>总结：与 if 语句比，对于多条件判断时，switch 的结构清晰，执行效率高，缺点是 switch 不可以判断区间</p><h4 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h4><h5 id="4-2-1-while-循环语句"><a href="#4-2-1-while-循环语句" class="headerlink" title="4.2.1 while 循环语句"></a>4.2.1 while 循环语句</h5><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>&#x3D;&#x3D;只要循环条件的结果为真，就执行循环语句&#x3D;&#x3D;</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1541668640382.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p><p><strong>while 循环练习案例：</strong>&#x3D;&#x3D;猜数字&#x3D;&#x3D;</p><p><strong>案例描述：</strong>系统随机生成一个 1 到 100 之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p><h5 id="4-2-2-do…while-循环语句"><a href="#4-2-2-do…while-循环语句" class="headerlink" title="4.2.2 do…while 循环语句"></a>4.2.2 do…while 循环语句</h5><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p><strong>注意：</strong>与 while 的区别在于&#x3D;&#x3D;do…while 会先执行一次循环语句&#x3D;&#x3D;，再判断循环条件</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1541671163478.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：与 while 循环区别在于，do…while 先执行一次循环语句，再判断循环条件</p><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3 次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 &#x3D; 153</p><p>请利用 do…while 语句，求出所有 3 位数中的水仙花数</p><h5 id="4-2-3-for-循环语句"><a href="#4-2-3-for-循环语句" class="headerlink" title="4.2.3 for 循环语句"></a>4.2.3 for 循环语句</h5><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详解：</strong></p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541673704101.png" alt="1541673704101"></p><p>注意：for 循环中的表达式，要用分号进行分隔</p><p>总结：while , do…while, for 都是开发中常用的循环语句，for 循环结构比较清晰，比较常用</p><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从 1 开始数到数字 100， 如果数字个位含有 7，或者数字十位含有 7，或者该数字是 7 的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/timg.gif" alt="timg"></p><h5 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h5><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541676003486.png" alt="1541676003486"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//外层循环执行1次，内层循环执行1轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/0006018857256120_b.jpg" alt="0006018857256120_b"></p><h4 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h4><h5 id="4-3-1-break-语句"><a href="#4-3-1-break-语句" class="headerlink" title="4.3.1 break 语句"></a>4.3.1 break 语句</h5><p><strong>作用:</strong> 用于跳出&#x3D;&#x3D;选择结构&#x3D;&#x3D;或者&#x3D;&#x3D;循环结构&#x3D;&#x3D;</p><p>break 使用的时机：</p><ul><li>出现在 switch 条件语句中，作用是终止 case 并跳出 switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例 1：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1、在switch 语句中使用break</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请选择您挑战副本的难度："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1、普通"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2、中等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3、困难"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> num<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"您选择的是普通难度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"您选择的是中等难度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"您选择的是困难难度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2、在循环语句中用break</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出循环语句</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在嵌套循环语句中使用break，退出内层循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-3-2-continue-语句"><a href="#4-3-2-continue-语句" class="headerlink" title="4.3.2 continue 语句"></a>4.3.2 continue 语句</h5><p><strong>作用：</strong>在&#x3D;&#x3D;循环语句&#x3D;&#x3D;中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：continue 并没有使整个循环终止，而 break 会跳出循环</p><h5 id="4-3-3-goto-语句"><a href="#4-3-3-goto-语句" class="headerlink" title="4.3.3 goto 语句"></a>4.3.3 goto 语句</h5><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">goto</span> FLAG<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>FLAG<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在程序中不建议使用 goto 语句，以免造成程序流程混乱</p><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h3><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点 1：</strong>数组中的每个&#x3D;&#x3D;数据元素都是相同的数据类型&#x3D;&#x3D;</p><p><strong>特点 2：</strong>数组是由&#x3D;&#x3D;连续的内存&#x3D;&#x3D;位置组成的</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541748375356.png" alt="1541748375356"></p><h4 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h4><h5 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h5><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p>示例</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义方式1</span><span class="token comment">//数据类型 数组名[元素个数];</span><span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//利用下标赋值</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span><span class="token comment">//利用下标输出</span>cout <span class="token operator">&lt;&lt;</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第二种定义方式</span><span class="token comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span><span class="token comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span><span class="token keyword">int</span> score2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//逐个输出</span><span class="token comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span><span class="token comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span><span class="token comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> score2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义方式3</span><span class="token comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span><span class="token keyword">int</span> score3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> score3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结 1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p><p>总结 2：数组中下标是从 0 开始索引</p><h5 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h5><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//数组名用途</span><span class="token comment">//1、可以获取整个数组占用内存空间大小</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"整个数组所占内存空间为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"每个元素所占内存空间为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数组的元素个数为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//2、可以通过数组名获取到数组首地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数组首地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>arr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数组中第一个元素地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数组中第二个元素地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：数组名是常量，不可以赋值</p><p>总结 1：直接打印数组名，可以查看数组所占内存的首地址</p><p>总结 2：对数组名进行 sizeof，可以获取整个数组占内存空间的大小</p><p><strong>练习案例 1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] &#x3D; {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例 2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个 5 个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h5 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h5><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h4><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1541905559138.png" alt="1541905559138"></p><h5 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h5><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li></ol><p>建议：以上 4 种定义方式，利用&#x3D;&#x3D;第二种更加直观，提高代码的可读性&#x3D;&#x3D;</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//方式1</span><span class="token comment">//数组类型 数组名 [行数][列数]</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方式2</span><span class="token comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方式3</span><span class="token comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方式4</span><span class="token comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><span class="token keyword">int</span> arr4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p><h5 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h5><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//二维数组数组名</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组大小： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组一行大小： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组元素大小： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组行数： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组列数： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组首地址："</span> <span class="token operator">&lt;&lt;</span> arr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组第一行地址："</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组第二行地址："</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组第一个元素地址："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二维数组第二个元素地址："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结 1：二维数组名就是这个数组的首地址</p><p>总结 2：对二维数组名进行 sizeof 时，可以获取整个二维数组占用的内存空间大小</p><h5 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h5><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> scores<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"同学总成绩为： "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h3><h4 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h4><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h4 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h4><p>函数的定义一般主要有 5 个步骤：</p><p>1、返回值类型</p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句</p><p>5、return 表达式</p><p><strong>语法：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">返回值类型 函数名 （参数列表）<span class="token punctuation">&#123;</span>       函数体语句       <span class="token keyword">return</span>表达式<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return 表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数定义</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h4><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数定义</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token comment">//定义中的num1,num2称为形式参数，简称形参</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//调用add函数</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用时的a，b称为实际参数，简称实参</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p><h4 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h4><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，&#x3D;&#x3D;如果形参发生，并不会影响实参&#x3D;&#x3D;</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换前："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num1 = "</span> <span class="token operator">&lt;&lt;</span> num1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num2 = "</span> <span class="token operator">&lt;&lt;</span> num2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> num1<span class="token punctuation">;</span>num1 <span class="token operator">=</span> num2<span class="token punctuation">;</span>num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换后："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num1 = "</span> <span class="token operator">&lt;&lt;</span> num1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num2 = "</span> <span class="token operator">&lt;&lt;</span> num2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mian中的 a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mian中的 b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 值传递时，形参是修饰不了实参的</p><h4 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h4><p>常见的函数样式有 4 种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数常见样式</span><span class="token comment">//1、 无参无返</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is test01"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//test01(); 函数调用</span><span class="token punctuation">&#125;</span><span class="token comment">//2、 有参无返</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is test02"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、无参有返</span><span class="token keyword">int</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is test03 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4、有参有返</span><span class="token keyword">int</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is test04 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h4><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//声明可以多次，定义只能一次</span><span class="token comment">//声明</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h4><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有 4 个步骤</p><ol><li>创建后缀名为.h 的头文件</li><li>创建后缀名为.cpp 的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//swap.h文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//实现两个数字交换的函数声明</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//swap.cpp文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"swap.h"</span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//main函数文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"swap.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h3><h4 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h4><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li>内存编号是从 0 开始记录的，一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h4 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h4><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1、指针的定义</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//定义整型变量a</span><span class="token comment">//指针定义语法： 数据类型 * 变量名 ;</span><span class="token keyword">int</span> <span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token comment">//指针变量赋值</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指针指向变量a的地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//打印数据a的地址</span>cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//打印指针变量p</span><span class="token comment">//2、指针的使用</span><span class="token comment">//通过*操作指针变量指向的内存</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><p>总结 1： 我们可以通过 &amp; 符号 获取变量的地址</p><p>总结 2：利用指针可以记录地址</p><p>总结 3：对指针变量解引用，可以操作指针指向的内存</p><h4 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h4><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指针指向数据a的地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//* 解引用</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：所有指针类型在 32 位操作系统下是 4 个字节</p><h4 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h4><p><strong>空指针</strong>：指针变量指向内存中编号为 0 的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例 1：空指针</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//指针变量p指向内存地址编号为0的空间</span><span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//访问空指针报错</span><span class="token comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例 2：野指针</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//指针变量p指向内存地址编号为0x1100的空间</span><span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1100</span><span class="token punctuation">;</span><span class="token comment">//访问野指针报错</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p><h4 id="7-5-const-修饰指针"><a href="#7-5-const-修饰指针" class="headerlink" title="7.5 const 修饰指针"></a>7.5 const 修饰指针</h4><p>const 修饰指针有三种情况</p><ol><li>const 修饰指针 — 常量指针</li><li>const 修饰常量 — 指针常量</li><li>const 即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span> <span class="token comment">//正确</span><span class="token comment">//*p1 = 100;  报错</span><span class="token comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//p2 = &amp;b; //错误</span><span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//正确</span>    <span class="token comment">//const既修饰指针又修饰常量</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//p3 = &amp;b; //错误</span><span class="token comment">//*p3 = 100; //错误</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>技巧：看 const 右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p><h4 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h4><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token comment">//指向数组的指针</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个元素： "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"指针访问第一个元素： "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//利用指针遍历数组</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h4><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//值传递</span><span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//地址传递</span><span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span><span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span><span class="token operator">*</span>p2 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 值传递不会改变实参</span><span class="token function">swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址传递会改变实参</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p><h4 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h4><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//冒泡排序函数</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>  <span class="token comment">//int * arr 也可以写为int arr[]</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组函数</span><span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p><h3 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h3><h4 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h4><p>结构体属于用户&#x3D;&#x3D;自定义的数据类型&#x3D;&#x3D;，允许用户存储不同的数据类型</p><h4 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h4><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 &#x3D; { 成员 1 值 ， 成员 2 值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span><span class="token comment">//成员列表</span>string name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment">//分数</span><span class="token punctuation">&#125;</span>stu3<span class="token punctuation">;</span> <span class="token comment">//结构体变量创建方式3</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//结构体变量创建方式1</span><span class="token keyword">struct</span> <span class="token class-name">student</span> stu1<span class="token punctuation">;</span> <span class="token comment">//struct 关键字可以省略</span>stu1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> stu1<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> stu1<span class="token punctuation">.</span>age  <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu1<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//结构体变量创建方式2</span><span class="token keyword">struct</span> <span class="token class-name">student</span> stu2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">60</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> stu2<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> stu2<span class="token punctuation">.</span>age  <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu2<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>stu3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"王五"</span><span class="token punctuation">;</span>stu3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>stu3<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> stu3<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> stu3<span class="token punctuation">.</span>age  <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu3<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结 1：定义结构体时的关键字是 struct，不可省略</p><p>总结 2：创建结构体变量时，关键字 struct 可以省略</p><p>总结 3：结构体变量利用操作符 ‘’.’’ 访问成员</p><h4 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h4><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span><span class="token comment">//成员列表</span>string name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment">//分数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//结构体数组</span><span class="token keyword">struct</span> <span class="token class-name">student</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">80</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">60</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">70</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h4><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span><span class="token comment">//成员列表</span>string name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment">//分数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">;</span>p<span class="token operator">-></span>score <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment">//指针通过 -> 操作符可以访问成员</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>age <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p><h4 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h4><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//学生结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span><span class="token comment">//成员列表</span>string name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment">//分数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//教师结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">teacher</span><span class="token punctuation">&#123;</span>    <span class="token comment">//成员列表</span><span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//职工编号</span>string name<span class="token punctuation">;</span>  <span class="token comment">//教师姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token comment">//教师年龄</span><span class="token keyword">struct</span> <span class="token class-name">student</span> stu<span class="token punctuation">;</span> <span class="token comment">//子结构体 学生</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">teacher</span> t1<span class="token punctuation">;</span>t1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"老王"</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"教师 职工编号： "</span> <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">.</span>id <span class="token operator">&lt;&lt;</span> <span class="token string">" 姓名： "</span> <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"辅导学员 姓名： "</span> <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">" 考试分数： "</span> <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h4 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h4><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//学生结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span><span class="token comment">//成员列表</span>string name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment">//分数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//值传递</span><span class="token keyword">void</span> <span class="token function">printStudent</span><span class="token punctuation">(</span>student stu <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"子函数中 姓名："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>age  <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//地址传递</span><span class="token keyword">void</span> <span class="token function">printStudent2</span><span class="token punctuation">(</span>student <span class="token operator">*</span>stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stu<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"子函数中 姓名："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> stu<span class="token operator">-></span>age  <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token operator">-></span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>student stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//值传递</span><span class="token function">printStudent</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"主函数中 姓名："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//地址传递</span><span class="token function">printStudent2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"主函数中 姓名："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>age  <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p><h4 id="8-7-结构体中-const-使用场景"><a href="#8-7-结构体中-const-使用场景" class="headerlink" title="8.7 结构体中 const 使用场景"></a>8.7 结构体中 const 使用场景</h4><p><strong>作用：</strong>用 const 来防止误操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//学生结构体定义</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span><span class="token comment">//成员列表</span>string name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment">//分数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//const使用场景</span><span class="token keyword">void</span> <span class="token function">printStudent</span><span class="token punctuation">(</span><span class="token keyword">const</span> student <span class="token operator">*</span>stu<span class="token punctuation">)</span> <span class="token comment">//加const防止函数体中的误操作</span><span class="token punctuation">&#123;</span><span class="token comment">//stu->age = 100; //操作失败，因为加了const修饰</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token operator">-></span>age <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> stu<span class="token operator">-></span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>student stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printStudent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h4><h5 id="8-8-1-案例-1"><a href="#8-8-1-案例-1" class="headerlink" title="8.8.1 案例 1"></a>8.8.1 案例 1</h5><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领 5 个学生，总共有 3 名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放 5 名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放 3 名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Teacher</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span>Student sArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">allocateSpace</span><span class="token punctuation">(</span>Teacher tArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string tName <span class="token operator">=</span> <span class="token string">"教师"</span><span class="token punctuation">;</span>string sName <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>string nameSeed <span class="token operator">=</span> <span class="token string">"ABCDE"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> tName <span class="token operator">+</span> nameSeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> sName <span class="token operator">+</span> nameSeed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>tArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">61</span> <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printTeachers</span><span class="token punctuation">(</span>Teacher tArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> tArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t姓名："</span> <span class="token operator">&lt;&lt;</span> tArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 分数："</span> <span class="token operator">&lt;&lt;</span> tArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//随机数种子 头文件 #include &lt;ctime></span>Teacher tArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//老师数组</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tArray<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">allocateSpace</span><span class="token punctuation">(</span>tArray<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建数据</span><span class="token function">printTeachers</span><span class="token punctuation">(</span>tArray<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印数据</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-8-2-案例-2"><a href="#8-8-2-案例-2" class="headerlink" title="8.8.2 案例 2"></a>8.8.2 案例 2</h5><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放 5 名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span><span class="token string">"刘备"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"关羽"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"赵云"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"貂蝉"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//英雄结构体</span><span class="token keyword">struct</span> <span class="token class-name">hero</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>string sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//冒泡排序</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>hero arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hero temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printHeros</span><span class="token punctuation">(</span>hero arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" 性别： "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">hero</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"刘备"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"关羽"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"赵云"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"貂蝉"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取数组元素个数</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//排序</span><span class="token function">printHeros</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h2><p>本阶段主要针对 C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨 C++中的核心和精髓。</p><h3 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h3><p>C++程序在执行时，将内存大方向划分为<strong>4 个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h4 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h4><pre><code>在程序编译后，生成了exe可执行程序，**未执行该程序前**分为两个区域**代码区：**    存放 CPU 执行的机器指令    代码区是**共享**的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可    代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令**全局区：**    全局变量和静态变量存放在此.    全局区还包含了常量区, 字符串常量和其他常量也存放在此.    ==该区域的数据在程序结束后由操作系统释放==.</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//全局变量</span><span class="token keyword">int</span> g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//全局常量</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//局部变量</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//打印地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_a地址为： "</span> <span class="token operator">&lt;&lt;</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_b地址为： "</span> <span class="token operator">&lt;&lt;</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//静态变量</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const 修饰的全局常量 和 字符串常量</li></ul><h4 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h4><pre><code>**栈区：**    由编译器自动分配释放, 存放函数的参数值,局部变量等    注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>**堆区：**    由程序员分配释放,若程序员不释放,程序结束时由操作系统回收    在C++中主要利用new在堆区开辟内存</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用 new 关键字进行开辟内存</p><h4 id="1-3-new-操作符"><a href="#1-3-new-操作符" class="headerlink" title="1.3 new 操作符"></a>1.3 new 操作符</h4><pre><code>C++中利用==new==操作符在堆区开辟数据堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==语法：` new 数据类型`利用new创建的数据，会返回该数据对应的类型的指针</code></pre><p><strong>示例 1： 基本语法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//利用delete释放堆区数据</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：开辟数组</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//堆区开辟数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//释放数组 delete 后加 []</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h3><h4 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h4><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h4><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//int &amp;c; //错误，引用必须初始化</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//一旦初始化后，就不可以更改</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">//这是赋值操作，不是更改引用</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h4><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1. 值传递</span><span class="token keyword">void</span> <span class="token function">mySwap01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2. 地址传递</span><span class="token keyword">void</span> <span class="token function">mySwap02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3. 引用传递</span><span class="token keyword">void</span> <span class="token function">mySwap03</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">mySwap01</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">mySwap02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">mySwap03</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p><h4 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h4><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//返回局部变量引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//局部变量</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回静态变量引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//不能返回局部变量的引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref = "</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref = "</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//如果函数做左值，那么必须返回引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref2 <span class="token operator">=</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref2 = "</span> <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h4 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h4><p>本质：<strong>引用的本质在 c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//发现是引用，转换为 int* const ref = &amp;a;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ref <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// ref是引用，转换为*ref = 100</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> a<span class="token punctuation">;</span>ref <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref:"</span> <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h4 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h4><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加&#x3D;&#x3D;const 修饰形参&#x3D;&#x3D;，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//引用使用的场景，通常用来修饰形参</span><span class="token keyword">void</span> <span class="token function">showValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//v += 10;</span>cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span><span class="token comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//ref = 100;  //加入const后不可以修改变量</span>cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//函数中利用常量引用防止误操作修改实参</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">showValue</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h3><h4 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h4><p>在 C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><span class="token comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h4><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数占位参数 ，占位参数也可以有默认参数</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//占位参数必须填补</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h4><h5 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h5><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong> 函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数重载需要函数都在同一个作用域下</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func 的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (int a) 的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (double a)的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (int a ,double b) 的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (double a ,int b)的调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数返回值不可以作为函数重载条件</span><span class="token comment">//int func(double a, int b)</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h5><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数重载注意事项</span><span class="token comment">//1、引用作为重载条件</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (int &amp;a) 调用 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func (const int &amp;a) 调用 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、函数重载碰到函数默认参数</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2(int a, int b = 10) 调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2(int a) 调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用无const</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用有const</span><span class="token comment">//func2(10); //碰到默认参数产生歧义，需要避免</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h3><p>C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p><p>C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为</p><p><strong>例如：</strong></p><pre><code>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</code></pre><h4 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h4><h5 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1 封装的意义"></a>4.1.1 封装的意义</h5><p>封装是 C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><pre><code>在设计类的时候，属性和行为写在一起，表现事物</code></pre><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p><strong>示例 1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//圆周率</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment">//1、封装的意义</span><span class="token comment">//将属性和行为作为一个整体，用来表现生活中的事物</span><span class="token comment">//封装一个圆类，求圆的周长</span><span class="token comment">//class代表设计一个类，后面跟着的是类名</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">//访问权限  公共的权限</span><span class="token comment">//属性</span><span class="token keyword">int</span> m_r<span class="token punctuation">;</span><span class="token comment">//半径</span><span class="token comment">//行为</span><span class="token comment">//获取到圆的周长</span><span class="token keyword">double</span> <span class="token function">calculateZC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//2 * pi  * r</span><span class="token comment">//获取圆的周长</span><span class="token keyword">return</span>  <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> m_r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//通过圆类，创建圆的对象</span><span class="token comment">// c1就是一个具体的圆</span>Circle c1<span class="token punctuation">;</span>c1<span class="token punctuation">.</span>m_r <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//给圆对象的半径 进行赋值操作</span><span class="token comment">//2 * pi * 10 = = 62.8</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"圆的周长为： "</span> <span class="token operator">&lt;&lt;</span> c1<span class="token punctuation">.</span><span class="token function">calculateZC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例 2 代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//学生类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setID</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" ID:"</span> <span class="token operator">&lt;&lt;</span> m_id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_name<span class="token punctuation">;</span><span class="token keyword">int</span> m_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Student stu<span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"德玛西亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">setID</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public 公共权限</li><li>protected 保护权限</li><li>private 私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//三种权限</span><span class="token comment">//公共权限  public     类内可以访问  类外可以访问</span><span class="token comment">//保护权限  protected  类内可以访问  类外不可以访问</span><span class="token comment">//私有权限  private    类内可以访问  类外不可以访问</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//姓名  公共权限</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span><span class="token comment">//汽车  保护权限</span><span class="token keyword">protected</span><span class="token operator">:</span>string m_Car<span class="token punctuation">;</span><span class="token comment">//银行卡密码  私有权限</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_Password<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_Name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>m_Car <span class="token operator">=</span> <span class="token string">"拖拉机"</span><span class="token punctuation">;</span>m_Password <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span>p<span class="token punctuation">.</span>m_Name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span><span class="token comment">//p.m_Car = "奔驰";  //保护权限类外访问不到</span><span class="token comment">//p.m_Password = 123; //私有权限类外访问不到</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-1-2-struct-和-class-区别"><a href="#4-1-2-struct-和-class-区别" class="headerlink" title="4.1.2 struct 和 class 区别"></a>4.1.2 struct 和 class 区别</h5><p>在 C++中 struct 和 class 唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class 默认权限为私有</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span>  m_A<span class="token punctuation">;</span> <span class="token comment">//默认是私有权限</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C2</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span>  <span class="token comment">//默认是公共权限</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>C1 c1<span class="token punctuation">;</span>c1<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//错误，访问权限是私有</span>C2 c2<span class="token punctuation">;</span>c2<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//正确，访问权限是公共</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h5><p><strong>优点 1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点 2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//姓名设置可读可写</span><span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取年龄</span><span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置年龄</span><span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"你个老妖精!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//情人设置为只写</span><span class="token keyword">void</span> <span class="token function">setLover</span><span class="token punctuation">(</span>string lover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_Lover <span class="token operator">=</span> lover<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span> <span class="token comment">//可读可写  姓名</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span> <span class="token comment">//只读  年龄</span>string m_Lover<span class="token punctuation">;</span> <span class="token comment">//只写  情人</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span><span class="token comment">//姓名设置</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//年龄设置</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//情人设置</span>p<span class="token punctuation">.</span><span class="token function">setLover</span><span class="token punctuation">(</span><span class="token string">"苍井"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; "情人： " &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例 1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例 2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1545533829184.png" alt="1545533829184"></p><h4 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h4><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h5 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h5><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><pre><code>一个对象或者变量没有初始状态，对其使用后果是未知同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</code></pre><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写 void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写 void</li><li>函数名称与类名相同,在名称前加上符号 ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person的构造函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//析构函数</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person的析构函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h5><p>两种分类方式：</p><pre><code>按参数分为： 有参构造和无参构造按类型分为： 普通构造和拷贝构造</code></pre><p>三种调用方式：</p><pre><code>括号法显示法隐式转换法</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1、构造函数分类</span><span class="token comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span><span class="token comment">// 按照类型分类分为 普通构造和拷贝构造</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//无参（默认）构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//有参构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//拷贝构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//析构函数</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//2、构造函数的调用</span><span class="token comment">//调用无参构造函数</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span> <span class="token comment">//调用无参构造函数</span><span class="token punctuation">&#125;</span><span class="token comment">//调用有参的构造函数</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2.1  括号法，常用</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span><span class="token comment">//Person p2();</span><span class="token comment">//2.2 显式法</span>Person p2 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p3 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span><span class="token comment">//2.3 隐式转换法</span>Person p4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Person p4 = Person(10);</span>Person p5 <span class="token operator">=</span> p4<span class="token punctuation">;</span> <span class="token comment">// Person p5 = Person(p4);</span><span class="token comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span><span class="token comment">//Person p5(p4);</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test02();</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h5><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>mAge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>mAge <span class="token operator">=</span> p<span class="token punctuation">.</span>mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//析构函数在释放内存之前调用</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person <span class="token function">man</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//p对象已经创建完毕</span>Person <span class="token function">newman</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用拷贝构造函数</span>Person newman2 <span class="token operator">=</span> man<span class="token punctuation">;</span> <span class="token comment">//拷贝构造</span><span class="token comment">//Person newman3;</span><span class="token comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span><span class="token punctuation">&#125;</span><span class="token comment">//2. 值传递的方式给函数参数传值</span><span class="token comment">//相当于Person p1 = p;</span><span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span> <span class="token comment">//无参构造函数</span><span class="token function">doWork</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3. 以值方式返回局部对象</span>Person <span class="token function">doWork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person p1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person p <span class="token operator">=</span> <span class="token function">doWork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token comment">//test02();</span><span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h5><p>默认情况下，c++编译器至少给一个类添加 3 个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//无参（默认）构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//有参构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//拷贝构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//析构函数</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span>Person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为： "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span>Person p1<span class="token punctuation">;</span> <span class="token comment">//此时如果用户自己没有提供默认构造，会出错</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用户提供的有参</span>Person <span class="token function">p3</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时如果用户没有提供拷贝构造，编译器会提供</span><span class="token comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span>Person p4<span class="token punctuation">;</span> <span class="token comment">//此时如果用户自己没有提供默认构造，会出错</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时如果用户自己没有提供有参，会出错</span>Person <span class="token function">p6</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用户自己提供拷贝构造</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h5><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//无参（默认）构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//有参构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age <span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>m_age <span class="token operator">=</span> age<span class="token punctuation">;</span>m_height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//拷贝构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span>m_age <span class="token operator">=</span> p<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>m_height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>m_height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//析构函数</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_height <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_age<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> m_height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄： "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高： "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1<span class="token punctuation">.</span>m_height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄： "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高： "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2<span class="token punctuation">.</span>m_height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p><h5 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h5><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">////传统方式初始化</span><span class="token comment">//Person(int a, int b, int c) &#123;</span><span class="token comment">//m_A = a;</span><span class="token comment">//m_B = b;</span><span class="token comment">//m_C = c;</span><span class="token comment">//&#125;</span><span class="token comment">//初始化列表方式初始化</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_C</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PrintPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mB:"</span> <span class="token operator">&lt;&lt;</span> m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mC:"</span> <span class="token operator">&lt;&lt;</span> m_C <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">PrintPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h5><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    A a；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B 类中有对象 A 作为成员，A 为对象成员</p><p>那么当创建 B 对象时，A 与 B 的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Phone</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_PhoneName <span class="token operator">=</span> name<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Phone构造"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Phone析构"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_PhoneName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//初始化列表可以告诉编译器调用哪一个构造函数</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> string pName<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_Name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_Phone</span><span class="token punctuation">(</span>pName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person构造"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person析构"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 使用"</span> <span class="token operator">&lt;&lt;</span> m_Phone<span class="token punctuation">.</span>m_PhoneName <span class="token operator">&lt;&lt;</span> <span class="token string">" 牌手机! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span>Phone m_Phone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span><span class="token comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span><span class="token comment">//析构顺序与构造相反</span>Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"张三"</span> <span class="token punctuation">,</span> <span class="token string">"苹果X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h5><p>静态成员就是在成员变量和成员函数前加上关键字 static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例 1 ：</strong>静态成员变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment">//静态成员变量</span><span class="token comment">//静态成员变量特点：</span><span class="token comment">//1 在编译阶段分配内存</span><span class="token comment">//2 类内声明，类外初始化</span><span class="token comment">//3 所有对象共享同一份数据</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment">//静态成员变量也是有访问权限的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token double-colon punctuation">::</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token double-colon punctuation">::</span>m_B <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//静态成员变量两种访问方式</span><span class="token comment">//1、通过对象</span>Person p1<span class="token punctuation">;</span>p1<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1.m_A = "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p2<span class="token punctuation">;</span>p2<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1.m_A = "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//共享同一份数据</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2.m_A = "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//2、通过类名</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m_A = "</span> <span class="token operator">&lt;&lt;</span> Person<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; "m_B = " &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong>静态成员函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//静态成员函数特点：</span><span class="token comment">//1 程序共享一个函数</span><span class="token comment">//2 静态成员函数只能访问静态成员变量</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//m_B = 100; //错误，不可以访问非静态成员变量</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment">//静态成员变量</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment">//</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">//静态成员函数也是有访问权限的</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token double-colon punctuation">::</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//静态成员变量两种访问方式</span><span class="token comment">//1、通过对象</span>Person p1<span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、通过类名</span><span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person::func2(); //私有权限访问不到</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-C-对象模型和-this-指针"><a href="#4-3-C-对象模型和-this-指针" class="headerlink" title="4.3 C++对象模型和 this 指针"></a>4.3 C++对象模型和 this 指针</h4><h5 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h5><p>在 C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//非静态成员变量占对象空间</span><span class="token keyword">int</span> mA<span class="token punctuation">;</span><span class="token comment">//静态成员变量不占对象空间</span><span class="token keyword">static</span> <span class="token keyword">int</span> mB<span class="token punctuation">;</span><span class="token comment">//函数也不占对象空间，所有函数共享一个函数实例</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//静态成员函数也不占对象空间</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-3-2-this-指针概念"><a href="#4-3-2-this-指针概念" class="headerlink" title="4.3.2 this 指针概念"></a>4.3.2 this 指针概念</h5><p>通过 4.3.1 我们知道在 C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this 指针，解决上述问题。<strong>this 指针指向被调用的成员函数所属的对象</strong></p><p>this 指针是隐含每一个非静态成员函数内的一种指针</p><p>this 指针不需要定义，直接使用即可</p><p>this 指针的用途：</p><ul><li>当形参和成员变量同名时，可用 this 指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用 return *this</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、当形参和成员变量同名时，可用this指针来区分</span><span class="token keyword">this</span><span class="token operator">-></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person<span class="token operator">&amp;</span> <span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>age <span class="token operator">+=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//返回对象本身</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1.age = "</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2.age = "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h5><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到 this 指针</p><p>如果用到 this 指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//空指针访问成员函数</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">ShowClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我是Person类!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ShowPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">-></span><span class="token function">ShowClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空指针，可以调用成员函数</span>p<span class="token operator">-></span><span class="token function">ShowPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//但是如果成员函数中用到了this指针，就不可以了</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-3-4-const-修饰成员函数"><a href="#4-3-4-const-修饰成员函数" class="headerlink" title="4.3.4 const 修饰成员函数"></a>4.3.4 const 修饰成员函数</h5><p><strong>常函数：</strong></p><ul><li>成员函数后加 const 后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字 mutable 后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加 const 称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//this指针的本质是一个指针常量，指针的指向不可修改</span><span class="token comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span><span class="token keyword">void</span> <span class="token function">ShowPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token comment">//const Type* const pointer;</span><span class="token comment">//this = NULL; //不能修改指针的指向 Person* const this;</span><span class="token comment">//this->mA = 100; //但是this指针指向的对象的数据是可以修改的</span><span class="token comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span><span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token comment">//mA = 10000;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment">//可修改 可变的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//const修饰对象  常对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> Person person<span class="token punctuation">;</span> <span class="token comment">//常量对象</span>cout <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span>person<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//但是常对象可以修改mutable修饰成员变量</span><span class="token comment">//常对象访问成员函数</span>person<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//常对象不能调用const的函数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h4><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为 &#x3D;&#x3D;friend&#x3D;&#x3D;</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h5 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">&#123;</span><span class="token comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">goodGay</span><span class="token punctuation">(</span>Building <span class="token operator">*</span> building<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_SittingRoom<span class="token punctuation">;</span> <span class="token comment">//客厅</span><span class="token keyword">private</span><span class="token operator">:</span>string m_BedRoom<span class="token punctuation">;</span> <span class="token comment">//卧室</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">goodGay</span><span class="token punctuation">(</span>Building <span class="token operator">*</span> building<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问： "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问： "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Building b<span class="token punctuation">;</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">goodGay</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>Building <span class="token operator">*</span>building<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">&#123;</span><span class="token comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">goodGay</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_SittingRoom<span class="token punctuation">;</span> <span class="token comment">//客厅</span><span class="token keyword">private</span><span class="token operator">:</span>string m_BedRoom<span class="token punctuation">;</span><span class="token comment">//卧室</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Building</span><span class="token double-colon punctuation">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>goodGay<span class="token double-colon punctuation">::</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> goodGay<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>goodGay gg<span class="token punctuation">;</span>gg<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">goodGay</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span><span class="token keyword">void</span> <span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>Building <span class="token operator">*</span>building<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">&#123;</span><span class="token comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span><span class="token keyword">friend</span> <span class="token keyword">void</span> goodGay<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_SittingRoom<span class="token punctuation">;</span> <span class="token comment">//客厅</span><span class="token keyword">private</span><span class="token operator">:</span>string m_BedRoom<span class="token punctuation">;</span><span class="token comment">//卧室</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Building</span><span class="token double-colon punctuation">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>goodGay<span class="token double-colon punctuation">::</span><span class="token function">goodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> goodGay<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> goodGay<span class="token double-colon punctuation">::</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"好基友正在访问"</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; "好基友正在访问" &lt;&lt; building->m_BedRoom &lt;&lt; endl;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>goodGay  gg<span class="token punctuation">;</span>gg<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h4><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h5 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h5><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_A <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数实现 + 号运算符重载</span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>m_A <span class="token operator">+</span> p<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">+</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//全局函数实现 + 号运算符重载</span><span class="token comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span><span class="token comment">//Person temp(0, 0);</span><span class="token comment">//temp.m_A = p1.m_A + p2.m_A;</span><span class="token comment">//temp.m_B = p1.m_B + p2.m_B;</span><span class="token comment">//return temp;</span><span class="token comment">//&#125;</span><span class="token comment">//运算符重载 可以发生函数重载</span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> p2<span class="token punctuation">.</span>m_A <span class="token operator">+</span> val<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> p2<span class="token punctuation">.</span>m_B <span class="token operator">+</span> val<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成员函数方式</span>Person p3 <span class="token operator">=</span> p2 <span class="token operator">+</span> p1<span class="token punctuation">;</span>  <span class="token comment">//相当于 p2.operaor+(p1)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" mB:"</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p4 <span class="token operator">=</span> p3 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//相当于 operator+(p3,10)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> p4<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" mB:"</span> <span class="token operator">&lt;&lt;</span> p4<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结 1：对于内置的数据类型的表达式的的运算符是不可能改变的</p><p>总结 2：不要滥用运算符重载</p><h5 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h5><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_A <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span><span class="token comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span><span class="token comment">//&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//全局函数实现左移重载</span><span class="token comment">//ostream对象只能有一个</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>out <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" b:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span><span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p1 <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//链式编程</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p><h5 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h5><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyInteger</span> <span class="token punctuation">&#123;</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> MyInteger myint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">MyInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//前置++</span>MyInteger<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//先++</span>m_Num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//再返回</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//后置++</span>MyInteger <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//先返回</span>MyInteger temp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span>m_Num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_Num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> MyInteger myint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>out <span class="token operator">&lt;&lt;</span> myint<span class="token punctuation">.</span>m_Num<span class="token punctuation">;</span><span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//前置++ 先++ 再返回</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MyInteger myInt<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//后置++ 先返回 再++</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MyInteger myInt<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myInt<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test02();</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 前置递增返回引用，后置递增返回值</p><h5 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h5><p>c++编译器至少给一个类添加 4 个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator&#x3D;, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将年龄数据开辟到堆区</span>m_Age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重载赋值运算符</span>Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_Age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_Age<span class="token punctuation">;</span>m_Age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//编译器提供的代码是浅拷贝</span><span class="token comment">//m_Age = p.m_Age;</span><span class="token comment">//提供深拷贝 解决浅拷贝的问题</span>m_Age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回自身</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_Age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_Age<span class="token punctuation">;</span>m_Age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//年龄的指针</span><span class="token keyword">int</span> <span class="token operator">*</span>m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span> <span class="token comment">//赋值操作</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p3的年龄为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p3<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int a = 10;</span><span class="token comment">//int b = 20;</span><span class="token comment">//int c = 30;</span><span class="token comment">//c = b = a;</span><span class="token comment">//cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;</span><span class="token comment">//cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;</span><span class="token comment">//cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h5><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int a = 0;</span><span class="token comment">//int b = 0;</span>Person <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h5><ul><li>函数调用运算符 () 也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> text <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//重载的（）操作符 也称为仿函数</span>MyPrint myFunc<span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyAdd</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyAdd add<span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret = "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//匿名对象调用</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"MyAdd()(100,100) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h4><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h5 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h5><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Java页面</span><span class="token keyword">class</span> <span class="token class-name">Java</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"JAVA学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Python页面</span><span class="token keyword">class</span> <span class="token class-name">Python</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//C++页面</span><span class="token keyword">class</span> <span class="token class-name">CPP</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Java页面</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Java ja<span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//Python页面</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Python py<span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//C++页面</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>CPP cp<span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//公共页面</span><span class="token keyword">class</span> <span class="token class-name">BasePage</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java,Python,C++...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Java页面</span><span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BasePage</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"JAVA学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Python页面</span><span class="token keyword">class</span> <span class="token class-name">Python</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BasePage</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//C++页面</span><span class="token keyword">class</span> <span class="token class-name">CPP</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BasePage</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Java页面</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Java ja<span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//Python页面</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Python下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Python py<span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>py<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//C++页面</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++下载视频页面如下： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>CPP cp<span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D;</p><p>class A : public B;</p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h5 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h5><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//公共继承</span><span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A<span class="token punctuation">;</span> <span class="token comment">//可访问 public权限</span>m_B<span class="token punctuation">;</span> <span class="token comment">//可访问 protected权限</span><span class="token comment">//m_C; //不可访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son1 s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span> <span class="token comment">//其他类只能访问到公共权限</span><span class="token punctuation">&#125;</span><span class="token comment">//保护继承</span><span class="token keyword">class</span> <span class="token class-name">Base2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son2</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">Base2</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A<span class="token punctuation">;</span> <span class="token comment">//可访问 protected权限</span>m_B<span class="token punctuation">;</span> <span class="token comment">//可访问 protected权限</span><span class="token comment">//m_C; //不可访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son2 s<span class="token punctuation">;</span><span class="token comment">//s.m_A; //不可访问</span><span class="token punctuation">&#125;</span><span class="token comment">//私有继承</span><span class="token keyword">class</span> <span class="token class-name">Base3</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Base3</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A<span class="token punctuation">;</span> <span class="token comment">//可访问 private权限</span>m_B<span class="token punctuation">;</span> <span class="token comment">//可访问 private权限</span><span class="token comment">//m_C; //不可访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GrandSon3</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Son3</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span><span class="token comment">//m_A;</span><span class="token comment">//m_B;</span><span class="token comment">//m_C;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h5><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span> <span class="token comment">//私有成员只是被隐藏了，但是还是会继承下去</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//公共继承</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_D<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof Son = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Son<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前 CPP 文件的盘符</p><p>然后输入： cl &#x2F;d1 reportSingleClassLayout 查看的类名 所属文件名</p><p>效果如下图：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1545882158050.png" alt="1545882158050"></p><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p><h5 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h5><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son析构函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span>Son s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p><h5 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h5><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - func()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - func(int a)调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span><span class="token comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son - func()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son下的m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base下的m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h5 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h5><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - static void func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - static void func(int a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son - static void func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Son<span class="token double-colon punctuation">::</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//同名成员属性</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过对象访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过对象访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Son s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son  下 m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//通过类名访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过类名访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son  下 m_A = "</span> <span class="token operator">&lt;&lt;</span> Son<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> Son<span class="token double-colon punctuation">::</span>Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//同名成员函数</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过对象访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过对象访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Son s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过类名访问： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token class-name">Son</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token double-colon punctuation">::</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span>Son<span class="token double-colon punctuation">::</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p><h5 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h5><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base2</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base2</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base1</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_C <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>m_D <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token keyword">int</span> m_D<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//多继承容易产生成员同名的情况</span><span class="token comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof Son = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base1<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base2<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p><h5 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h5><p><strong>菱形继承概念：</strong></p><pre><code>两个派生类继承同一个基类又有某个类同时继承者两个派生类这种继承被称为菱形继承，或者钻石继承</code></pre><p><strong>典型的菱形继承案例：</strong></p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>     羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//继承前加virtual关键字后，变为虚继承</span><span class="token comment">//此时公共的父类Animal称为虚基类</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tuo</span>   <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SheepTuo</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Tuo</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SheepTuo st<span class="token punctuation">;</span>st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.Sheep::m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.Tuo::m_Age = "</span> <span class="token operator">&lt;&lt;</span>  st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h4 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h4><h5 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h5><p><strong>多态是 C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//Speak函数就是虚函数</span><span class="token comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"动物在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小猫在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小狗在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//我们希望传入什么对象，那么就调用什么对象的函数</span><span class="token comment">//如果函数地址在编译阶段就能确定，那么静态联编</span><span class="token comment">//如果函数地址在运行阶段才能确定，就是动态联编</span><span class="token keyword">void</span> <span class="token function">DoSpeak</span><span class="token punctuation">(</span>Animal <span class="token operator">&amp;</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//多态满足条件：</span><span class="token comment">//1、有继承关系</span><span class="token comment">//2、子类重写父类中的虚函数</span><span class="token comment">//多态使用：</span><span class="token comment">//父类指针或引用指向子类对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Cat cat<span class="token punctuation">;</span><span class="token function">DoSpeak</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>Dog dog<span class="token punctuation">;</span><span class="token function">DoSpeak</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p><h5 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h5><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//普通实现</span><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span>string oper<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">-</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">*</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果要提供新的运算，需要修改源码</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span><span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//普通实现测试</span>Calculator c<span class="token punctuation">;</span>c<span class="token punctuation">.</span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" * "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//多态实现</span><span class="token comment">//抽象计算器类</span><span class="token comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span><span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//加法计算器</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//减法计算器</span><span class="token keyword">class</span> <span class="token class-name">SubCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">-</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//乘法计算器</span><span class="token keyword">class</span> <span class="token class-name">MulCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">*</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建加法计算器</span>AbstractCalculator <span class="token operator">*</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment">//用完了记得销毁</span><span class="token comment">//创建减法计算器</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> SubCalculator<span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span><span class="token comment">//创建乘法计算器</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> MulCalculator<span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" * "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p><h5 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h5><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//纯虚函数</span><span class="token comment">//类中只要有一个纯虚函数就称为抽象类</span><span class="token comment">//抽象类无法实例化对象</span><span class="token comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Base <span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//base = new Base; // 错误，抽象类无法实例化对象</span>base <span class="token operator">=</span> <span class="token keyword">new</span> Son<span class="token punctuation">;</span>base<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> base<span class="token punctuation">;</span><span class="token comment">//记得销毁</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h5><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//抽象制作饮品</span><span class="token keyword">class</span> <span class="token class-name">AbstractDrinking</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//烧水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//规定流程</span><span class="token keyword">void</span> <span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//制作咖啡</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractDrinking</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//烧水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮农夫山泉!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将咖啡倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入牛奶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//制作茶水</span><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractDrinking</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//烧水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮自来水!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡茶叶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将茶水倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入枸杞!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//业务函数</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstractDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>drink<span class="token operator">-></span><span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token keyword">new</span> Coffee<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token keyword">new</span> Tea<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h5><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//析构函数加上virtual关键字，变成虚析构函数</span><span class="token comment">//virtual ~Animal()</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 纯虚析构函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>m_Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>m_Name <span class="token operator">&lt;&lt;</span>  <span class="token string">"小猫在说话!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_Name<span class="token punctuation">;</span>m_Name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string <span class="token operator">*</span>m_Name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Animal <span class="token operator">*</span>animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token operator">-></span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span><span class="token comment">//怎么解决？给基类增加一个虚析构函数</span><span class="token comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span><span class="token keyword">delete</span> animal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><pre><code>1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构3. 拥有纯虚析构函数的类也属于抽象类</code></pre><h5 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h5><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如 Intel 厂商和 Lenovo 厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//抽象CPU类</span><span class="token keyword">class</span> <span class="token class-name">CPU</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//抽象的计算函数</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//抽象显卡类</span><span class="token keyword">class</span> <span class="token class-name">VideoCard</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//抽象的显示函数</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//抽象内存条类</span><span class="token keyword">class</span> <span class="token class-name">Memory</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//抽象的存储函数</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//电脑类</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Computer</span><span class="token punctuation">(</span>CPU <span class="token operator">*</span> cpu<span class="token punctuation">,</span> VideoCard <span class="token operator">*</span> vc<span class="token punctuation">,</span> Memory <span class="token operator">*</span> mem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>m_vc <span class="token operator">=</span> vc<span class="token punctuation">;</span>m_mem <span class="token operator">=</span> mem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//提供工作的函数</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//让零件工作起来，调用接口</span>m_cpu<span class="token operator">-></span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_vc<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_mem<span class="token operator">-></span><span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//提供析构函数 释放3个电脑零件</span><span class="token operator">~</span><span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//释放CPU零件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_cpu <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_cpu<span class="token punctuation">;</span>m_cpu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//释放显卡零件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_vc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_vc<span class="token punctuation">;</span>m_vc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//释放内存条零件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_mem <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_mem<span class="token punctuation">;</span>m_mem <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>CPU <span class="token operator">*</span> m_cpu<span class="token punctuation">;</span> <span class="token comment">//CPU的零件指针</span>VideoCard <span class="token operator">*</span> m_vc<span class="token punctuation">;</span> <span class="token comment">//显卡零件指针</span>Memory <span class="token operator">*</span> m_mem<span class="token punctuation">;</span> <span class="token comment">//内存条零件指针</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//具体厂商</span><span class="token comment">//Intel厂商</span><span class="token keyword">class</span> <span class="token class-name">IntelCPU</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">CPU</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的CPU开始计算了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IntelVideoCard</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">VideoCard</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的显卡开始显示了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IntelMemory</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Memory</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的内存条开始存储了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Lenovo厂商</span><span class="token keyword">class</span> <span class="token class-name">LenovoCPU</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">CPU</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的CPU开始计算了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LenovoVideoCard</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">VideoCard</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的显卡开始显示了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LenovoMemory</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Memory</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的内存条开始存储了！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//第一台电脑零件</span>CPU <span class="token operator">*</span> intelCpu <span class="token operator">=</span> <span class="token keyword">new</span> IntelCPU<span class="token punctuation">;</span>VideoCard <span class="token operator">*</span> intelCard <span class="token operator">=</span> <span class="token keyword">new</span> IntelVideoCard<span class="token punctuation">;</span>Memory <span class="token operator">*</span> intelMem <span class="token operator">=</span> <span class="token keyword">new</span> IntelMemory<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一台电脑开始工作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//创建第一台电脑</span>Computer <span class="token operator">*</span> computer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span>intelCpu<span class="token punctuation">,</span> intelCard<span class="token punctuation">,</span> intelMem<span class="token punctuation">)</span><span class="token punctuation">;</span>computer1<span class="token operator">-></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> computer1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第二台电脑开始工作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第二台电脑组装</span>Computer <span class="token operator">*</span> computer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token keyword">new</span> LenovoCPU<span class="token punctuation">,</span> <span class="token keyword">new</span> LenovoVideoCard<span class="token punctuation">,</span> <span class="token keyword">new</span> LenovoMemory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>computer2<span class="token operator">-></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> computer2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第三台电脑开始工作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第三台电脑组装</span>Computer <span class="token operator">*</span> computer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token keyword">new</span> LenovoCPU<span class="token punctuation">,</span> <span class="token keyword">new</span> IntelVideoCard<span class="token punctuation">,</span> <span class="token keyword">new</span> LenovoMemory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>computer3<span class="token operator">-></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> computer3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h3><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D;</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong> - 文件以文本的<strong>ASCII 码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> - 文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h4 id="5-1-文本文件"><a href="#5-1-文本文件" class="headerlink" title="5.1 文本文件"></a>5.1 文本文件</h4><h5 id="5-1-1-写文件"><a href="#5-1-1-写文件" class="headerlink" title="5.1.1 写文件"></a>5.1.1 写文件</h5><p>写文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象</p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ifs和ofs同样可以用endl和空格分割<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>ifstream ifs<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ifs <span class="token operator">>></span> id <span class="token operator">&amp;&amp;</span> ifs <span class="token operator">>></span> name <span class="token operator">&amp;&amp;</span> ifs <span class="token operator">>></span> dId<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ofstream ofs<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名：张三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"性别：男"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄：18"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream ，或者 fstream 类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h5 id="5-1-2-读文件"><a href="#5-1-2-读文件" class="headerlink" title="5.1.2 读文件"></a>5.1.2 读文件</h5><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象</p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream ifs<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//第一种方式</span><span class="token comment">//char buf[1024] = &#123; 0 &#125;;</span><span class="token comment">//while (ifs >> buf)</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token comment">//第二种</span><span class="token comment">//char buf[1024] = &#123; 0 &#125;;</span><span class="token comment">//while (ifs.getline(buf,sizeof(buf)))</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token comment">//第三种</span><span class="token comment">//string buf;</span><span class="token comment">//while (getline(ifs, buf))</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> ifs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token comment">// end of file</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream ，或者 fstream 类</li><li>利用 is_open 函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ifstream <span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"filename.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设文件名为"filename.txt"</span>string line<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 读取每一行</span>istringstream <span class="token function">ss</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将一行数据转换为字符串流</span><span class="token keyword">int</span> id<span class="token punctuation">;</span>string name<span class="token punctuation">,</span> department<span class="token punctuation">;</span>ss <span class="token operator">>></span> id <span class="token operator">>></span> name <span class="token operator">>></span> department<span class="token punctuation">;</span> <span class="token comment">// 从字符串流中读取数据</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Id:"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">" Name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" Department:"</span> <span class="token operator">&lt;&lt;</span> department <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h4><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p><h5 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h5><p>二进制方式写文件主要利用流对象调用成员函数 write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//二进制文件  写文件</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、包含头文件</span><span class="token comment">//2、创建输出流对象</span>ofstream <span class="token function">ofs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、打开文件</span><span class="token comment">//ofs.open("person.txt", ios::out | ios::binary);</span>Person p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"张三"</span>  <span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//4、写文件</span>ofs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5、关闭文件</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过 write 函数，以二进制方式写数据</li></ul><h5 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h5><p>二进制方式读文件主要利用流对象调用成员函数 read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person p<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过 read 函数，以二进制方式读数据</li></ul><h2 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h2><ul><li>本阶段主要针对 C++&#x3D;&#x3D;泛型编程&#x3D;&#x3D;和&#x3D;&#x3D;STL&#x3D;&#x3D;技术做详细讲解，探讨 C++更深层的使用</li></ul><h3 id="1-模板"><a href="#1-模板" class="headerlink" title="1 模板"></a>1 模板</h3><h4 id="1-1-模板的概念"><a href="#1-1-模板的概念" class="headerlink" title="1.1 模板的概念"></a>1.1 模板的概念</h4><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1547105026929.png" alt="1547105026929"></p><p>PPT 模板：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1547103297864.png" alt="1547103297864"></p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1547103359158.png" alt="1547103359158"></p><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h4 id="1-2-函数模板"><a href="#1-2-函数模板" class="headerlink" title="1.2 函数模板"></a>1.2 函数模板</h4><ul><li><p>C++另一种编程思想称为 &#x3D;&#x3D;泛型编程&#x3D;&#x3D; ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h5 id="1-2-1-函数模板语法"><a href="#1-2-1-函数模板语法" class="headerlink" title="1.2.1 函数模板语法"></a>1.2.1 函数模板语法</h5><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>函数声明或定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template — 声明创建模板</p><p>typename — 表面其后面的符号是一种数据类型，可以用 class 代替</p><p>T — 通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//交换整型函数</span><span class="token keyword">void</span> <span class="token function">swapInt</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//交换浮点型函数</span><span class="token keyword">void</span> <span class="token function">swapDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//利用模板提供通用的交换函数</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">mySwap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>T temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//swapInt(a, b);</span><span class="token comment">//利用模板实现交换</span><span class="token comment">//1、自动类型推导</span><span class="token function">mySwap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、显示指定类型</span><span class="token generic-function"><span class="token function">mySwap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h5 id="1-2-2-函数模板注意事项"><a href="#1-2-2-函数模板注意事项" class="headerlink" title="1.2.2 函数模板注意事项"></a>1.2.2 函数模板注意事项</h5><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型 T,才可以使用</p></li><li><p>模板必须要确定出 T 的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//利用模板提供通用的交换函数</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">mySwap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>T temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span><span class="token function">mySwap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确，可以推导出一致的T</span><span class="token comment">//mySwap(a, c); // 错误，推导不出一致的T类型</span><span class="token punctuation">&#125;</span><span class="token comment">// 2、模板必须要确定出T的数据类型，才可以使用</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func 调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//func(); //错误，模板不能独立使用，必须确定出T的类型</span><span class="token generic-function"><span class="token function">func</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//利用显示指定类型的方式，给T一个类型，才可以使用该模板</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型 T，并且能够推导出一致的类型</li></ul><h5 id="1-2-3-函数模板案例"><a href="#1-2-3-函数模板案例" class="headerlink" title="1.2.3 函数模板案例"></a>1.2.3 函数模板案例</h5><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char 数组</strong>和<strong>int 数组</strong>进行测试</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//交换的函数模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">mySwap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>T temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token comment">// 也可以替换成typename</span><span class="token comment">//利用选择排序，进行对数组从大到小的排序</span><span class="token keyword">void</span> <span class="token function">mySort</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//最大数的下标</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token comment">//如果最大数的下标不是i，交换两者</span><span class="token punctuation">&#123;</span><span class="token function">mySwap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//测试char数组</span><span class="token keyword">char</span> charArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bdcfeagh"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>charArr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mySort</span><span class="token punctuation">(</span>charArr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>charArr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//测试int数组</span><span class="token keyword">int</span> intArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mySort</span><span class="token punctuation">(</span>intArr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>intArr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：模板可以提高代码复用，需要熟练掌握</p><h5 id="1-2-4-普通函数与函数模板的区别"><a href="#1-2-4-普通函数与函数模板的区别" class="headerlink" title="1.2.4 普通函数与函数模板的区别"></a>1.2.4 普通函数与函数模板的区别</h5><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//普通函数</span><span class="token keyword">int</span> <span class="token function">myAdd01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>T <span class="token function">myAdd02</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">myAdd01</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//正确，将char类型的'c'隐式转换为int类型  'c' 对应 ASCII码 99</span><span class="token comment">//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换</span><span class="token generic-function"><span class="token function">myAdd02</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确，如果用显示指定类型，可以发生隐式类型转换</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型 T</p><h5 id="1-2-5-普通函数与函数模板的调用规则"><a href="#1-2-5-普通函数与函数模板的调用规则" class="headerlink" title="1.2.5 普通函数与函数模板的调用规则"></a>1.2.5 普通函数与函数模板的调用规则</h5><p>调用规则如下：</p><ol><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//普通函数与函数模板调用规则</span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用的普通函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用的模板"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">,</span> T c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用重载的模板"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、如果函数模板和普通函数都可以实现，优先调用普通函数</span><span class="token comment">// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">myPrint</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用普通函数</span><span class="token comment">//2、可以通过空模板参数列表来强制调用函数模板</span><span class="token generic-function"><span class="token function">myPrint</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数模板</span><span class="token comment">//3、函数模板也可以发生重载</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token function">myPrint</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用重载的函数模板</span><span class="token comment">//4、 如果函数模板可以产生更好的匹配,优先调用函数模板</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span><span class="token function">myPrint</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数模板</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p><h5 id="1-2-6-模板的局限性"><a href="#1-2-6-模板的局限性" class="headerlink" title="1.2.6 模板的局限性"></a>1.2.6 模板的局限性</h5><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   a <span class="token operator">=</span> b<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中提供的赋值操作，如果传入的 a 和 b 是一个数组，就无法实现了</p><p>再例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，如果 T 的数据类型传入的是像 Person 这样的自定义数据类型，也无法正常运行</p><p>因此 C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//普通函数模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token function">myCompare</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//具体化，显示具体化的原型和定意思以template&lt;>开头，并通过名称来指出类型</span><span class="token comment">//具体化优先于常规模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token function">myCompare</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> p1<span class="token punctuation">.</span>m_Name  <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> p1<span class="token punctuation">.</span>m_Age <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//内置数据类型可以直接使用通用的函数模板</span><span class="token keyword">bool</span> ret <span class="token operator">=</span> <span class="token function">myCompare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a == b "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a != b "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义数据类型，不会调用普通的函数模板</span><span class="token comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span><span class="token keyword">bool</span> ret <span class="token operator">=</span> <span class="token function">myCompare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1 == p2 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1 != p2 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在 STL 能够运用系统提供的模板</li></ul><h4 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h4><h5 id="1-3-1-类模板语法"><a href="#1-3-1-类模板语法" class="headerlink" title="1.3.1 类模板语法"></a>1.3.1 类模板语法</h5><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template — 声明创建模板</p><p>typename — 表面其后面的符号是一种数据类型，可以用 class 代替</p><p>T — 通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">AgeType</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>NameType name<span class="token punctuation">,</span> AgeType age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mName <span class="token operator">&lt;&lt;</span> <span class="token string">" age: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>NameType mName<span class="token punctuation">;</span>AgeType mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 指定NameType 为string类型，AgeType 为 int类型</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token function">P1</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P1<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板和函数模板语法相似，在声明模板 template 后面加类，此类称为类模板</p><h5 id="1-3-2-类模板与函数模板区别"><a href="#1-3-2-类模板与函数模板区别" class="headerlink" title="1.3.2 类模板与函数模板区别"></a>1.3.2 类模板与函数模板区别</h5><p>类模板与函数模板区别主要有两点：</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">AgeType</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>NameType name<span class="token punctuation">,</span> AgeType age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mName <span class="token operator">&lt;&lt;</span> <span class="token string">" age: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>NameType mName<span class="token punctuation">;</span>AgeType mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1、类模板没有自动类型推导的使用方式</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// Person p("孙悟空", 1000); // 错误 类模板使用时候，不可以用自动类型推导</span>Person <span class="token operator">&lt;</span>string <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//必须使用显示指定类型的方式，使用类模板</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、类模板在模板参数列表中可以有默认参数</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类模板中的模板参数列表 可以指定默认参数</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h5 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h5><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">showPerson1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person1 show"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">showPerson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person2 show"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>T obj<span class="token punctuation">;</span><span class="token comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span><span class="token function">showPerson1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span><span class="token function">showPerson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyClass<span class="token operator">&lt;</span>Person1<span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h5 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h5><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol><li>指定传入的类型 — 直接显示对象的数据类型</li><li>参数模板化 — 将对象中的参数变为模板进行传递</li><li>整个类模板化 — 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">AgeType</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>NameType name<span class="token punctuation">,</span> AgeType age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>mName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mName <span class="token operator">&lt;&lt;</span> <span class="token string">" age: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>NameType mName<span class="token punctuation">;</span>AgeType mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1、指定传入的类型</span><span class="token keyword">void</span> <span class="token function">printPerson1</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPerson1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、参数模板化</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">printPerson2</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T1的类型为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T2的类型为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPerson2</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、整个类模板化</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">printPerson3</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T的类型为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPerson3</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><h5 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h5><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中 T 的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中 T 的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>T m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token comment">//必须指定一个类型</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token operator">&lt;</span><span class="token class-name">T2</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son2<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> child1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果父类是类模板，子类需要指定出父类中 T 的数据类型</p><h5 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h5><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//类模板中成员函数类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//成员函数类内声明</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>T1 m_Name<span class="token punctuation">;</span>T2 m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//构造函数 类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数 类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h5 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h5><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式 1：直接包含.cpp 源文件</li><li>解决方式 2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp 是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp 中代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>T1 m_Name<span class="token punctuation">;</span>T2 m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//构造函数 类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数 类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄:"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板分文件编写.cpp 中代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//#include "person.h"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.cpp"</span> <span class="token comment">//解决方式1，包含cpp源文件</span></span><span class="token comment">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.hpp"</span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h5 id="1-3-8-类模板与友元"><a href="#1-3-8-类模板与友元" class="headerlink" title="1.3.8 类模板与友元"></a>1.3.8 类模板与友元</h5><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span><span class="token comment">//template&lt;class T1, class T2> void printPerson2(Person&lt;T1, T2> &amp; p);</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">printPerson2</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类外实现 ---- 姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//1、全局函数配合友元   类内实现</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">printPerson</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//全局函数配合友元  类外实现</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">printPerson2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>T1 m_Name<span class="token punctuation">;</span>T2 m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1、全局函数在类内实现</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPerson</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、全局函数在类外实现</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPerson2</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h5 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h5><p>案例描述: 实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及 operator&#x3D;防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp 中代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">MyArray</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//构造函数</span><span class="token function">MyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pAddress <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//拷贝构造</span><span class="token function">MyArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyArray <span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity <span class="token operator">=</span> arr<span class="token punctuation">.</span>m_Capacity<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size <span class="token operator">=</span> arr<span class="token punctuation">.</span>m_Size<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，</span><span class="token comment">// 普通类型可以直接= 但是指针类型需要深拷贝</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>pAddress<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//重载= 操作符  防止浅拷贝问题</span>MyArray<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyArray<span class="token operator">&amp;</span> myarray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-></span>pAddress<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity <span class="token operator">=</span> myarray<span class="token punctuation">.</span>m_Capacity<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size <span class="token operator">=</span> myarray<span class="token punctuation">.</span>m_Size<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> myarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重载[] 操作符  arr[0]</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>pAddress<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//不考虑越界，用户自己去处理</span><span class="token punctuation">&#125;</span><span class="token comment">//尾插法</span><span class="token keyword">void</span> <span class="token function">Push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//尾删法</span><span class="token keyword">void</span> <span class="token function">Pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取数组容量</span><span class="token keyword">int</span> <span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Capacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取数组大小</span><span class="token keyword">int</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//析构</span><span class="token operator">~</span><span class="token function">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-></span>pAddress<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>pAddress <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>T <span class="token operator">*</span> pAddress<span class="token punctuation">;</span>  <span class="token comment">//指向一个堆空间，这个空间存储真正的数据</span><span class="token keyword">int</span> m_Capacity<span class="token punctuation">;</span> <span class="token comment">//容量</span><span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>   <span class="token comment">// 大小</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板案例—数组类封装.cpp 中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"myArray.hpp"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">printIntArray</span><span class="token punctuation">(</span>MyArray<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试内置数据类型</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyArray<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">array1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array1<span class="token punctuation">.</span><span class="token function">Push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array1打印输出："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">printIntArray</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array1的大小："</span> <span class="token operator">&lt;&lt;</span> array1<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array1的容量："</span> <span class="token operator">&lt;&lt;</span> array1<span class="token punctuation">.</span><span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>MyArray<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">array2</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>array2<span class="token punctuation">.</span><span class="token function">Pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array2打印输出："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">printIntArray</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array2的大小："</span> <span class="token operator">&lt;&lt;</span> array2<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array2的容量："</span> <span class="token operator">&lt;&lt;</span> array2<span class="token punctuation">.</span><span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试自定义数据类型</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printPersonArray</span><span class="token punctuation">(</span>MyArray<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token operator">&amp;</span> personArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> personArr<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> personArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> personArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建数组</span>MyArray<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">pArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"韩信"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"妲己"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"王昭君"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入数据</span>pArray<span class="token punctuation">.</span><span class="token function">Push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>pArray<span class="token punctuation">.</span><span class="token function">Push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>pArray<span class="token punctuation">.</span><span class="token function">Push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>pArray<span class="token punctuation">.</span><span class="token function">Push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>pArray<span class="token punctuation">.</span><span class="token function">Push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printPersonArray</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pArray的大小："</span> <span class="token operator">&lt;&lt;</span> pArray<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pArray的容量："</span> <span class="token operator">&lt;&lt;</span> pArray<span class="token punctuation">.</span><span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>能够利用所学知识点实现通用的数组</p><h3 id="2-STL-初识"><a href="#2-STL-初识" class="headerlink" title="2 STL 初识"></a>2 STL 初识</h3><h4 id="2-1-STL-的诞生"><a href="#2-1-STL-的诞生" class="headerlink" title="2.1 STL 的诞生"></a>2.1 STL 的诞生</h4><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h4 id="2-2-STL-基本概念"><a href="#2-2-STL-基本概念" class="headerlink" title="2.2 STL 基本概念"></a>2.2 STL 基本概念</h4><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h4 id="2-3-STL-六大组件"><a href="#2-3-STL-六大组件" class="headerlink" title="2.3 STL 六大组件"></a>2.3 STL 六大组件</h4><p>STL 大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如 vector、list、deque、set、map 等,用来存放数据。</li><li>算法：各种常用的算法，如 sort、find、copy、for_each 等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h4 id="2-4-STL-中容器、算法、迭代器"><a href="#2-4-STL-中容器、算法、迭代器" class="headerlink" title="2.4 STL 中容器、算法、迭代器"></a>2.4 STL 中容器、算法、迭代器</h4><p><strong>容器：</strong>置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><pre><code>**序列式容器**:强调值的排序，序列式容器中的每个元素均有固定的位置。**关联式容器**:二叉树结构，各元素之间没有严格的物理上的顺序关系</code></pre><p><strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p><strong>迭代器：</strong>容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h4 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h4><p>了解 STL 中容器、算法、迭代器概念之后，我们利用代码感受 STL 的魅力</p><p>STL 中最常用的容器为 Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h5 id="2-5-1-vector-存放内置数据类型"><a href="#2-5-1-vector-存放内置数据类型" class="headerlink" title="2.5.1 vector 存放内置数据类型"></a>2.5.1 vector 存放内置数据类型</h5><p>容器： <code>vector</code></p><p>算法： <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">void</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//向容器中放数据</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span><span class="token comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span><span class="token comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span><span class="token comment">//vector&lt;int>::iterator 拿到vector&lt;int>这种容器的迭代器类型</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator pBegin <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator pEnd <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一种遍历方式：</span><span class="token keyword">while</span> <span class="token punctuation">(</span>pBegin <span class="token operator">!=</span> pEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pBegin <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>pBegin<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//第二种遍历方式：</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第三种遍历方式：</span><span class="token comment">//使用STL提供标准遍历算法  头文件 algorithm</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyPrint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-5-2-Vector-存放自定义数据类型"><a href="#2-5-2-Vector-存放自定义数据类型" class="headerlink" title="2.5.2 Vector 存放自定义数据类型"></a>2.5.2 Vector 存放自定义数据类型</h5><p>学习目标：vector 中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//自定义数据类型</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mName <span class="token operator">=</span> name<span class="token punctuation">;</span>mAge <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string mName<span class="token punctuation">;</span><span class="token keyword">int</span> mAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//存放对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//创建数据</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Name:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>mName <span class="token operator">&lt;&lt;</span> <span class="token string">" Age:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//放对象指针</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">*</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//创建数据</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">*</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Person <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Name:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>mName <span class="token operator">&lt;&lt;</span> <span class="token string">" Age:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">-></span>mAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-5-3-Vector-容器嵌套容器"><a href="#2-5-3-Vector-容器嵌套容器" class="headerlink" title="2.5.3 Vector 容器嵌套容器"></a>2.5.3 Vector 容器嵌套容器</h5><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">//容器嵌套容器</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>  v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v4<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v3<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v4<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将容器元素插入到vector v中</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator vit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>vit <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-STL-常用容器"><a href="#3-STL-常用容器" class="headerlink" title="3 STL- 常用容器"></a>3 STL- 常用容器</h3><h4 id="3-1-string-容器"><a href="#3-1-string-容器" class="headerlink" title="3.1 string 容器"></a>3.1 string 容器</h4><h5 id="3-1-1-string-基本概念"><a href="#3-1-1-string-基本概念" class="headerlink" title="3.1.1 string 基本概念"></a>3.1.1 string 基本概念</h5><p><strong>本质：</strong></p><ul><li>string 是 C++风格的字符串，而 string 本质上是一个类</li></ul><p><strong>string 和 char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string 是一个类，类内部封装了 char*，管理这个字符串，是一个 char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找 find，拷贝 copy，删除 delete 替换 replace，插入 insert</p><p>string 管理 char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h5 id="3-1-2-string-构造函数"><a href="#3-1-2-string-构造函数" class="headerlink" title="3.1.2 string 构造函数"></a>3.1.2 string 构造函数</h5><p>构造函数原型：</p><ul><li><code>string();</code> &#x2F;&#x2F;创建一个空的字符串 例如: string str;<br><code>string(const char* s);</code> &#x2F;&#x2F;使用字符串 s 初始化</li><li><code>string(const string&amp; str);</code> &#x2F;&#x2F;使用一个 string 对象初始化另一个 string 对象</li><li><code>string(int n, char c);</code> &#x2F;&#x2F;使用 n 个字符 c 初始化</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//string构造</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s1<span class="token punctuation">;</span> <span class="token comment">//创建空字符串，调用无参构造函数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 = "</span> <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>string <span class="token function">s2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把c_string转换成了string</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str2 = "</span> <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string <span class="token function">s3</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用拷贝构造函数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str3 = "</span> <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string <span class="token function">s4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str3 = "</span> <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string 的多种构造方式没有可比性，灵活使用即可</p><h5 id="3-1-3-string-赋值操作"><a href="#3-1-3-string-赋值操作" class="headerlink" title="3.1.3 string 赋值操作"></a>3.1.3 string 赋值操作</h5><p>功能描述：</p><ul><li>给 string 字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code> &#x2F;&#x2F;char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> &#x2F;&#x2F;把字符串 s 赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> &#x2F;&#x2F;字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code> &#x2F;&#x2F;把字符串 s 赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code> &#x2F;&#x2F;把字符串 s 的前 n 个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> &#x2F;&#x2F;把字符串 s 赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code> &#x2F;&#x2F;用 n 个字符 c 赋给当前字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//赋值</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str1<span class="token punctuation">;</span>str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 = "</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str2<span class="token punctuation">;</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str2 = "</span> <span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str3<span class="token punctuation">;</span>str3 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str3 = "</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str4<span class="token punctuation">;</span>str4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"hello c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str4 = "</span> <span class="token operator">&lt;&lt;</span> str4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str5<span class="token punctuation">;</span>str5<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"hello c++"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str5 = "</span> <span class="token operator">&lt;&lt;</span> str5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str6<span class="token punctuation">;</span>str6<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str6 = "</span> <span class="token operator">&lt;&lt;</span> str6 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str7<span class="token punctuation">;</span>str7<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str7 = "</span> <span class="token operator">&lt;&lt;</span> str7 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><pre><code>string的赋值方式很多，`operator=`  这种方式是比较实用的</code></pre><h5 id="3-1-4-string-字符串拼接"><a href="#3-1-4-string-字符串拼接" class="headerlink" title="3.1.4 string 字符串拼接"></a>3.1.4 string 字符串拼接</h5><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const char c);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; append(const char *s); </code> &#x2F;&#x2F;把字符串 s 连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code> &#x2F;&#x2F;把字符串 s 的前 n 个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> &#x2F;&#x2F;同 operator+&#x3D;(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>&#x2F;&#x2F;字符串 s 中从 pos 开始的 n 个字符连接到字符串结尾</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//字符串拼接</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str1 <span class="token operator">=</span> <span class="token string">"我"</span><span class="token punctuation">;</span>str1 <span class="token operator">+=</span> <span class="token string">"爱玩游戏"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 = "</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>str1 <span class="token operator">+=</span> <span class="token char">':'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 = "</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str2 <span class="token operator">=</span> <span class="token string">"LOL DNF"</span><span class="token punctuation">;</span>str1 <span class="token operator">+=</span> str2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 = "</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string str3 <span class="token operator">=</span> <span class="token string">"I"</span><span class="token punctuation">;</span>str3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" love "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"game abcde"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str3.append(str2);</span>str3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从下标4位置开始 ，截取3个字符，拼接到字符串末尾</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str3 = "</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h5 id="3-1-5-string-查找和替换"><a href="#3-1-5-string-查找和替换" class="headerlink" title="3.1.5 string 查找和替换"></a>3.1.5 string 查找和替换</h5><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code> &#x2F;&#x2F;查找 str 第一次出现位置,从 pos 开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code> &#x2F;&#x2F;查找 s 第一次出现位置,从 pos 开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code> &#x2F;&#x2F;从 pos 位置查找 s 的前 n 个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code> &#x2F;&#x2F;查找字符 c 第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code> &#x2F;&#x2F;查找 str 最后一次位置,从 pos 开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code> &#x2F;&#x2F;查找 s 最后一次出现位置,从 pos 开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code> &#x2F;&#x2F;从 pos 查找 s 的前 n 个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code> &#x2F;&#x2F;查找字符 c 最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code> &#x2F;&#x2F;替换从 pos 开始 n 个字符为字符串 str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code> &#x2F;&#x2F;替换从 pos 开始的 n 个字符为字符串 s</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//查找和替换</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//查找</span>string str1 <span class="token operator">=</span> <span class="token string">"abcdefgde"</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pos = "</span> <span class="token operator">&lt;&lt;</span> pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pos <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pos = "</span> <span class="token operator">&lt;&lt;</span> pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//替换</span>string str1 <span class="token operator">=</span> <span class="token string">"abcdefgde"</span><span class="token punctuation">;</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 = "</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token comment">//test02();</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>find 查找是从左往后，rfind 从右往左</li><li>find 找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace 在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h5 id="3-1-6-string-字符串比较"><a href="#3-1-6-string-字符串比较" class="headerlink" title="3.1.6 string 字符串比较"></a>3.1.6 string 字符串比较</h5><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的 ASCII 码进行对比</li></ul><p>&#x3D; 返回 0</p><p>&gt; 返回 1</p><p>&lt; 返回 -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code> &#x2F;&#x2F;与字符串 s 比较</li><li><code>int compare(const char *s) const;</code> &#x2F;&#x2F;与字符串 s 比较</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//字符串比较</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> <span class="token string">"aello"</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1 等于 s2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1 大于 s2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1 小于 s2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h5 id="3-1-7-string-字符存取"><a href="#3-1-7-string-字符存取" class="headerlink" title="3.1.7 string 字符存取"></a>3.1.7 string 字符存取</h5><p>string 中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code> &#x2F;&#x2F;通过[]方式取字符</li><li><code>char&amp; at(int n);   </code> &#x2F;&#x2F;通过 at 方法获取字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//字符修改</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'x'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'x'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string 字符串中单个字符存取有两种方式，利用 [ ] 或 at</p><h5 id="3-1-8-string-插入和删除"><a href="#3-1-8-string-插入和删除" class="headerlink" title="3.1.8 string 插入和删除"></a>3.1.8 string 插入和删除</h5><p><strong>功能描述：</strong></p><ul><li>对 string 字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);  </code> &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code> &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code> &#x2F;&#x2F;在指定位置插入 n 个字符 c</li><li><code>string&amp; erase(int pos, int n = npos);</code> &#x2F;&#x2F;删除从 Pos 开始的 n 个字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//字符串插入和删除</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从1号位置开始3个字符</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>插入和删除的起始下标都是从 0 开始</p><h5 id="3-1-9-string-子串"><a href="#3-1-9-string-子串" class="headerlink" title="3.1.9 string 子串"></a>3.1.9 string 子串</h5><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code> &#x2F;&#x2F;返回由 pos 开始的 n 个字符组成的字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//子串</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>string subStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"subStr = "</span> <span class="token operator">&lt;&lt;</span> subStr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string email <span class="token operator">=</span> <span class="token string">"hello@sina.com"</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string username <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"username: "</span> <span class="token operator">&lt;&lt;</span> username <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h4 id="3-2-vector-容器"><a href="#3-2-vector-容器" class="headerlink" title="3.2 vector 容器"></a>3.2 vector 容器</h4><h5 id="3-2-1-vector-基本概念"><a href="#3-2-1-vector-基本概念" class="headerlink" title="3.2.1 vector 基本概念"></a>3.2.1 vector 基本概念</h5><p><strong>功能：</strong></p><ul><li>vector 数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector 与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而 vector 可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002.jpg" alt="说明: 2015-11-10_151152"></p><ul><li>vector 容器的迭代器是支持随机访问的迭代器</li></ul><h5 id="3-2-2-vector-构造函数"><a href="#3-2-2-vector-构造函数" class="headerlink" title="3.2.2 vector 构造函数"></a>3.2.2 vector 构造函数</h5><p><strong>功能描述：</strong></p><ul><li>创建 vector 容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code> &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());   </code> &#x2F;&#x2F;将 v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code> &#x2F;&#x2F;构造函数将 n 个 elem 拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code> &#x2F;&#x2F;拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span> <span class="token comment">//无参构造</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v4</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>vector 的多种构造方式没有可比性，灵活使用即可</p><h5 id="3-2-3-vector-赋值操作"><a href="#3-2-3-vector-赋值操作" class="headerlink" title="3.2.3 vector 赋值操作"></a>3.2.3 vector 赋值操作</h5><p><strong>功能描述：</strong></p><ul><li>给 vector 容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>&#x2F;&#x2F;重载等号操作符</p></li><li><p><code>assign(beg, end);</code> &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> &#x2F;&#x2F;将 n 个 elem 拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//赋值操作</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span> <span class="token comment">//无参构造</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v2<span class="token punctuation">;</span>v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v3<span class="token punctuation">;</span>v3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v4<span class="token punctuation">;</span>v4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： vector 赋值方式比较简单，使用 operator&#x3D;，或者 assign 都可以</p><h5 id="3-2-4-vector-容量和大小"><a href="#3-2-4-vector-容量和大小" class="headerlink" title="3.2.4 vector 容量和大小"></a>3.2.4 vector 容量和大小</h5><p><strong>功能描述：</strong></p><ul><li>对 vector 容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty(); </code> &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>capacity();</code> &#x2F;&#x2F;容器的容量</p></li><li><p><code>size();</code> &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>resize(int num);</code> &#x2F;&#x2F;重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。</p><pre><code>                      //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li><li><p><code>resize(int num, elem);</code> &#x2F;&#x2F;重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。</p><pre><code>                          //如果容器变短，则末尾超出容器长度的元素被删除</code></pre></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1的容量 = "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1的大小 = "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充</span>v1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//resize 重新指定大小 ，若指定的更小，超出部分元素被删除</span>v1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空 — empty</li><li>返回元素个数 — size</li><li>返回容器容量 — capacity</li><li>重新指定大小 — resize</li></ul><h5 id="3-2-5-vector-插入和删除"><a href="#3-2-5-vector-插入和删除" class="headerlink" title="3.2.5 vector 插入和删除"></a>3.2.5 vector 插入和删除</h5><p><strong>功能描述：</strong></p><ul><li>对 vector 容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code> &#x2F;&#x2F;尾部插入元素 ele</li><li><code>pop_back();</code> &#x2F;&#x2F;删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code> &#x2F;&#x2F;迭代器指向位置 pos 插入元素 ele</li><li><code>insert(const_iterator pos, int count,ele);</code>&#x2F;&#x2F;迭代器指向位置 pos 插入 count 个元素 ele</li><li><code>erase(const_iterator pos);</code> &#x2F;&#x2F;删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>&#x2F;&#x2F;删除迭代器从 start 到 end 之间的元素</li><li><code>clear();</code> &#x2F;&#x2F;删除容器中所有元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入和删除</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span><span class="token comment">//尾插</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尾删</span>v1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入</span>v1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span>v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插 — push_back</li><li>尾删 — pop_back</li><li>插入 — insert (位置迭代器)</li><li>删除 — erase （位置迭代器）</li><li>清空 — clear</li></ul><h5 id="3-2-6-vector-数据存取"><a href="#3-2-6-vector-数据存取" class="headerlink" title="3.2.6 vector 数据存取"></a>3.2.6 vector 数据存取</h5><p><strong>功能描述：</strong></p><ul><li>对 vector 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code> &#x2F;&#x2F;返回索引 idx 所指的数据</li><li><code>operator[]; </code> &#x2F;&#x2F;返回索引 idx 所指的数据</li><li><code>front(); </code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1的第一个元素为： "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1的最后一个元素为： "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取 vector 容器中元素，[ ]和 at 也可以</li><li>front 返回容器第一个元素</li><li>back 返回容器最后一个元素</li></ul><h5 id="3-2-7-vector-互换容器"><a href="#3-2-7-vector-互换容器" class="headerlink" title="3.2.7 vector 互换容器"></a>3.2.7 vector 互换容器</h5><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code> &#x2F;&#x2F; 将 vec 与本身的元素互换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v2<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//互换容器</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"互换后"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printVector</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为："</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为："</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为："</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为："</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//收缩内存</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//匿名对象</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的容量为："</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v的大小为："</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：swap 可以使两个容器互换，可以达到实用的收缩内存效果</p><h5 id="3-2-8-vector-预留空间"><a href="#3-2-8-vector-预留空间" class="headerlink" title="3.2.8 vector 预留空间"></a>3.2.8 vector 预留空间</h5><p><strong>功能描述：</strong></p><ul><li>减少 vector 在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>&#x2F;&#x2F;容器预留 len 个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//预留空间</span>v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num:"</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果数据量较大，可以一开始利用 reserve 预留空间</p><h4 id="3-3-deque-容器"><a href="#3-3-deque-容器" class="headerlink" title="3.3 deque 容器"></a>3.3 deque 容器</h4><h5 id="3-3-1-deque-容器基本概念"><a href="#3-3-1-deque-容器基本概念" class="headerlink" title="3.3.1 deque 容器基本概念"></a>3.3.1 deque 容器基本概念</h5><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque 与 vector 区别：</strong></p><ul><li>vector 对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque 相对而言，对头部的插入删除速度回比 vector 快</li><li>vector 访问元素时的速度会比 deque 快,这和两者内部实现有关</li></ul><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101"></p><p>deque 内部工作原理:</p><p>deque 内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址，使得使用 deque 时像一片连续的内存空间</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341"></p><ul><li>deque 容器的迭代器也是支持随机访问的</li></ul><h5 id="3-3-2-deque-构造函数"><a href="#3-3-2-deque-构造函数" class="headerlink" title="3.3.2 deque 构造函数"></a>3.3.2 deque 构造函数</h5><p><strong>功能描述：</strong></p><ul><li>deque 容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT; &#x2F;&#x2F;默认构造形式</li><li><code>deque(beg, end);</code> &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code> &#x2F;&#x2F;构造函数将 n 个 elem 拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">void</span> <span class="token function">printDeque</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//deque构造</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d1<span class="token punctuation">;</span> <span class="token comment">//无参构造函数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">d2</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">d3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>d4 <span class="token operator">=</span> d3<span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>deque 容器和 vector 容器的构造方式几乎一致，灵活使用即可</p><h5 id="3-3-3-deque-赋值操作"><a href="#3-3-3-deque-赋值操作" class="headerlink" title="3.3.3 deque 赋值操作"></a>3.3.3 deque 赋值操作</h5><p><strong>功能描述：</strong></p><ul><li>给 deque 容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq); </code> &#x2F;&#x2F;重载等号操作符</p></li><li><p><code>assign(beg, end);</code> &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> &#x2F;&#x2F;将 n 个 elem 拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">void</span> <span class="token function">printDeque</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//赋值操作</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>d2<span class="token punctuation">;</span>d2 <span class="token operator">=</span> d1<span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>d3<span class="token punctuation">;</span>d3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>d4<span class="token punctuation">;</span>d4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：deque 赋值操作也与 vector 相同，需熟练掌握</p><h5 id="3-3-4-deque-大小操作"><a href="#3-3-4-deque-大小操作" class="headerlink" title="3.3.4 deque 大小操作"></a>3.3.4 deque 大小操作</h5><p><strong>功能描述：</strong></p><ul><li>对 deque 容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code> &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>deque.size();</code> &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为 num,若容器变长，则以默认值填充新位置。</p><pre><code>                                     //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li><li><p><code>deque.resize(num, elem);</code> &#x2F;&#x2F;重新指定容器的长度为 num,若容器变长，则以 elem 值填充新位置。</p><pre><code>                                                 //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">void</span> <span class="token function">printDeque</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//大小操作</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>d1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断容器是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1为空!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1不为空!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//统计大小</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1的大小为："</span> <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重新指定大小</span>d1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>deque 没有容量的概念</li><li>判断是否为空 — empty</li><li>返回元素个数 — size</li><li>重新指定个数 — resize</li></ul><h5 id="3-3-5-deque-插入和删除"><a href="#3-3-5-deque-插入和删除" class="headerlink" title="3.3.5 deque 插入和删除"></a>3.3.5 deque 插入和删除</h5><p><strong>功能描述：</strong></p><ul><li>向 deque 容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code> &#x2F;&#x2F;在容器尾部添加一个数据</li><li><code>push_front(elem);</code> &#x2F;&#x2F;在容器头部插入一个数据</li><li><code>pop_back();</code> &#x2F;&#x2F;删除容器最后一个数据</li><li><code>pop_front();</code> &#x2F;&#x2F;删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><p><code>insert(pos,elem);</code> &#x2F;&#x2F;在 pos 位置插入一个 elem 元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> &#x2F;&#x2F;在 pos 位置插入 n 个 elem 数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> &#x2F;&#x2F;在 pos 位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code> &#x2F;&#x2F;清空容器的所有数据</p></li><li><p><code>erase(beg,end);</code> &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> &#x2F;&#x2F;删除 pos 位置的数据，返回下一个数据的位置。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">void</span> <span class="token function">printDeque</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//两端操作</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span><span class="token comment">//尾插</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头插</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尾删</span>d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头删</span>d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>d2<span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token comment">//test02();</span>    <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插 — push_back</li><li>尾删 — pop_back</li><li>头插 — push_front</li><li>头删 — pop_front</li></ul><h5 id="3-3-6-deque-数据存取"><a href="#3-3-6-deque-数据存取" class="headerlink" title="3.3.6 deque 数据存取"></a>3.3.6 deque 数据存取</h5><p><strong>功能描述：</strong></p><ul><li>对 deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code> &#x2F;&#x2F;返回索引 idx 所指的数据</li><li><code>operator[]; </code> &#x2F;&#x2F;返回索引 idx 所指的数据</li><li><code>front(); </code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">void</span> <span class="token function">printDeque</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//数据存取</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"front:"</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back:"</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取 deque 容器中元素，[ ]和 at 也可以</li><li>front 返回容器第一个元素</li><li>back 返回容器最后一个元素</li></ul><h5 id="3-3-7-deque-排序"><a href="#3-3-7-deque-排序" class="headerlink" title="3.3.7 deque 排序"></a>3.3.7 deque 排序</h5><p><strong>功能描述：</strong></p><ul><li>利用算法实现对 deque 容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code> &#x2F;&#x2F;对 beg 和 end 区间内元素进行排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">void</span> <span class="token function">printDeque</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printDeque</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：sort 算法非常实用，使用时包含头文件 algorithm 即可</p><h4 id="3-4-案例-评委打分"><a href="#3-4-案例-评委打分" class="headerlink" title="3.4 案例-评委打分"></a>3.4 案例-评委打分</h4><h5 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h5><p>有 5 名选手：选手 ABCDE，10 个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h5 id="3-4-2-实现步骤"><a href="#3-4-2-实现步骤" class="headerlink" title="3.4.2 实现步骤"></a>3.4.2 实现步骤</h5><ol><li>创建五名选手，放到 vector 中</li><li>遍历 vector 容器，取出来每一个选手，执行 for 循环，可以把 10 个评分打分存到 deque 容器中</li><li>sort 算法对 deque 容器中分数排序，去除最高和最低分</li><li>deque 容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//选手类</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span> <span class="token comment">//姓名</span><span class="token keyword">int</span> m_Score<span class="token punctuation">;</span>  <span class="token comment">//平均分</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string nameSeed <span class="token operator">=</span> <span class="token string">"ABCDE"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string name <span class="token operator">=</span> <span class="token string">"选手"</span><span class="token punctuation">;</span>name <span class="token operator">+=</span> nameSeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Person <span class="token function">p</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将创建的person对象 放入到容器中</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打分</span><span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将评委的分数 放入到deque容器中</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>d<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">41</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">;</span>  <span class="token comment">// 60 ~ 100</span>d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//cout &lt;&lt; "选手： " &lt;&lt; it->m_Name &lt;&lt; " 打分： " &lt;&lt; endl;</span><span class="token comment">//for (deque&lt;int>::iterator dit = d.begin(); dit != d.end(); dit++)</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; *dit &lt;&lt; " ";</span><span class="token comment">//&#125;</span><span class="token comment">//cout &lt;&lt; endl;</span><span class="token comment">//排序</span><span class="token function">sort</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除最高和最低分</span>d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取平均分</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator dit <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dit <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dit<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> <span class="token operator">*</span>dit<span class="token punctuation">;</span> <span class="token comment">//累加每个评委的分数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将平均分 赋值给选手身上</span>it<span class="token operator">-></span>m_Score <span class="token operator">=</span> avg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showScore</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 平均分： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//随机数种子</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1、创建5名选手</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span>v<span class="token punctuation">;</span>  <span class="token comment">//存放选手容器</span><span class="token function">createPerson</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试</span><span class="token comment">//for (vector&lt;Person>::iterator it = v.begin(); it != v.end(); it++)</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; "姓名： " &lt;&lt; (*it).m_Name &lt;&lt; " 分数： " &lt;&lt; (*it).m_Score &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token comment">//2、给5名选手打分</span><span class="token function">setScore</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、显示最后得分</span><span class="token function">showScore</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h4 id="3-5-stack-容器"><a href="#3-5-stack-容器" class="headerlink" title="3.5 stack 容器"></a>3.5 stack 容器</h4><h5 id="3-5-1-stack-基本概念"><a href="#3-5-1-stack-基本概念" class="headerlink" title="3.5.1 stack 基本概念"></a>3.5.1 stack 基本概念</h5><p><strong>概念：</strong>stack 是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707"></p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为 — <strong>入栈</strong> <code>push</code></p><p>栈中弹出数据称为 — <strong>出栈</strong> <code>pop</code></p><p>生活中的栈：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002.png" alt="img"></p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1547605111510.jpg" alt="img"></p><h5 id="3-5-2-stack-常用接口"><a href="#3-5-2-stack-常用接口" class="headerlink" title="3.5.2 stack 常用接口"></a>3.5.2 stack 常用接口</h5><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code> &#x2F;&#x2F;stack 采用模板类实现， stack 对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> &#x2F;&#x2F;向栈顶添加元素</li><li><code>pop();</code> &#x2F;&#x2F;从栈顶移除第一个元素</li><li><code>top(); </code> &#x2F;&#x2F;返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size(); </code> &#x2F;&#x2F;返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token comment">//栈容器常用接口</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建栈容器 栈容器必须符合先进后出</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">//向栈中添加元素，叫做 压栈 入栈</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//输出栈顶元素</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"栈顶元素为： "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//弹出栈顶元素</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"栈的大小为："</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入栈 — push</li><li>出栈 — pop</li><li>返回栈顶 — top</li><li>判断栈是否为空 — empty</li><li>返回栈大小 — size</li></ul><h4 id="3-6-queue-容器"><a href="#3-6-queue-容器" class="headerlink" title="3.6 queue 容器"></a>3.6 queue 容器</h4><h5 id="3-6-1-queue-基本概念"><a href="#3-6-1-queue-基本概念" class="headerlink" title="3.6.1 queue 基本概念"></a>3.6.1 queue 基本概念</h5><p><strong>概念：</strong>Queue 是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429"></p><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为 — <strong>入队</strong> <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong> <code>pop</code></p><p>生活中的队列：</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/1547606785041.png" alt="1547606785041"></p><h5 id="3-6-2-queue-常用接口"><a href="#3-6-2-queue-常用接口" class="headerlink" title="3.6.2 queue 常用接口"></a>3.6.2 queue 常用接口</h5><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code> &#x2F;&#x2F;queue 采用模板类实现，queue 对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> &#x2F;&#x2F;往队尾添加元素</li><li><code>pop();</code> &#x2F;&#x2F;从队头移除第一个元素</li><li><code>back();</code> &#x2F;&#x2F;返回最后一个元素</li><li><code>front(); </code> &#x2F;&#x2F;返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size(); </code> &#x2F;&#x2F;返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建队列</span>queue<span class="token operator">&lt;</span>Person<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token comment">//准备数据</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"沙僧"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向队列中添加元素  入队操作</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列不提供迭代器，更不支持随机访问</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//输出队头元素</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"队头元素-- 姓名： "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_Name              <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span><span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"队尾元素-- 姓名： "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_Name              <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//弹出队头元素</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"队列大小为："</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入队 — push</li><li>出队 — pop</li><li>返回队头元素 — front</li><li>返回队尾元素 — back</li><li>判断队是否为空 — empty</li><li>返回队列大小 — size</li></ul><h4 id="3-7-list-容器"><a href="#3-7-list-容器" class="headerlink" title="3.7 list 容器"></a>3.7 list 容器</h4><h5 id="3-7-1-list-基本概念"><a href="#3-7-1-list-基本概念" class="headerlink" title="3.7.1 list 基本概念"></a>3.7.1 list 基本概念</h5><p><strong>功能：</strong>将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL 中的链表是一个双向循环链表</p><p><img src="/2024/07/17/c-cheng-xu-she-ji/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表 list 中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p><p>list 的优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list 的缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List 有一个重要的性质，插入操作和删除操作都不会造成原有 list 迭代器的失效，这在 vector 是不成立的。</p><p>总结：STL 中<strong>List 和 vector 是两个最常被使用的容器</strong>，各有优缺点</p><h5 id="3-7-2-list-构造函数"><a href="#3-7-2-list-构造函数" class="headerlink" title="3.7.2 list 构造函数"></a>3.7.2 list 构造函数</h5><p><strong>功能描述：</strong></p><ul><li>创建 list 容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code> &#x2F;&#x2F;list 采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code> &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code> &#x2F;&#x2F;构造函数将 n 个 elem 拷贝给本身。</li><li><code>list(const list &amp;lst);</code> &#x2F;&#x2F;拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">L2</span><span class="token punctuation">(</span>L1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>L1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">L3</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L3<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">L4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list 构造方式同其他几个 STL 常用容器，熟练掌握即可</p><h5 id="3-7-3-list-赋值和交换"><a href="#3-7-3-list-赋值和交换" class="headerlink" title="3.7.3 list 赋值和交换"></a>3.7.3 list 赋值和交换</h5><p><strong>功能描述：</strong></p><ul><li>给 list 容器进行赋值，以及交换 list 容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code> &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code> &#x2F;&#x2F;将 n 个 elem 拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>swap(lst);</code> &#x2F;&#x2F;将 lst 与本身的元素互换。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//赋值和交换</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L2<span class="token punctuation">;</span>L2 <span class="token operator">=</span> L1<span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L3<span class="token punctuation">;</span>L3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>L2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> L2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L3<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L4<span class="token punctuation">;</span>L4<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//交换</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L2<span class="token punctuation">;</span>L2<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换前： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换后： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list 赋值和交换操作能够灵活运用即可</p><h5 id="3-7-4-list-大小操作"><a href="#3-7-4-list-大小操作" class="headerlink" title="3.7.4 list 大小操作"></a>3.7.4 list 大小操作</h5><p><strong>功能描述：</strong></p><ul><li>对 list 容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size(); </code> &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>empty(); </code> &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。</p><pre><code>                    //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li><li><p><code>resize(num, elem); </code> &#x2F;&#x2F;重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。</p><p>&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//大小操作</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L1为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L1不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"L1的大小为： "</span> <span class="token operator">&lt;&lt;</span> L1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重新指定大小</span>L1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空 — empty</li><li>返回元素个数 — size</li><li>重新指定个数 — resize</li></ul><h5 id="3-7-5-list-插入和删除"><a href="#3-7-5-list-插入和删除" class="headerlink" title="3.7.5 list 插入和删除"></a>3.7.5 list 插入和删除</h5><p><strong>功能描述：</strong></p><ul><li>对 list 容器进行数据的插入和删除</li></ul><p><strong>函数原型：</strong></p><ul><li>push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素</li><li>pop_back();&#x2F;&#x2F;删除容器中最后一个元素</li><li>push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素</li><li>pop_front();&#x2F;&#x2F;从容器开头移除第一个元素</li><li>insert(pos,elem);&#x2F;&#x2F;在 pos 位置插 elem 元素的拷贝，返回新数据的位置。</li><li>insert(pos,n,elem);&#x2F;&#x2F;在 pos 位置插入 n 个 elem 数据，无返回值。</li><li>insert(pos,beg,end);&#x2F;&#x2F;在 pos 位置插入[beg,end)区间的数据，无返回值。</li><li>clear();&#x2F;&#x2F;移除容器的所有数据</li><li>erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li>erase(pos);&#x2F;&#x2F;删除 pos 位置的数据，返回下一个数据的位置。</li><li>remove(elem);&#x2F;&#x2F;删除容器中所有与 elem 值匹配的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入和删除</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> L<span class="token punctuation">;</span><span class="token comment">//尾插</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头插</span>L<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尾删</span>L<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//头删</span>L<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">++</span>it<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移除</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清空</span>L<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插 — push_back</li><li>尾删 — pop_back</li><li>头插 — push_front</li><li>头删 — pop_front</li><li>插入 — insert</li><li>删除 — erase</li><li>移除 — remove</li><li>清空 — clear</li></ul><h5 id="3-7-6-list-数据存取"><a href="#3-7-6-list-数据存取" class="headerlink" title="3.7.6 list 数据存取"></a>3.7.6 list 数据存取</h5><p><strong>功能描述：</strong></p><ul><li>对 list 容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code> &#x2F;&#x2F;返回第一个元素。</li><li><code>back();</code> &#x2F;&#x2F;返回最后一个元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token comment">//数据存取</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>L1<span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span><span class="token comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个元素为： "</span> <span class="token operator">&lt;&lt;</span> L1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最后一个元素为： "</span> <span class="token operator">&lt;&lt;</span> L1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//list容器的迭代器是双向迭代器，不支持随机访问</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> L1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>list 容器中不可以通过[]或者 at 方式访问数据</li><li>返回第一个元素 — front</li><li>返回最后一个元素 — back</li></ul><h5 id="3-7-7-list-反转和排序"><a href="#3-7-7-list-反转和排序" class="headerlink" title="3.7.7 list 反转和排序"></a>3.7.7 list 反转和排序</h5><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code> &#x2F;&#x2F;反转链表</li><li><code>sort();</code> &#x2F;&#x2F;链表排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token keyword">const</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">myCompare</span><span class="token punctuation">(</span><span class="token keyword">int</span> val1 <span class="token punctuation">,</span> <span class="token keyword">int</span> val2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val1 <span class="token operator">></span> val2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反转和排序</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> L<span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反转容器的元素</span>L<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span>L<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认的排序规则 从小到大</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指定规则，从大到小</span><span class="token function">printList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>反转 — reverse</li><li>排序 — sort （成员函数）</li></ul><h5 id="3-7-8-排序案例"><a href="#3-7-8-排序案例" class="headerlink" title="3.7.8 排序案例"></a>3.7.8 排序案例</h5><p>案例描述：将 Person 自定义数据类型进行排序，Person 中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age <span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span>m_Height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span>  <span class="token comment">//姓名</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token keyword">int</span> m_Height<span class="token punctuation">;</span>   <span class="token comment">//身高</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">ComparePerson</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p1<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_Age <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_Height  <span class="token operator">></span> p2<span class="token punctuation">.</span>m_Height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span>  p1<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span>Person<span class="token operator">></span> L<span class="token punctuation">;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">35</span> <span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token number">45</span> <span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"孙权"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">35</span> <span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">35</span> <span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Age              <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>L<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ComparePerson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//排序</span><span class="token keyword">for</span> <span class="token punctuation">(</span>list<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> L<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> L<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Age              <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h4 id="3-8-set-multiset-容器"><a href="#3-8-set-multiset-容器" class="headerlink" title="3.8 set&#x2F; multiset 容器"></a>3.8 set&#x2F; multiset 容器</h4><h5 id="3-8-1-set-基本概念"><a href="#3-8-1-set-基本概念" class="headerlink" title="3.8.1 set 基本概念"></a>3.8.1 set 基本概念</h5><p><strong>简介：</strong></p><ul><li>所有元素都会在插入时自动被排序</li></ul><p><strong>本质：</strong></p><ul><li>set&#x2F;multiset 属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p><strong>set 和 multiset 区别</strong>：</p><ul><li>set 不允许容器中有重复的元素</li><li>multiset 允许容器中有重复的元素</li></ul><h5 id="3-8-2-set-构造和赋值"><a href="#3-8-2-set-构造和赋值" class="headerlink" title="3.8.2 set 构造和赋值"></a>3.8.2 set 构造和赋值</h5><p>功能描述：创建 set 容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code> &#x2F;&#x2F;默认构造函数：</li><li><code>set(const set &amp;st);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">void</span> <span class="token function">printSet</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造和赋值</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s3<span class="token punctuation">;</span>s3 <span class="token operator">=</span> s2<span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>set 容器插入数据时用 insert</li><li>set 容器插入数据的数据会自动排序</li></ul><h5 id="3-8-3-set-大小和交换"><a href="#3-8-3-set-大小和交换" class="headerlink" title="3.8.3 set 大小和交换"></a>3.8.3 set 大小和交换</h5><p><strong>功能描述：</strong></p><ul><li>统计 set 容器大小以及交换 set 容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code> &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">void</span> <span class="token function">printSet</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//大小</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1的大小为： "</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//交换</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s2<span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换前"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换后"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小 — size</li><li>判断是否为空 — empty</li><li>交换容器 — swap</li></ul><h5 id="3-8-4-set-插入和删除"><a href="#3-8-4-set-插入和删除" class="headerlink" title="3.8.4 set 插入和删除"></a>3.8.4 set 插入和删除</h5><p><strong>功能描述：</strong></p><ul><li>set 容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除 pos 迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code> &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code> &#x2F;&#x2F;删除容器中值为 elem 的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">void</span> <span class="token function">printSet</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入和删除</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span><span class="token comment">//插入</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span><span class="token comment">//s1.erase(s1.begin(), s1.end());</span>s1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printSet</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入 — insert</li><li>删除 — erase</li><li>清空 — clear</li></ul><h5 id="3-8-5-set-查找和统计"><a href="#3-8-5-set-查找和统计" class="headerlink" title="3.8.5 set 查找和统计"></a>3.8.5 set 查找和统计</h5><p><strong>功能描述：</strong></p><ul><li>对 set 容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找 key 是否存在,若存在，返回该键的元素的迭代器；若不存在，返回 set.end();</li><li><code>count(key);</code> &#x2F;&#x2F;统计 key 的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token comment">//查找和统计</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span><span class="token comment">//插入</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator pos <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到了元素 ： "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//统计</span><span class="token keyword">int</span> num <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找 — find （返回的是迭代器）</li><li>统计 — count （对于 set，结果为 0 或者 1）</li></ul><h5 id="3-8-6-set-和-multiset-区别"><a href="#3-8-6-set-和-multiset-区别" class="headerlink" title="3.8.6 set 和 multiset 区别"></a>3.8.6 set 和 multiset 区别</h5><p><strong>学习目标：</strong></p><ul><li>掌握 set 和 multiset 的区别</li></ul><p><strong>区别：</strong></p><ul><li>set 不可以插入重复数据，而 multiset 可以</li><li>set 插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset 不会检测数据，因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token comment">//set和multiset区别</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span>  ret <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一次插入成功!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一次插入失败!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ret <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第二次插入成功!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第二次插入失败!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//multiset</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ms<span class="token punctuation">;</span>ms<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ms<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ms<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>如果不允许插入重复数据可以利用 set</li><li>如果需要插入重复数据利用 multiset</li></ul><h5 id="3-8-7-pair-对组创建"><a href="#3-8-7-pair-对组创建" class="headerlink" title="3.8.7 pair 对组创建"></a>3.8.7 pair 对组创建</h5><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//对组创建</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span>  p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> p2 <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><h5 id="3-8-8-set-容器排序"><a href="#3-8-8-set-容器排序" class="headerlink" title="3.8.8 set 容器排序"></a>3.8.8 set 容器排序</h5><p>学习目标：</p><ul><li>set 容器默认排序规则为从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例一</strong> set 存放内置数据类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">class</span> <span class="token class-name">MyCompare</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> v1 <span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认从小到大</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//指定排序规则</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>MyCompare<span class="token operator">></span> s2<span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：利用仿函数可以指定 set 容器的排序规则</p><p><strong>示例二</strong> set 存放自定义数据类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">comparePerson</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p1<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//按照年龄进行排序  降序</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_Age <span class="token operator">></span> p2<span class="token punctuation">.</span>m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> comparePerson<span class="token operator">></span> s<span class="token punctuation">;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> comparePerson<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>对于自定义数据类型，set 必须指定排序规则才可以插入数据</p><h4 id="3-9-map-multimap-容器"><a href="#3-9-map-multimap-容器" class="headerlink" title="3.9 map&#x2F; multimap 容器"></a>3.9 map&#x2F; multimap 容器</h4><h5 id="3-9-1-map-基本概念"><a href="#3-9-1-map-基本概念" class="headerlink" title="3.9.1 map 基本概念"></a>3.9.1 map 基本概念</h5><p><strong>简介：</strong></p><ul><li>map 中所有元素都是 pair</li><li>pair 中第一个元素为 key（键值），起到索引作用，第二个元素为 value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质：</strong></p><ul><li>map&#x2F;multimap 属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据 key 值快速找到 value 值</li></ul><p>map 和 multimap<strong>区别</strong>：</p><ul><li>map 不允许容器中有重复 key 值元素</li><li>multimap 允许容器中有重复 key 值元素</li></ul><h5 id="3-9-2-map-构造和赋值"><a href="#3-9-2-map-构造和赋值" class="headerlink" title="3.9.2 map 构造和赋值"></a>3.9.2 map 构造和赋值</h5><p><strong>功能描述：</strong></p><ul><li>对 map 容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code> &#x2F;&#x2F;map 默认构造函数:</li><li><code>map(const map &amp;mp);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">printMap</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" value = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span> <span class="token comment">//默认构造</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token function">m2</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拷贝构造</span><span class="token function">printMap</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>m3<span class="token punctuation">;</span>m3 <span class="token operator">=</span> m2<span class="token punctuation">;</span> <span class="token comment">//赋值</span><span class="token function">printMap</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：map 中所有元素都是成对出现，插入数据时候要使用对组</p><h5 id="3-9-3-map-大小和交换"><a href="#3-9-3-map-大小和交换" class="headerlink" title="3.9.3 map 大小和交换"></a>3.9.3 map 大小和交换</h5><p><strong>功能描述：</strong></p><ul><li>统计 map 容器大小以及交换 map 容器</li></ul><p>函数原型：</p><ul><li><code>size();</code> &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">printMap</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" value = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m不为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m的大小为： "</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//交换</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>m2<span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换前"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换后"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小 — size</li><li>判断是否为空 — empty</li><li>交换容器 — swap</li></ul><h5 id="3-9-4-map-插入和删除"><a href="#3-9-4-map-插入和删除" class="headerlink" title="3.9.4 map 插入和删除"></a>3.9.4 map 插入和删除</h5><p><strong>功能描述：</strong></p><ul><li>map 容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除 pos 迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code> &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code> &#x2F;&#x2F;删除容器中值为 key 的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">printMap</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" value = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//插入</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token comment">//第一种插入方式</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种插入方式</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种插入方式</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四种插入方式</span>m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>map 插入方式很多，记住其一即可</li></ul><ul><li>插入 — insert</li><li>删除 — erase</li><li>清空 — clear</li></ul><h5 id="3-9-5-map-查找和统计"><a href="#3-9-5-map-查找和统计" class="headerlink" title="3.9.5 map 查找和统计"></a>3.9.5 map 查找和统计</h5><p><strong>功能描述：</strong></p><ul><li>对 map 容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找 key 是否存在,若存在，返回该键的元素的迭代器；若不存在，返回 set.end();</li><li><code>count(key);</code> &#x2F;&#x2F;统计 key 的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token comment">//查找和统计</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator pos <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到了元素 key = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" value = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//统计</span><span class="token keyword">int</span> num <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找 — find （返回的是迭代器）</li><li>统计 — count （对于 map，结果为 0 或者 1）</li></ul><h5 id="3-9-6-map-容器排序"><a href="#3-9-6-map-容器排序" class="headerlink" title="3.9.6 map 容器排序"></a>3.9.6 map 容器排序</h5><p><strong>学习目标：</strong></p><ul><li>map 容器默认排序规则为 按照 key 值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">class</span> <span class="token class-name">MyCompare</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> v1 <span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//默认从小到大排序</span><span class="token comment">//利用仿函数实现从大到小排序</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> MyCompare<span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" value:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用仿函数可以指定 map 容器的排序规则</li><li>对于自定义数据类型，map 必须要指定排序规则,同 set 容器</li></ul><h4 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h4><h5 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h5><ul><li>公司今天招聘了 10 个员工（ABCDEFGHIJ），10 名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名 工资组成；部门分为：策划、美术、研发</li><li>随机给 10 名员工分配部门和工资</li><li>通过 multimap 进行信息的插入 key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h5 id="3-10-2-实现步骤"><a href="#3-10-2-实现步骤" class="headerlink" title="3.10.2 实现步骤"></a>3.10.2 实现步骤</h5><ol><li>创建 10 名员工，放到 vector 中</li><li>遍历 vector 容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为 key，具体员工作为 value，放入到 multimap 容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token comment">/*- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发- 随机给10名员工分配部门和工资- 通过multimap进行信息的插入  key(部门编号) value(员工)- 分部门显示员工信息*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CEHUA</span>  <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MEISHU</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">YANFA</span>  <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">createWorker</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string nameSeed <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJ"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Worker worker<span class="token punctuation">;</span>worker<span class="token punctuation">.</span>m_Name <span class="token operator">=</span> <span class="token string">"员工"</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span>m_Name <span class="token operator">+=</span> nameSeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span>m_Salary <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment">// 10000 ~ 19999</span><span class="token comment">//将员工放入到容器中</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//员工分组</span><span class="token keyword">void</span> <span class="token function">setGroup</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>Worker<span class="token operator">></span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//产生随机部门编号</span><span class="token keyword">int</span> deptId <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span><span class="token comment">//将员工插入到分组中</span><span class="token comment">//key部门编号，value具体员工</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>deptId<span class="token punctuation">,</span> <span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showWorkerByGourp</span><span class="token punctuation">(</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>Worker<span class="token operator">></span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 0  A  B  C   1  D  E   2  F G ...</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"策划部门："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>Worker<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator pos <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>CEHUA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>CEHUA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 统计具体人数</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> pos<span class="token operator">++</span> <span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token operator">-></span>second<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 工资： "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token operator">-></span>second<span class="token punctuation">.</span>m_Salary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"美术部门： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>pos <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>MEISHU<span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>MEISHU<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 统计具体人数</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token operator">-></span>second<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 工资： "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token operator">-></span>second<span class="token punctuation">.</span>m_Salary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"研发部门： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>pos <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>YANFA<span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>YANFA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 统计具体人数</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token operator">-></span>second<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 工资： "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token operator">-></span>second<span class="token punctuation">.</span>m_Salary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1、创建员工</span>vector<span class="token operator">&lt;</span>Worker<span class="token operator">></span>vWorker<span class="token punctuation">;</span><span class="token function">createWorker</span><span class="token punctuation">(</span>vWorker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、员工分组</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Worker<span class="token operator">></span>mWorker<span class="token punctuation">;</span><span class="token function">setGroup</span><span class="token punctuation">(</span>vWorker<span class="token punctuation">,</span> mWorker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、分组显示员工</span><span class="token function">showWorkerByGourp</span><span class="token punctuation">(</span>mWorker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">////测试</span><span class="token comment">//for (vector&lt;Worker>::iterator it = vWorker.begin(); it != vWorker.end(); it++)</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; "姓名： " &lt;&lt; it->m_Name &lt;&lt; " 工资： " &lt;&lt; it->m_Salary &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用 map 或 multimap</li></ul><h3 id="4-STL-函数对象"><a href="#4-STL-函数对象" class="headerlink" title="4 STL- 函数对象"></a>4 STL- 函数对象</h3><h4 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h4><h5 id="4-1-1-函数对象概念"><a href="#4-1-1-函数对象概念" class="headerlink" title="4.1.1 函数对象概念"></a>4.1.1 函数对象概念</h5><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h5 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2 函数对象使用"></a>4.1.2 函数对象使用</h5><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p><strong>示例:</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span><span class="token keyword">class</span> <span class="token class-name">MyAdd</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token operator">:</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyAdd myAdd<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">myAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、函数对象可以有自己的状态</span><span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> test <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//统计使用次数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">//内部自己的状态</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyPrint myPrint<span class="token punctuation">;</span><span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"myPrint调用次数为： "</span> <span class="token operator">&lt;&lt;</span> myPrint<span class="token punctuation">.</span>count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、函数对象可以作为参数传递</span><span class="token keyword">void</span> <span class="token function">doPrint</span><span class="token punctuation">(</span>MyPrint <span class="token operator">&amp;</span>mp <span class="token punctuation">,</span> string test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">mp</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyPrint myPrint<span class="token punctuation">;</span><span class="token function">doPrint</span><span class="token punctuation">(</span>myPrint<span class="token punctuation">,</span> <span class="token string">"Hello C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token comment">//test02();</span><span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h4 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2 谓词"></a>4.2 谓词</h4><h5 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h5><p><strong>概念：</strong></p><ul><li>返回 bool 类型的仿函数称为<strong>谓词</strong></li><li>如果 operator()接受一个参数，那么叫做一元谓词</li><li>如果 operator()接受两个参数，那么叫做二元谓词</li></ul><h5 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h5><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment">//1.一元谓词</span><span class="token keyword">struct</span> <span class="token class-name">GreaterFive</span><span class="token punctuation">&#123;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GreaterFive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没找到!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有一个的谓词，称为一元谓词</p><h5 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h5><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment">//二元谓词</span><span class="token keyword">class</span> <span class="token class-name">MyCompare</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num1 <span class="token operator">></span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认从小到大</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//使用函数对象改变算法策略，排序从大到小</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MyCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有两个的谓词，称为二元谓词</p><h4 id="4-3-内建函数对象"><a href="#4-3-内建函数对象" class="headerlink" title="4.3 内建函数对象"></a>4.3 内建函数对象</h4><h5 id="4-3-1-内建函数对象意义"><a href="#4-3-1-内建函数对象意义" class="headerlink" title="4.3.1 内建函数对象意义"></a>4.3.1 内建函数对象意义</h5><p><strong>概念：</strong></p><ul><li>STL 内建了一些函数对象</li></ul><p><strong>分类:</strong></p><ul><li><p>算术仿函数</p></li><li><p>关系仿函数</p></li><li><p>逻辑仿函数</p></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h5 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h5><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中 negate 是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code> &#x2F;&#x2F;加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code> &#x2F;&#x2F;减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> &#x2F;&#x2F;乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code> &#x2F;&#x2F;除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> &#x2F;&#x2F;取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code> &#x2F;&#x2F;取反仿函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token comment">//negate</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>negate<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> n<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//plus</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>plus<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h5 id="4-3-3-关系仿函数"><a href="#4-3-3-关系仿函数" class="headerlink" title="4.3.3 关系仿函数"></a>4.3.3 关系仿函数</h5><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> &#x2F;&#x2F;等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> &#x2F;&#x2F;不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> &#x2F;&#x2F;大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> &#x2F;&#x2F;大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> &#x2F;&#x2F;小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> &#x2F;&#x2F;小于等于</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">class</span> <span class="token class-name">MyCompare</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> v1 <span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//自己实现仿函数</span><span class="token comment">//sort(v.begin(), v.end(), MyCompare());</span><span class="token comment">//STL内建仿函数  大于仿函数</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：关系仿函数中最常用的就是 greater&lt;&gt;大于</p><h5 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h5><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> &#x2F;&#x2F;逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> &#x2F;&#x2F;逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> &#x2F;&#x2F;逻辑非</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//逻辑非  将v容器搬运到v2中，并执行逻辑非运算</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> v2<span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">transform</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">logical_not</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：逻辑仿函数实际应用较少，了解即可</p><h3 id="5-STL-常用算法"><a href="#5-STL-常用算法" class="headerlink" title="5 STL- 常用算法"></a>5 STL- 常用算法</h3><p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有 STL 头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h4 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h4><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code> &#x2F;&#x2F;遍历容器</li><li><code>transform</code> &#x2F;&#x2F;搬运容器到另一个容器中</li></ul><h5 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h5><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func);  </code></p><p>&#x2F;&#x2F; 遍历算法 遍历容器元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _func 函数或者函数对象</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">//普通函数</span><span class="token keyword">void</span> <span class="token function">print01</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数对象</span><span class="token keyword">class</span> <span class="token class-name">print02</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//for_each算法基本用法</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历算法</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> print01<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">print02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>for_each 在实际开发中是最常用遍历算法，需要熟练掌握</p><h5 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h5><p><strong>功能描述：</strong></p><ul><li>搬运容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>&#x2F;&#x2F;beg1 源容器开始迭代器</p><p>&#x2F;&#x2F;end1 源容器结束迭代器</p><p>&#x2F;&#x2F;beg2 目标容器开始迭代器</p><p>&#x2F;&#x2F;_func 函数或者函数对象</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token comment">//常用遍历算法  搬运 transform</span><span class="token keyword">class</span> <span class="token class-name">TransForm</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>vTarget<span class="token punctuation">;</span> <span class="token comment">//目标容器</span>vTarget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标容器需要提前开辟空间</span><span class="token function">transform</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TransForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p><h4 id="5-2-常用查找算法"><a href="#5-2-常用查找算法" class="headerlink" title="5.2 常用查找算法"></a>5.2 常用查找算法</h4><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code> &#x2F;&#x2F;查找元素</li><li><code>find_if</code> &#x2F;&#x2F;按条件查找元素</li><li><code>adjacent_find</code> &#x2F;&#x2F;查找相邻重复元素</li><li><code>binary_search</code> &#x2F;&#x2F;二分查找法</li><li><code>count</code> &#x2F;&#x2F;统计元素个数</li><li><code>count_if</code> &#x2F;&#x2F;按条件统计元素个数</li></ul><h5 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h5><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器 end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查找容器中是否有 5 这个元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重载==</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//创建数据</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到姓名:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 利用 find 可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h5 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h5><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 函数或者谓词（返回 bool 类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//内置数据类型</span><span class="token keyword">class</span> <span class="token class-name">GreaterFive</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GreaterFive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到大于5的数字:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//自定义数据类型</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Greater20</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//创建数据</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Greater20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到姓名:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：find_if 按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h5 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h5><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end);  </code></p><p>&#x2F;&#x2F; 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找相邻重复元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">adjacent_find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找不到!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到相邻重复元素为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：面试题中如果出现查找相邻重复元素，记得用 STL 中的 adjacent_find 算法</p><h5 id="5-2-4-binary-search"><a href="#5-2-4-binary-search" class="headerlink" title="5.2.4 binary_search"></a>5.2.4 binary_search</h5><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 查找指定的元素，查到 返回 true 否则 false</p><p>&#x2F;&#x2F; 注意: 在<strong>无序序列中不可用</strong></p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//二分查找</span><span class="token keyword">bool</span> ret <span class="token operator">=</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到了"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><h5 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h5><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 统计元素出现次数</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 统计的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">//内置数据类型</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4的个数为： "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//自定义数据类型</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"诸葛亮"</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h5 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h5><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><p>&#x2F;&#x2F; 按条件统计元素出现次数</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">Greater4</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//内置数据类型</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">count_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Greater4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大于4的个数为： "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//自定义数据类型</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AgeLess35</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">count_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AgeLess35</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小于35岁的个数："</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>按值统计用 count，按条件统计用 count_if</p><h4 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h4><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code> &#x2F;&#x2F;对容器内元素进行排序</li><li><code>random_shuffle</code> &#x2F;&#x2F;洗牌 指定范围内的元素随机调整次序</li><li><code>merge </code> &#x2F;&#x2F; 容器元素合并，并存储到另一容器中</li><li><code>reverse</code> &#x2F;&#x2F; 反转指定范围的元素</li></ul><h5 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a>5.3.1 sort</h5><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sort默认从小到大排序</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myPrint<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//从大到小排序</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myPrint<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>sort 属于开发中最常用的算法之一，需熟练掌握</p><h5 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h5><p><strong>功能描述：</strong></p><ul><li>洗牌 指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end);  </code></p><p>&#x2F;&#x2F; 指定范围内的元素随机调整次序</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//打乱顺序</span><span class="token function">random_shuffle</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>random_shuffle 洗牌算法比较实用，使用时记得加随机数种子</p><h5 id="5-3-3-merge"><a href="#5-3-3-merge" class="headerlink" title="5.3.3 merge"></a>5.3.3 merge</h5><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 容器元素合并，并存储到另一容器中</p><p>&#x2F;&#x2F; 注意: 两个容器必须是<strong>有序的</strong></p><p>&#x2F;&#x2F; beg1 容器 1 开始迭代器<br>&#x2F;&#x2F; end1 容器 1 结束迭代器<br>&#x2F;&#x2F; beg2 容器 2 开始迭代器<br>&#x2F;&#x2F; end2 容器 2 结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vtarget<span class="token punctuation">;</span><span class="token comment">//目标容器需要提前开辟空间</span>vtarget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并  需要两个有序序列</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vtarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vtarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vtarget<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>merge 合并的两个容器必须的有序序列</p><h5 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h5><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end);  </code></p><p>&#x2F;&#x2F; 反转指定范围的元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"反转前： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"反转后： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>reverse 反转区间内元素，面试题可能涉及到</p><h4 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h4><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code> &#x2F;&#x2F; 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code> &#x2F;&#x2F; 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code> &#x2F;&#x2F; 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code> &#x2F;&#x2F; 互换两个容器的元素</li></ul><h5 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h5><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; dest 目标起始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用 copy 算法在拷贝时，目标容器记得提前开辟空间</p><h5 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h5><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><p>&#x2F;&#x2F; 将区间内旧元素 替换成 新元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; oldvalue 旧元素</p><p>&#x2F;&#x2F; newvalue 新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换前："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//将容器中的20 替换成 2000</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换后："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">replace</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>replace 会替换区间内满足条件的元素</p><h5 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h5><p><strong>功能描述:</strong></p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><p>&#x2F;&#x2F; 按条件替换元素，满足条件的替换成指定元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _pred 谓词</p><p>&#x2F;&#x2F; newvalue 替换的新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ReplaceGreater30</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换前："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//将容器中大于等于的30 替换成 3000</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换后："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">replace_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ReplaceGreater30</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>replace_if 按条件查找，可以利用仿函数灵活筛选满足的条件</p><h5 id="5-4-4-swap"><a href="#5-4-4-swap" class="headerlink" title="5.4.4 swap"></a>5.4.4 swap</h5><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2);  </code></p><p>&#x2F;&#x2F; 互换两个容器的元素</p><p>&#x2F;&#x2F; c1 容器 1</p><p>&#x2F;&#x2F; c2 容器 2</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换前： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"交换后： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>swap 交换容器时，注意交换的容器要同种类型</p><h4 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法"></a>5.5 常用算术生成算法</h4><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code> &#x2F;&#x2F; 计算容器元素累计总和</p></li><li><p><code>fill</code> &#x2F;&#x2F; 向容器中添加元素</p></li></ul><h5 id="5-5-1-accumulate"><a href="#5-5-1-accumulate" class="headerlink" title="5.5.1 accumulate"></a>5.5.1 accumulate</h5><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 计算容器元素累计总和</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 起始值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"total = "</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>accumulate 使用时头文件注意是 numeric，这个算法很实用</p><h5 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h5><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 向容器中填充元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 填充的值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填充</span><span class="token function">fill</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用 fill 可以将容器区间内元素填充为 指定的值</p><h4 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h4><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>set_intersection</code> &#x2F;&#x2F; 求两个容器的交集</p></li><li><p><code>set_union</code> &#x2F;&#x2F; 求两个容器的并集</p></li><li><p><code>set_difference </code> &#x2F;&#x2F; 求两个容器的差集</p></li></ul><h5 id="5-6-1-set-intersection"><a href="#5-6-1-set-intersection" class="headerlink" title="5.6.1 set_intersection"></a>5.6.1 set_intersection</h5><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 求两个集合的交集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器 1 开始迭代器<br>&#x2F;&#x2F; end1 容器 1 结束迭代器<br>&#x2F;&#x2F; beg2 容器 2 开始迭代器<br>&#x2F;&#x2F; end2 容器 2 结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vTarget<span class="token punctuation">;</span><span class="token comment">//取两个里面较小的值给目标容器开辟空间</span>vTarget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回目标容器的最后一个元素的迭代器地址</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itEnd <span class="token operator">=</span>        <span class="token function">set_intersection</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itEnd<span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection 返回值既是交集中最后一个元素的位置</li></ul><h5 id="5-6-2-set-union"><a href="#5-6-2-set-union" class="headerlink" title="5.6.2 set_union"></a>5.6.2 set_union</h5><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 求两个集合的并集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器 1 开始迭代器<br>&#x2F;&#x2F; end1 容器 1 结束迭代器<br>&#x2F;&#x2F; beg2 容器 2 开始迭代器<br>&#x2F;&#x2F; end2 容器 2 结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vTarget<span class="token punctuation">;</span><span class="token comment">//取两个容器的和给目标容器开辟空间</span>vTarget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回目标容器的最后一个元素的迭代器地址</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itEnd <span class="token operator">=</span>        <span class="token function">set_union</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itEnd<span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union 返回值既是并集中最后一个元素的位置</li></ul><h5 id="5-6-3-set-difference"><a href="#5-6-3-set-difference" class="headerlink" title="5.6.3 set_difference"></a>5.6.3 set_difference</h5><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 求两个集合的差集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器 1 开始迭代器<br>&#x2F;&#x2F; end1 容器 1 结束迭代器<br>&#x2F;&#x2F; beg2 容器 2 开始迭代器<br>&#x2F;&#x2F; end2 容器 2 结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">class</span> <span class="token class-name">myPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vTarget<span class="token punctuation">;</span><span class="token comment">//取两个里面较大的值给目标容器开辟空间</span>vTarget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span> <span class="token function">max</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回目标容器的最后一个元素的迭代器地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1与v2的差集为： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itEnd <span class="token operator">=</span>        <span class="token function">set_difference</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itEnd<span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v2与v1的差集为： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>itEnd <span class="token operator">=</span> <span class="token function">set_difference</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vTarget<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itEnd<span class="token punctuation">,</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference 返回值既是差集中最后一个元素的位置</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> STL </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统设计与实现</title>
      <link href="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/"/>
      <url>/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="学期实践"><a href="#学期实践" class="headerlink" title="学期实践"></a>学期实践</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://www.cnblogs.com/liqiuhao/p/12128070.html">前言</a><br><a href="https://hoverwinter.gitbooks.io/hit-oslab-manual/content/environment.html">博客教程</a><br><a href="https://blog.csdn.net/longintchar/article/details/78827886">环境搭建</a><br><a href="https://blog.csdn.net/weixin_74195551/article/details/127288338">ubantu64操作系统</a><br><a href="https://blog.csdn.net/weixin_74195551/article/details/127289315">csdn</a><br><a href="https://www.bilibili.com/video/BV19r4y1b7Aw">哈工大李治军老师视频教程</a><br><a href="https://www.lanqiao.cn/courses/115">蓝桥云课</a></p><h2 id="第零章-常用汇编指令"><a href="#第零章-常用汇编指令" class="headerlink" title="第零章 常用汇编指令"></a>第零章 常用汇编指令</h2><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a><code>cmp</code></h3><p><code>cmp</code>是一条汇编指令，用于比较两个操作数的值。它通常与条件跳转指令结合使用，以根据比较结果执行不同的操作。在x86架构中，<code>cmp</code>指令通常用于比较寄存器或内存中存储的值。</p><p>以下是<code>cmp</code>指令的一般语法：</p><pre class="line-numbers language-none"><code class="language-none">cmp operand1, operand2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>operand1</code>和<code>operand2</code>可以是寄存器、内存地址或立即数。指令的作用是将<code>operand1</code>的值减去<code>operand2</code>的值，并根据结果设置标志寄存器的相应位。具体来说，<code>cmp</code>指令会进行减法运算，但不会保存结果，只更新标志寄存器。</p><p>常用的条件跳转指令（如<code>je</code>、<code>jne</code>、<code>jl</code>、<code>jg</code>等）可以根据<code>cmp</code>指令设置的标志位来执行相应的条件跳转操作。</p><p>例如，以下示例：</p><pre class="line-numbers language-none"><code class="language-none">mov ax, 10cmp ax, 5je equal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>cmp ax, 5</code>将比较<code>ax</code>寄存器中的值和立即数5。如果它们相等，那么<code>je equal</code>将执行跳转到<code>equal</code>标签处的代码。</p><h3 id="jz"><a href="#jz" class="headerlink" title="jz"></a><code>jz</code></h3><p><code>jz</code>是汇编语言中的一种条件转移指令，它的作用是在”零标志”（ZF）被设置为1时执行跳转。在x86汇编语言中，”零标志”表示最近的运算结果为零。因此，<code>jz</code>指令通常用于检查上一次操作是否导致结果为零，以决定是否执行跳转。</p><p><code>jz</code>指令的全称是”jump if zero”，其语法格式为：</p><pre class="line-numbers language-none"><code class="language-none">jz target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>target</code>是跳转的目标地址。</p><p>当执行<code>jz</code>指令时，处理器会检查标志寄存器中的”零标志”是否为1（也就是ZF位）。如果ZF位为1，则跳转到指定的<code>target</code>地址；如果ZF位为0，则继续执行下一条指令。</p><p>通常，<code>jz</code>指令与<code>cmp</code>指令一起使用，以根据比较结果决定是否执行跳转操作，例如：</p><pre class="line-numbers language-none"><code class="language-none">cmp ax, bxjz equal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个示例中，如果<code>ax</code>和<code>bx</code>的值相等（导致ZF被设置为1），则程序将跳转到<code>equal</code>标签处执行相应的代码。</p><p>总之，<code>jz</code>指令是根据”零标志”的状态来进行条件跳转的一种汇编指令。</p><h3 id="基本汇编指令"><a href="#基本汇编指令" class="headerlink" title="基本汇编指令"></a>基本汇编指令</h3><ol><li><p><strong>MOV</strong> - 数据传送指令</p><ul><li><strong>语法</strong>: <code>MOV destination, source</code></li><li><strong>功能</strong>: 将源操作数的数据传送到目的操作数。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX, BX  ; 将BX寄存器的值传送到AX寄存器MOV AL, 34h ; 将立即数34h传送到AL寄存器MOV [1234h], AX ; 将AX寄存器的值传送到内存地址1234h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>ADD</strong> - 加法指令</p><ul><li><strong>语法</strong>: <code>ADD destination, source</code></li><li><strong>功能</strong>: 将源操作数的数据加到目的操作数上，结果存储在目的操作数中。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">ADD AX, BX  ; 将BX寄存器的值加到AX寄存器上ADD AL, 1   ; 将立即数1加到AL寄存器上ADD [1234h], AX ; 将AX寄存器的值加到内存地址1234h的值上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>SUB</strong> - 减法指令</p><ul><li><strong>语法</strong>: <code>SUB destination, source</code></li><li><strong>功能</strong>: 将源操作数的数据从目的操作数中减去，结果存储在目的操作数中。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">SUB AX, BX  ; 将BX寄存器的值从AX寄存器中减去SUB AL, 1   ; 将立即数1从AL寄存器中减去SUB [1234h], AX ; 将AX寄存器的值从内存地址1234h的值中减去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>INC</strong> - 自增指令</p><ul><li><strong>语法</strong>: <code>INC destination</code></li><li><strong>功能</strong>: 将目的操作数的值加1。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">INC AX  ; 将AX寄存器的值加1INC [1234h] ; 将内存地址1234h的值加1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>DEC</strong> - 自减指令</p><ul><li><strong>语法</strong>: <code>DEC destination</code></li><li><strong>功能</strong>: 将目的操作数的值减1。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">DEC AX  ; 将AX寄存器的值减1DEC [1234h] ; 将内存地址1234h的值减1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>JMP</strong> - 无条件跳转指令</p><ul><li><strong>语法</strong>: <code>JMP label</code></li><li><strong>功能</strong>: 无条件地跳转到指定的标签位置。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">JMP START ; 跳转到标签START<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>CMP</strong> - 比较指令</p><ul><li><strong>语法</strong>: <code>CMP destination, source</code></li><li><strong>功能</strong>: 比较目的操作数和源操作数，结果影响标志寄存器。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">CMP AX, BX  ; 比较AX和BX寄存器的值CMP AL, 1   ; 比较AL寄存器的值和立即数1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>JE&#x2F;JZ</strong> - 条件跳转指令（等于&#x2F;零）</p><ul><li><strong>语法</strong>: <code>JE label</code> 或 <code>JZ label</code></li><li><strong>功能</strong>: 如果比较结果为等于（零标志位被设置），则跳转到指定的标签位置。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">CMP AX, BXJE EQUAL_LABEL ; 如果AX等于BX，则跳转到EQUAL_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>JNE&#x2F;JNZ</strong> - 条件跳转指令（不等于&#x2F;非零）</p><ul><li><strong>语法</strong>: <code>JNE label</code> 或 <code>JNZ label</code></li><li><strong>功能</strong>: 如果比较结果为不等于（零标志位未被设置），则跳转到指定的标签位置。</li><li><strong>示例</strong>:<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">CMP AX, BXJNE NOT_EQUAL_LABEL ; 如果AX不等于BX，则跳转到NOT_EQUAL_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p>以下是一个简单的汇编程序示例，演示了上述指令的使用：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">section .data    num1 dw 10    num2 dw 20    result dw 0section .text    global _start_start:    ; 将num1的值加载到AX寄存器    MOV AX, [num1]        ; 将num2的值加载到BX寄存器    MOV BX, [num2]        ; 比较AX和BX    CMP AX, BX        ; 如果AX等于BX，跳转到EQUAL_LABEL    JE EQUAL_LABEL        ; 如果AX不等于BX，跳转到NOT_EQUAL_LABEL    JNE NOT_EQUAL_LABELEQUAL_LABEL:    ; 如果相等，将AX的值加1    INC AX    JMP ENDNOT_EQUAL_LABEL:    ; 如果不相等，将AX的值减1    DEC AXEND:    ; 将AX的值存储到result    MOV [result], AX        ; 退出程序    MOV AX, 1    INT 0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第一章-打开电源以后发生的事"><a href="#第一章-打开电源以后发生的事" class="headerlink" title="第一章 打开电源以后发生的事"></a>第一章 打开电源以后发生的事</h2><h3 id="计算机历史"><a href="#计算机历史" class="headerlink" title="计算机历史"></a>计算机历史</h3><ul><li>从白纸到图灵机<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E4%BB%8E%E7%99%BD%E7%BA%B8%E5%88%B0%E5%9B%BE%E7%81%B5%E6%9C%BA.png" alt="png"></li><li>从图灵机到通用图灵机<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E4%BB%8E%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%88%B0%E9%80%9A%E7%94%A8%E5%9B%BE%E7%81%B5%E6%9C%BA.png" alt="png"></li><li>从通用图灵机到计算机<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E4%BB%8E%E9%80%9A%E7%94%A8%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%88%B0%E8%AE%A1%E7%AE%97%E6%9C%BA.png" alt="png"></li></ul><h3 id="打开电源"><a href="#打开电源" class="headerlink" title="打开电源"></a>打开电源</h3><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E6%89%93%E5%BC%80%E7%94%B5%E6%BA%90.png" alt="png"></p><ul><li>引导程序(扇区): 存储在0磁道0扇区(一个扇区一般是512字节)，操作系统读入的第一段代码，操作系统的故事由此开始。。。<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt="png"></li></ul><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/bootsect%E4%BB%A3%E7%A0%81.png" alt="png"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E8%AF%BB%E5%85%A5setup.png" alt="png"></p><h3 id="引导扇区代码bootset-s，读入系统"><a href="#引导扇区代码bootset-s，读入系统" class="headerlink" title="引导扇区代码bootset.s，读入系统"></a>引导扇区代码<code>bootset.s</code>，读入系统</h3><ul><li><code>.s</code>表示汇编代码</li><li>汇编代码 和 高级语言代码的区别<br>汇编代码每一条都变成了机器指令，你能对其进行完整的控制，不想c语言中，<code>int i;</code> 你无法控制i到底最后会出现在内存的哪一个地址&#96;</li></ul><pre class="line-numbers language-x86" data-language="x86"><code class="language-x86">! Linux0.11的bootsect.s源代码.globl begtext, begdata, begbss, endtext, enddata, endbss.text   &#x2F;&#x2F;文本段begtext:.data   &#x2F;&#x2F;数据段begdata:.bss    &#x2F;&#x2F;未初始化数据段begbss:.textSETUPLEN &#x3D; 4                ! nr of setup-sectorsBOOTSEG  &#x3D; 0x07c0           ! original address of boot-sectorINITSEG  &#x3D; 0x9000           ! we move boot here - out of the waySETUPSEG &#x3D; 0x9020           ! setup starts hereSYSSEG   &#x3D; 0x1000           ! system loaded at 0x10000 (65536).ENDSEG   &#x3D; SYSSEG + SYSSIZE     ! where to stop loading! ROOT_DEV: 0x000 - same type of floppy as boot.!       0x301 - first partition on first drive etcROOT_DEV &#x3D; 0x306entry _start    &#x2F;&#x2F;entry关键字,告诉链接器程序入口_start:    mov ax,#BOOTSEG    mov ds,ax       ! 把0x07c0赋给ax,然后把ax付给ds(段寄存器)    mov ax,#INITSEG    mov es,ax       ! es &#x3D; ax &#x3D; 0x9000    mov cx,#256         sub si,si       ! si - si自己的值肯定等于0    sub di,di       ! sub两行代码给出了两个地址值 分别是 ds:si &#x3D; 0x7c00 和 es:di &#x3D; 0x90000, 0x7c00就是一开始计算机启动时读入那个bootsect.s程序的起始地址,大小位512Byte!!!    rep movw        ! 重复移动(w)字(cx的值256个字,512字节)    jmpi    go,INITSEG  ! jmpi是间接跳转; go(标号,将来编译完后,go的值就是从start开始的地方到go定义的偏移值)赋给ip寄存器,INITSEG(0x9000)赋给CS寄存器,其实相当于移完之后在跳转到改变后的go位置继续顺序执行代码go: mov ax,cs    mov ds,ax    mov es,ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>DS（数据段寄存器）</strong>：</p><ul><li>作用：用来保存内存中存放数据的<strong>数据段地址</strong>。</li><li>默认偏移寄存器：在使用BX, SI和DI而省略段寄存器时，默认段寄存器是DS。但具体哪个偏移寄存器与DS结合使用，取决于具体的指令和上下文。不过，通常BX、SI和DI都可以与DS结合使用来寻址。</li></ul></li><li><p><strong>ES（附加段寄存器）</strong>：</p><ul><li>作用：存放当前执行程序中一个<strong>辅助数据段的段地址</strong>。这通常用于处理与DS不同的另一个数据段。</li><li>默认偏移寄存器：ES通常与DI（数据索引寄存器）结合使用，尤其是在涉及串操作的指令中。如参考文章2所述，默认的与段地址寄存器ES相结合的偏移地址寄存器是DI。</li></ul></li></ol><p>总结起来：</p><ul><li><p>DS段寄存器的默认偏移寄存器可以是BX、SI或DI，具体取决于指令和上下文。</p></li><li><p>ES段寄存器的默认偏移寄存器是DI，特别是在串操作指令中。</p></li><li><p>int 0x10中断<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/0x10%E4%B8%AD%E6%96%AD.png" alt="png"></p></li></ul><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E8%AF%BB%E5%85%A5setup%E6%A8%A1%E5%9D%97%E5%90%8E.png" alt="png"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E6%8E%A7%E5%88%B6%E6%9D%83%E4%BA%A4%E7%BB%99setup.png" alt="png"></p><pre class="line-numbers language-x86" data-language="x86"><code class="language-x86">！ 打印加载语句的相关代码（同样来自bootsect.s）! Print some inane message    mov ah,#0x03        ! read cursor pos ，BIOS中断功能号，读取光标位置      xor bh,bh           ！BH通常是页面号，设置为0      int 0x10            ！调用BIOS中断          mov cx,#32          ！使用之前计算的字符串长度    mov bx,#0x0007      ! page 0, attribute 7 (normal) 设置显示属性（正常文本）    mov bp,#msg1        ！设置字符串的偏移地址    mov ax,#0x1301      ! write string, move cursor，BIOS中断功能号，写字符串并更新光标位置      int 0x10! ok, we&#39;ve written the message, now...msg1:    .byte 13,10    .ascii &quot;Loading Xubin system ... &quot;    .byte 13,10,13,10   ！回车符ascii码值13，换行符10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E6%89%93%E5%8D%B0%E5%8A%A0%E8%BD%BD%E8%AF%AD%E5%8F%A5.png" alt="png"></p><p>这段汇编代码是一个简单的启动引导扇区实现，通常用于操作系统的引导程序。</p><ol><li><p><code>entry _start</code>: 这行指定程序的入口点为 <code>_start</code> 标签。</p></li><li><p><code>_start:</code>: 定义了一个名为 <code>_start</code> 的标签，标记着程序的起始位置。</p></li><li><p><code>mov ah,#0x03</code>: 将常量 <code>0x03</code> 移动到寄存器 <code>ah</code> 中，通常用于设置视频模式。</p></li><li><p><code>xor bh,bh</code>: 将寄存器 <code>bh</code> 和自身执行异或运算，相当于将 <code>bh</code> 寄存器清零。</p></li><li><p><code>int 0x10</code>: 触发 BIOS 中断 <code>0x10</code>，用于调用视频服务例程。</p></li><li><p><code>mov cx,#36</code>: 将常量 <code>36</code> 移动到寄存器 <code>cx</code> 中，通常用于设置字符串的长度。</p></li><li><p><code>mov bx,#0x0007</code>: 将常量 <code>0x0007</code> 移动到寄存器 <code>bx</code> 中，通常用于设置文本输出的属性。</p></li><li><p><code>mov bp,#msg1</code>: 将 <code>msg1</code> 标签的地址移动到寄存器 <code>bp</code> 中，用于指向消息字符串。</p></li><li><p><code>mov ax,#0x07c0</code>: 将常量 <code>0x07c0</code> 移动到寄存器 <code>ax</code> 中。</p></li><li><p><code>mov es,ax</code>: 将寄存器 <code>ax</code> 中的值移动到段寄存器 <code>es</code> 中，通常用于设置附加段。</p></li><li><p><code>mov ax,#0x1301</code>: 将常量 <code>0x1301</code> 移动到寄存器 <code>ax</code> 中，用于在屏幕上显示字符串。</p></li><li><p><code>int 0x10</code>: 再次触发 BIOS 中断 <code>0x10</code>，用于在屏幕上显示消息。</p></li><li><p><code>inf_loop:</code>: 定义了一个名为 <code>inf_loop</code> 的标签，用于创建一个无限循环。</p></li><li><p><code>jmp inf_loop</code>: 无条件地跳转到 <code>inf_loop</code> 标签处，实现一个无限循环。</p></li><li><p><code>msg1:</code>: 定义了一个名为 <code>msg1</code> 的标签，用于存储消息字符串。</p></li><li><p><code>.byte 13,10</code>: 表示换行符。</p></li><li><p><code>.ascii &quot;Hello OS world, my name is LZJ&quot;</code>: 存储要显示的消息字符串。</p></li><li><p><code>.byte 13,10,13,10</code>: 包含连续的两个换行符，用于在屏幕上创建空行。</p></li><li><p><code>.org 510</code>: 将当前汇编位置设置为内存地址 <code>510</code>，用于设置引导标志。</p></li><li><p><code>boot_flag:</code>: 定义了一个名为 <code>boot_flag</code> 的标签，用于存储引导标志。</p></li><li><p><code>.word 0xAA55</code>: 将常量 <code>0xAA55</code> 存储在 <code>boot_flag</code> 标签处，用于指示 BIOS 这是一个引导扇区。</p></li></ol><p>这段代码主要实现了在屏幕上显示消息字符串，并设置了引导标志，以便 BIOS 将其识别为引导扇区。最后，通过一个无限循环保持程序执行。</p><h4 id="编译与运行"><a href="#编译与运行" class="headerlink" title="编译与运行"></a>编译与运行</h4><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E7%BC%96%E8%AF%91.png" alt="alt text"><br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E7%BC%96%E8%AF%9102.png" alt="alt text"><br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E7%BC%96%E8%AF%9103.png" alt="alt text"><br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E8%BF%90%E8%A1%8C.png" alt="alt text"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>实模式 与 保护模式</li><li>逻辑地址 与 物理地址<br><code>bootsect</code>就是开机时最先被读入内存（<code>0x7c00</code>）的代码，（因为<code>ip</code>和<code>cs</code>的值决定取指执行从<code>第0磁道第1个扇区</code>开始，存放的就是<code>bootsect.s</code>，然后bootsect.s内部把自己转移到了<code>0x90000</code>到<code>0x90200</code>，并接着从<code>0x90200</code>开始载入了<code>setup</code>模块，打印开机提示”Loading System …”，最后把控制权交给了setup代码段（通过<code>jmpi 0 0x9020</code>，<code>CS:IP</code> &#x3D; 0x9020:0，逻辑地址转换成物理地址就是0x90200</li></ul><h3 id="setup-s操作系统接管硬件，获取计算机信息"><a href="#setup-s操作系统接管硬件，获取计算机信息" class="headerlink" title="setup.s操作系统接管硬件，获取计算机信息"></a><code>setup.s</code>操作系统接管硬件，获取计算机信息</h3><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/setup%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81.png" alt="png"></p><ul><li><p>初始化gdt（全局描述符表）<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%A8%E5%B1%80%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt="png"></p></li><li><p>启动保护模式<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8.png" alt="png"></p></li></ul><h4 id="保护模式下的地址翻译"><a href="#保护模式下的地址翻译" class="headerlink" title="保护模式下的地址翻译"></a>保护模式下的地址翻译</h4><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%9C%B0%E5%9D%80%E7%BF%BB%E8%AF%91.png" alt="png"></p><ul><li><code>jmp 0 8</code>指令的作用<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/jmp08.png" alt="alt text"></li></ul><h3 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h3><p>操作系统最后编译出来叫做<code>Image</code>镜像，</p><p>makefile是一种树状结构</p><h3 id="system模块"><a href="#system模块" class="headerlink" title="system模块"></a><code>system</code>模块</h3><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/heads.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/heads%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E4%B8%8D%E5%90%8C.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E8%B0%83%E7%94%A8main.c.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E8%BF%9B%E5%85%A5main%E5%87%BD%E6%95%B0.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/mem_init.png" alt="alt text"></p><h3 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h3><ol><li>修改bootsect.s的代码，输出”Hello XubinOS, loading”<br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E5%AE%9E%E9%AA%8C1.1.png" alt="alt text"></li><li>bootsect.s 能完成 setup.s 的载入，并跳转到 setup.s 开始地址执行，在<br>setup.s 开始执行时需要向屏幕输出一行”Now we are in SETUP” 信息，表示我们进入了 setup 部分。<pre class="line-numbers language-mov" data-language="mov"><div class="caption"><span>ah,#0x03</span></div><code class="language-mov">    mov ah,#0x03    xor bh,bh       int 0x10    mov cx,#25              mov bx,#0x0007    mov bp,#msg2    mov     ax,cs    mov     es,ax    mov ax,#0x1301     int 0x10！死循环代码inf_loop:    jmp inf_loopmsg2:    .byte   13,10    .ascii  &quot;Now we are in SETUP!&quot;    .byte   13,10,13,10.org 510boot_flag:    .word   0xAA55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E5%AE%9E%E9%AA%8C1.2.png" alt="alt text"><br><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E5%AE%9E%E9%AA%8C1.2%E7%BB%93%E6%9E%9C.png" alt="alt text"></li></ol><h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2><h3 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是接口？</h3><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E4%BB%80%E4%B9%88%E6%98%AF%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/POSIX.png" alt="alt text"></p><h3 id="系统调用是怎么实现的"><a href="#系统调用是怎么实现的" class="headerlink" title="系统调用是怎么实现的"></a>系统调用是怎么实现的</h3><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E7%9B%B4%E8%A7%82%E4%BD%93%E7%8E%B0.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E5%86%85%E6%A0%B8%E6%80%81%E5%92%8C%E7%94%A8%E6%88%B7%E6%80%81.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E7%A1%AC%E4%BB%B6%E6%8F%90%E4%BE%9B%E4%B8%BB%E5%8A%A8%E8%BF%9B%E5%85%A5%E5%86%85%E6%A0%B8.png" alt="alt text"></p><h4 id="应用程序如何系统调用"><a href="#应用程序如何系统调用" class="headerlink" title="应用程序如何系统调用?"></a>应用程序如何系统调用?</h4><p>在通常情况下，调用系统调用和调用一个普通的自定义函数在代码上并没有什么区别，但调用后发生的事情有很大不同。</p><p>调用自定义函数是通过 call 指令直接跳转到该函数的地址，继续运行。</p><p>而调用系统调用，是调用系统库中为该系统调用编写的一个接口函数，叫 API（Application Programming Interface）。API 并不能完成系统调用的真正功能，它要做的是去调用真正的系统调用，过程是：</p><p>把系统调用的编号存入 EAX；<br>把函数参数存入其它通用寄存器；<br>触发 0x80 号中断（int 0x80）。</p><p>我们不妨看看 lib&#x2F;close.c，研究一下 close() 的 API：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> close<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>_syscall1</code> 是一个宏，在 include&#x2F;unistd.h 中定义。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_syscall1</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>name<span class="token punctuation">,</span>atype<span class="token punctuation">,</span>a<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression">type <span class="token function">name</span><span class="token punctuation">(</span>atype a<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">long</span> __res<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression">__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span></span><span class="token string">"int $0x80"</span> <span class="token punctuation">\</span>    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">"=a"</span> <span class="token expression"><span class="token punctuation">(</span>__res<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">"0"</span> <span class="token expression"><span class="token punctuation">(</span>__NR_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">"b"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>__res <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">return</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> __res<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression">errno <span class="token operator">=</span> <span class="token operator">-</span>__res<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 _syscall1(int,close,int,fd) 进行宏展开，可以得到：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> __res<span class="token punctuation">;</span>    __asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">"int $0x80"</span>        <span class="token operator">:</span> <span class="token string">"=a"</span> <span class="token punctuation">(</span>__res<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token string">"0"</span> <span class="token punctuation">(</span>__NR_close<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"b"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__res <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> __res<span class="token punctuation">;</span>    errno <span class="token operator">=</span> <span class="token operator">-</span>__res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是 API 的定义。它先将宏 <code>__NR_close</code> 存入 EAX，将参数 fd 存入 EBX，然后进行 0x80 中断调用。调用返回后，从 EAX 取出返回值，存入 <code>__res</code>，再通过对 <code>__res</code> 的判断决定传给 API 的调用者什么样的返回值。</p><p>其中 __NR_close 就是系统调用的编号，在 include&#x2F;unistd.h 中定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_close</span>    <span class="token expression"><span class="token number">6</span></span></span><span class="token comment">/*所以添加系统调用时需要修改include/unistd.h文件，使其包含__NR_whoami和__NR_iam。*/</span><span class="token comment">/*而在应用程序中，要有：*/</span><span class="token comment">/* 有它，_syscall1 等才有效。详见unistd.h */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token comment">/* 有它，编译器才能获知自定义的系统调用的编号 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"unistd.h"</span></span><span class="token comment">/* iam()在用户空间的接口函数 */</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> iam<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* whoami()在用户空间的接口函数 */</span><span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> whoami<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 0.11 环境下编译 C 程序，包含的头文件都在 &#x2F;usr&#x2F;include 目录下。</p><p>该目录下的 unistd.h 是标准头文件（它和 0.11 源码树中的 unistd.h 并不是同一个文件，虽然内容可能相同），没有 <code>__NR_whoami</code> 和 <code>__NR_iam</code> 两个宏，需要手工加上它们，也可以直接从修改过的 0.11 源码树中拷贝新的 unistd.h 过来。</p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/c%E4%BB%A3%E7%A0%81%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/write%E5%86%85%E5%B5%8C%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.png" alt="alt text"></p><h4 id="从“int-0x80”进入内核函数"><a href="#从“int-0x80”进入内核函数" class="headerlink" title="从“int 0x80”进入内核函数"></a>从“int 0x80”进入内核函数</h4><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/int0x80%E7%9A%84%E5%A4%84%E7%90%86.png" alt="alt text"></p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/systemcall.png" alt="alt text"></p><p><code>int 0x80</code> 触发后，接下来就是内核的中断处理了。先了解一下 Linux0.11 处理 <code>0x80</code> 号中断的过程。</p><p>在内核初始化时，主函数（在 init&#x2F;main.c 中，Linux 实验环境下是 main()，Windows 下因编译器兼容性问题被换名为 start()）调用了 sched_init() 初始化函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//    ……</span>    <span class="token function">time_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buffer_init</span><span class="token punctuation">(</span>buffer_memory_end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    ……</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sched_init()</code> 在 <code>kernel/sched.c</code> 中定义为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//    ……</span>    <span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>system_call<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>set_system_gate</code> 是个宏，在 <code>include/asm/system.h</code> 中定义为：</p><pre class="line-numbers language-none"><code class="language-none">#define set_system_gate(n,addr) \    _set_gate(&amp;idt[n],15,3,addr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>_set_gate 的定义是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_set_gate</span><span class="token expression"><span class="token punctuation">(</span>gate_addr<span class="token punctuation">,</span>type<span class="token punctuation">,</span>dpl<span class="token punctuation">,</span>addr<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__asm__</span> <span class="token punctuation">(</span></span><span class="token string">"movw %%dx,%%ax\n\t"</span> <span class="token punctuation">\</span>    <span class="token string">"movw %0,%%dx\n\t"</span> <span class="token punctuation">\</span>    <span class="token string">"movl %%eax,%1\n\t"</span> <span class="token punctuation">\</span>    <span class="token string">"movl %%edx,%2"</span> <span class="token punctuation">\</span>    <span class="token expression"><span class="token operator">:</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">"i"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0x8000</span><span class="token operator">+</span><span class="token punctuation">(</span>dpl<span class="token operator">&lt;&lt;</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>type<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>    <span class="token string">"o"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>gate_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>    <span class="token string">"o"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>gate_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>    <span class="token string">"d"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">"a"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00080000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然看起来挺麻烦，但实际上很简单，就是填写 IDT（中断描述符表），将 <code>system_call</code> 函数地址写到 0x80 对应的中断描述符中，也就是在中断 0x80 发生后，自动调用函数 <code>system_call</code>。具体细节请参考《注释》的第 4 章。</p><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/sys_call_table.png" alt="alt text"></p><p>接下来看 system_call。该函数纯汇编打造，定义在 kernel&#x2F;system_call.s 中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">!</span>……<span class="token operator">!</span> # 这是系统调用总数。如果增删了系统调用，必须做相应修改nr_system_calls <span class="token operator">=</span> <span class="token number">72</span><span class="token operator">!</span>……<span class="token punctuation">.</span>globl system_call<span class="token punctuation">.</span>align <span class="token number">2</span>system_call<span class="token operator">:</span><span class="token operator">!</span> # 检查系统调用编号是否在合法范围内    cmpl \$nr_system_calls<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">%</span>eax    ja bad_sys_call    push <span class="token operator">%</span>ds    push <span class="token operator">%</span>es    push <span class="token operator">%</span>fs    pushl <span class="token operator">%</span>edx    pushl <span class="token operator">%</span>ecx<span class="token operator">!</span> # push <span class="token operator">%</span>ebx<span class="token punctuation">,</span><span class="token operator">%</span>ecx<span class="token punctuation">,</span><span class="token operator">%</span>edx，是传递给系统调用的参数    pushl <span class="token operator">%</span>ebx<span class="token operator">!</span> # 让ds<span class="token punctuation">,</span> es指向GDT，内核地址空间    movl $<span class="token number">0x10</span><span class="token punctuation">,</span><span class="token operator">%</span>edx    mov <span class="token operator">%</span>dx<span class="token punctuation">,</span><span class="token operator">%</span>ds    mov <span class="token operator">%</span>dx<span class="token punctuation">,</span><span class="token operator">%</span>es    movl $<span class="token number">0x17</span><span class="token punctuation">,</span><span class="token operator">%</span>edx<span class="token operator">!</span> # 让fs指向LDT，用户地址空间    mov <span class="token operator">%</span>dx<span class="token punctuation">,</span><span class="token operator">%</span>fs    call <span class="token function">sys_call_table</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    pushl <span class="token operator">%</span>eax    movl current<span class="token punctuation">,</span><span class="token operator">%</span>eax    cmpl $<span class="token number">0</span><span class="token punctuation">,</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">%</span>eax<span class="token punctuation">)</span>    jne reschedule    cmpl $<span class="token number">0</span><span class="token punctuation">,</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token operator">%</span>eax<span class="token punctuation">)</span>    je reschedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>system_call 用 .globl 修饰为其他函数可见。</p><p>Windows 实验环境下会看到它有一个下划线前缀，这是不同版本编译器的特质决定的，没有实质区别。</p><p><code>call sys_call_table(,%eax,4)</code> 之前是一些压栈保护，修改段选择子为内核段，<code>call sys_call_table(,%eax,4)</code> 之后是看看是否需要重新调度，这些都与本实验没有直接关系，此处只关心 <code>call sys_call_table(,%eax,4)</code> 这一句。</p><p>根据汇编寻址方法它实际上是：call sys_call_table + 4 * %eax，其中 eax 中放的是系统调用号，即 <code>__NR_xxxxxx</code>。</p><p>显然，sys_call_table 一定是一个函数指针数组的起始地址，它定义在 include&#x2F;linux&#x2F;sys.h 中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">fn_ptr sys_call_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> sys_setup<span class="token punctuation">,</span> sys_exit<span class="token punctuation">,</span> sys_fork<span class="token punctuation">,</span> sys_read<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加实验要求的系统调用，需要在这个函数表中增加两个函数引用 ——<code>sys_iam</code> 和 <code>sys_whoami</code>。当然该函数在 sys_call_table 数组中的位置必须和 __NR_xxxxxx 的值对应上。</p><p>同时还要仿照此文件中前面各个系统调用的写法，加上：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_whoami</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_iam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不然，编译会出错的。</p><h3 id="实现-sys-iam-和-sys-whoami"><a href="#实现-sys-iam-和-sys-whoami" class="headerlink" title="实现 sys_iam() 和 sys_whoami()"></a>实现 sys_iam() 和 sys_whoami()</h3><p>添加系统调用的最后一步，是在内核中实现函数 <code>sys_iam()</code> 和 <code>sys_whoami()</code>。</p><p>每个系统调用都有一个 sys_xxxxxx() 与之对应，它们都是我们学习和模仿的好对象。</p><p>比如在 fs&#x2F;open.c 中的 sys_close(int fd)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//    ……</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它没有什么特别的，都是实实在在地做 close() 该做的事情。</p><p>所以只要自己创建一个文件：<code>kernel/who.c</code>，然后实现两个函数就万事大吉了。</p><h3 id="修改makefile文件"><a href="#修改makefile文件" class="headerlink" title="修改makefile文件"></a>修改makefile文件</h3><p>要想让我们添加的<code>kernel/who.c</code>可以和其它 Linux 代码编译链接到一起，必须要修改 Makefile 文件。</p><p>Makefile 里记录的是所有源程序文件的编译、链接规则，《注释》3.6 节有简略介绍。我们之所以简单地运行 make 就可以编译整个代码树，是因为 make 完全按照 Makefile 里的指示工作。</p><p>如果想要深入学习 Makefile，可以选择实验楼的课程： 《Makefile 基础教程》、《跟我一起来玩转 Makefile》。</p><p>Makefile 在代码树中有很多，分别负责不同模块的编译工作。我们要修改的是 kernel&#x2F;Makefile。需要修改两处。</p><p>（1）第一处</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">OBJS  <span class="token operator">=</span> sched.o system_call.o traps.o asm.o fork.o \        panic.o printk.o vsprintf.o sys.o exit.o \        signal.o mktime.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改为：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">OBJS  <span class="token operator">=</span> sched.o system_call.o traps.o asm.o fork.o \        panic.o printk.o vsprintf.o sys.o exit.o \        signal.o mktime.o who.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加了 who.o。</p><p>（2）第二处</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment">### Dependencies:</span><span class="token target symbol">exit.s exit.o</span><span class="token punctuation">:</span> exit.c ../<span class="token keyword">include</span>/errno.h ../<span class="token keyword">include</span>/signal.h \  ../<span class="token keyword">include</span>/sys/types.h ../<span class="token keyword">include</span>/sys/wait.h ../<span class="token keyword">include</span>/linux/sched.h \  ../<span class="token keyword">include</span>/linux/head.h ../<span class="token keyword">include</span>/linux/fs.h ../<span class="token keyword">include</span>/linux/mm.h \  ../<span class="token keyword">include</span>/linux/kernel.h ../<span class="token keyword">include</span>/linux/tty.h ../<span class="token keyword">include</span>/termios.h \  ../<span class="token keyword">include</span>/asm/segment.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment">### Dependencies:</span><span class="token target symbol">who.s who.o</span><span class="token punctuation">:</span> who.c ../<span class="token keyword">include</span>/linux/kernel.h ../<span class="token keyword">include</span>/unistd.h<span class="token target symbol">exit.s exit.o</span><span class="token punctuation">:</span> exit.c ../<span class="token keyword">include</span>/errno.h ../<span class="token keyword">include</span>/signal.h \  ../<span class="token keyword">include</span>/sys/types.h ../<span class="token keyword">include</span>/sys/wait.h ../<span class="token keyword">include</span>/linux/sched.h \  ../<span class="token keyword">include</span>/linux/head.h ../<span class="token keyword">include</span>/linux/fs.h ../<span class="token keyword">include</span>/linux/mm.h \  ../<span class="token keyword">include</span>/linux/kernel.h ../<span class="token keyword">include</span>/linux/tty.h ../<span class="token keyword">include</span>/termios.h \  ../<span class="token keyword">include</span>/asm/segment.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加了 <code>who.s</code>printf()<code> who.o: who.c ../include/linux/kernel.h ../include/unistd.h</code>。</p><p>Makefile 修改后，和往常一样 <code>make all</code> 就能自动把 who.c 加入到内核中了。</p><p>如果编译时提示 <code>who.c</code> 有错误，就说明修改生效了。所以，有意或无意地制造一两个错误也不完全是坏事，至少能证明 Makefile 是对的。</p><h3 id="用printk-调试内核"><a href="#用printk-调试内核" class="headerlink" title="用printk()调试内核"></a>用<code>printk()</code>调试内核</h3><p>oslab 实验环境提供了基于 C 语言和汇编语言的两种调试手段。除此之外，适当地向屏幕输出一些程序运行状态的信息，也是一种很高效、便捷的调试方法，有时甚至是唯一的方法，被称为“printf 法”。</p><p>要知道到，<code>printf()</code> 是一个只能在用户模式下执行的函数，而系统调用是在内核模式中运行，所以 <code>printf()</code> 不可用，要用 <code>printk()</code>。</p><p><code>printk()</code> 和 <code>printf()</code> 的接口和功能基本相同，只是代码上有一点点不同。<code>printk()</code> 需要特别处理一下 <code>fs</code> 寄存器，它是专用于用户模式的段寄存器。</p><p>看一看 printk 的代码（在 kernel&#x2F;printk.c 中）就知道了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">printk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//    ……</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"push %%fs\n\t"</span>            <span class="token string">"push %%ds\n\t"</span>            <span class="token string">"pop %%fs\n\t"</span>            <span class="token string">"pushl %0\n\t"</span>            <span class="token string">"pushl $buf\n\t"</span>            <span class="token string">"pushl $0\n\t"</span>            <span class="token string">"call tty_write\n\t"</span>            <span class="token string">"addl $8,%%esp\n\t"</span>            <span class="token string">"popl %0\n\t"</span>            <span class="token string">"pop %%fs"</span>            <span class="token operator">::</span><span class="token string">"r"</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"ax"</span><span class="token punctuation">,</span><span class="token string">"cx"</span><span class="token punctuation">,</span><span class="token string">"dx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    ……</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，<code>printk()</code> 首先 <code>push %fs</code> 保存这个指向用户段的寄存器，在最后 <code>pop %fs</code> 将其恢复，<code>printk()</code> 的核心仍然是调用 <code>tty_write()</code>。查看 <code>printf()</code> 可以看到，它最终也要落实到这个函数上。</p><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><p>激动地运行一下由你亲手修改过的 “Linux 0.11 pro++”！然后编写一个简单的应用程序进行测试。</p><p>比如在 sys_iam() 中向终端 printk() 一些信息，让应用程序调用 iam()，从结果可以看出系统调用是否被真的调用到了。</p><p>可以直接在 Linux 0.11 环境下用 vi 编写（别忘了经常执行“sync”以确保内存缓冲区的数据写入磁盘），也可以在 Ubuntu 或 Windows 下编完后再传到 Linux 0.11 下。无论如何，最终都必须在 Linux 0.11 下编译。编译命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc <span class="token parameter variable">-o</span> iam iam.c <span class="token parameter variable">-Wall</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>gcc 的 “-Wall” 参数是给出所有的编译警告信息，“-o” 参数指定生成的执行文件名是 iam，用下面命令运行它：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./iam<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果如愿输出了你的信息，就说明你添加的系统调用生效了。否则，就还要继续调试，祝你好运！</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>题目:<br>此次实践项目的基本内容是添加两个系统调用，并编写简单的应用程序进<br>行测试。<br>第一个系统调用是<code>iam</code>，其函数原型为：<code>int iam(const char* name);</code>完成的功能是将字符串参数name的内容拷贝到内核中并保存下来。要求name的长度不能超过23个字符，返回值是拷贝的字符数。<br>如果name的字符个数超过了23，则返回“-1”，并置errno为EINVAL。</p><p>第二个系统调用是<code>whoami</code>，其函数原型为：<code>int whoami(char*name,unsigned int size);</code> 该系统调用将内核中由<code>iam()</code>保存的名字拷贝到name指向的用户地址<br>空间中，同时确保不会对name越界访存（name的大小由size说明）。<br>返回值是拷贝的字符数。如果size小于需要的空间，则返回“-1”，并置errno为<code>EINVAL</code>。</p><p>测试程序是编写两个用户态测试程序iam.c和whoami.c，其中iam.c要通过<br>系统调用iam设置内核中的一个字符串，而whoami.c则通过系统调用是whoami<br>来取出这个内核字符串，并用printf在屏幕上输出。最终的运行结果是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>usr/root<span class="token punctuation">]</span><span class="token comment"># ./iam </span>lizhijun<span class="token punctuation">[</span>usr/root<span class="token punctuation">]</span><span class="token comment"># ./whoami</span>lizhijun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具体步骤</li></ul><ol><li>先在oslab目录下-&gt;sudo .&#x2F;mount-hdc，挂载Bochs虚拟机</li><li>在~&#x2F;oslab&#x2F;hdc&#x2F;usr&#x2F;root下书写 iam.c，whoami.c</li><li>修改<code>linux0.11/kernel/syscall.s</code>中的系统调用总数为74(原本是72)</li><li><code>linux-0.11/include/linux/sys.h</code> 修改调用表,添加上你要增加的系统调用<br>…..<br><a href="https://blog.csdn.net/m0_52440465/article/details/128264432">blog详细教程</a></li></ol><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8.png" alt="alt text"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/07/02/cao-zuo-xi-tong-she-ji-yu-shi-xian/%E6%80%BB%E7%BB%93.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux0.11 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令</title>
      <link href="/2024/06/21/linux-zhi-ling/"/>
      <url>/2024/06/21/linux-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="第一章-Linux的由来"><a href="#第一章-Linux的由来" class="headerlink" title="第一章 Linux的由来"></a>第一章 Linux的由来</h2><ul><li>开源协议<br><img src="/2024/06/21/linux-zhi-ling/GPL%E5%8D%8F%E8%AE%AE.png" alt="alt text"></li><li>POSIX接口规范<br>POSIX接口规范，全称为“可移植操作系统接口”（Portable Operating System Interface），是由IEEE（电气和电子工程师协会）和ISO&#x2F;IEC联合制定的一组操作系统接口规范。其主要目的在于实现不同操作系统之间的兼容性和互操作性，使得开发人员能够跨平台编写和运行应用程序，而无需进行大量的代码修改。</li></ul><h2 id="第二章-linux基本命令"><a href="#第二章-linux基本命令" class="headerlink" title="第二章 linux基本命令"></a>第二章 linux基本命令</h2><h3 id="期末考试方式"><a href="#期末考试方式" class="headerlink" title="期末考试方式"></a>期末考试方式</h3><p>使用<code>exam</code>命令,输入数字选择选项或题目,答案默认保存,若想修改之前的答案,输入对应题号就行</p><h3 id="1-连接到学校主机10-188-2-251的帐号密码"><a href="#1-连接到学校主机10-188-2-251的帐号密码" class="headerlink" title="1.连接到学校主机10.188.2.251的帐号密码"></a>1.连接到学校主机10.188.2.251的帐号密码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">账号:s223174密码:welcome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-nano指令操作文件"><a href="#2-nano指令操作文件" class="headerlink" title="2.nano指令操作文件"></a>2.nano指令操作文件</h3><p>查看和编辑文件</p><h3 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h3><ol><li>PATH环境变量: 当shell执行时去哪找可执行文件,依次查找</li><li>PS1环境变量: shell命令提示符的样式</li><li>LANG环境变量: 与shell交互使用的语言</li><li>HOME环境变量: 当前用户工作目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">locale <span class="token parameter variable">-a</span> 指令列出所有系统安装的语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2024/06/21/linux-zhi-ling/image-20240314232303614.png" alt="image-20240314232303614"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">修改<span class="token environment constant">PS1</span>环境变量---shell提示符样式<span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'HAPPY: \u $ '</span><span class="token punctuation">\</span>u是特殊参数,表示用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​<img src="/2024/06/21/linux-zhi-ling/image-20240314232634341.png" alt="image-20240314232634341"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">添加当前目录<span class="token punctuation">(</span>.<span class="token punctuation">)</span>到<span class="token environment constant">PATH</span>变量注意:<span class="token environment constant">PATH</span>变量以冒号分割<span class="token punctuation">(</span>:<span class="token punctuation">)</span>,修改<span class="token environment constant">PATH</span>环境变量只对本次生效,想要永久生效,可以修改.profile文件<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/06/21/linux-zhi-ling/image-20240314232909211.png" alt="image-20240314232909211"></p><h3 id="4-echo命令"><a href="#4-echo命令" class="headerlink" title="4.echo命令"></a>4.echo命令</h3><p>类似于打印命令</p><p><img src="/2024/06/21/linux-zhi-ling/image-20240314233218047.png" alt="image-20240314233218047"></p><h3 id="5-alias命令"><a href="#5-alias命令" class="headerlink" title="5.alias命令"></a>5.alias命令</h3><p>alias可以起别名或者修改命令默认的执行方式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> 别名<span class="token operator">=</span>源名例子alias <span class="token assign-left variable">list</span><span class="token operator">=</span>lsalias命令展示所有已取<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>别名unalias取消别名<span class="token builtin class-name">unalias</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/06/21/linux-zhi-ling/image-20240314233930938.png" alt="image-20240314233930938"></p><h3 id="6-Linux中的源字符"><a href="#6-Linux中的源字符" class="headerlink" title="6.Linux中的源字符"></a>6.Linux中的源字符</h3><ul><li>$美元符: 表示取值</li><li>双引号: 对引号里面的源字符进行处理</li><li>单引号: 不对引号里面的源字符处理</li><li>\ 反斜杠: 最常见的转义字符,用于转义其他字符</li><li>*字符: 任意字符</li><li>?问号: ? 可以用来匹配任意单个字符…命令 <code>ls a?.txt</code> 会列出所有以 <code>a</code> 开头,后面跟着任意单个字符,并且以 <code>.txt</code> 结尾的文件</li><li><code>[限制条件]</code>: 限制范围,例如 <code>ls /tmp/[123].tmp</code>(区间写法)等价于 <code>ls /tmp/[1-3].tmp</code>(列举写法),表示取出tmp目录下的所有1到3以<code>tmp</code>为后缀的文件,注意变通</li><li>^或者!: 表示否定negative</li><li>~字符: 表示工作目录,等价于<code>echo $HOME</code></li></ul><p><img src="/2024/06/21/linux-zhi-ling/image-20240315000305427.png" alt="image-20240315000305427"></p><h3 id="7-基本命令"><a href="#7-基本命令" class="headerlink" title="7.基本命令"></a>7.基本命令</h3><ul><li><p>clear清屏命令</p></li><li><p>cp 源文件路径 目的路径</p><p>  例: cp hello hi</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240314234136513.png" alt="image-20240314234136513"><br> <img src="/2024/06/21/linux-zhi-ling/cp.jpg" alt="alt text"></p></li><li><p>type xxx命令</p><p>  查看指令类型</p></li></ul><p><img src="/2024/06/21/linux-zhi-ling/image-20240314234306905.png" alt="image-20240314234306905"></p><ul><li><p>rm 文件路径</p><p>  例: rm hi  (hi文件已经存在)</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240314234422632.png" alt="image-20240314234422632"></p></li><li><p>ls指令(参数 -l等)</p><p>  例: ls -l hello</p><ul><li><code>-l</code>参数,显示更详细信息</li></ul><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240314234557355.png" alt="image-20240314234557355"></p></li><li><p>history命令</p><p>  显示shell命令的历史记录</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240315000404594.png" alt="image-20240315000404594"></p></li><li><p>!!直接执行上条命令,!加编号执行history里的第几条记录</p><p>  <img src="/2024/06/21/linux-zhi-ling/image-20240315000542358.png" alt="alt text"></p></li><li><p><code>su</code> 和 <code>sudo</code>超级用户(管理员)<br><code>su</code> : 把身份切换到超级用户(su之后就切换到root用户,要求输入的是root用户口令)<br><code>su 用户名</code> : 切换到其他用户<br><code>sudo</code> : 以超级用户的身份执行某条命令(sudo要求输入口令时,输入的是当前用户的口令)<br>值得注意的是,只有被指定的用户才能使用sudo命令,在&#x2F;etc&#x2F;sudoers文件里的才被允许<br><img src="/2024/06/21/linux-zhi-ling/sudoers.png" alt="alt text"></p></li><li><p><code>whoami</code>查看当前用户</p></li><li><p><code>id</code>命令或<code>groups</code>显示所属组</p></li><li><p><code>hostname</code>查看主机名</p><ol><li><code>hostname</code></li><li><code>hostname 想要修改的主机名</code></li></ol></li><li><p><code>uname</code>查看操作系统内核<br><img src="/2024/06/21/linux-zhi-ling/uname.png" alt="alt text"></p></li><li><p><code>free</code>查看内存<br><code>free -h</code>参数表示human readable 便于人类阅读的<br><img src="/2024/06/21/linux-zhi-ling/free.png" alt="alt text"></p></li><li><p><code>date</code>显示当前系统时间<br><img src="/2024/06/21/linux-zhi-ling/date.png" alt="alt text"></p></li><li><p><code>vi</code>命令查看<code>/proc</code>系统信息文件夹下文件<br>vi &#x2F;proc&#x2F;cpuinfo<br><img src="/2024/06/21/linux-zhi-ling/proc.png" alt="alt text"></p></li><li><p><code>passwd</code>修改口令命令<br>以前存放在&#x2F;etc&#x2F;passwd下,现在存放在&#x2F;etc&#x2F;shadow文件</p></li><li><p><code>wall</code>广播命令<br>您可以使用<code>wall</code>命令来向所有登录用户发送消息。例如，要发送一句话给所有登录用户，您可以在终端中输入以下命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"这是一条消息"</span> <span class="token operator">|</span> wall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将向所有登录用户显示消息“这是一条消息”。请注意，您需要具有适当的权限才能向所有用户发送消息。</p><ul><li><p><code>w</code>或<code>who</code>查看所有当前登陆用户<br><img src="/2024/06/21/linux-zhi-ling/who.png" alt="alt text"></p></li><li><p><code>seq</code>生成数字序列<br><img src="/2024/06/21/linux-zhi-ling/seq.png" alt="alt text"></p></li></ul><h3 id="8-shell命令执行的优先级"><a href="#8-shell命令执行的优先级" class="headerlink" title="8.shell命令执行的优先级"></a>8.shell命令执行的优先级</h3><ol><li>alias别名</li><li>内置命令</li><li>可执行文件</li></ol><h3 id="9-源字符使用实例-第一次小测"><a href="#9-源字符使用实例-第一次小测" class="headerlink" title="9.源字符使用实例(第一次小测)"></a>9.源字符使用实例(第一次小测)</h3><ol><li>list files whose name start with a,b or c <ul><li>解答 : <code>ls [abc]*</code></li></ul></li><li>list files whose name don’t start with a digit<ul><li>解答 : <code>ls [^0-9]*</code></li></ul></li><li>list all files whose names only contains two characters<ul><li>解答 : <code>ls ??</code></li></ul></li><li>list all the file whose name contain a $<ul><li>解答 : <code>ls *\$*</code></li></ul></li><li>Which file stores the user information?<ul><li>解答 : <code>/etc/passwd</code></li></ul></li><li>Which file will be executed once when user login<ul><li>解答 : <code>.profile</code>或<code>.bash_login</code></li></ul></li><li>Create an alias called “la” for the command “ls -a”<ul><li>解答 : <code>alias la=&#39;ls -a&#39;</code></li></ul></li><li>The names of the directories that a shell searches to find the file corresponding to an external command are stored in the shell variable named<ul><li>解答 : <code>PATH</code></li></ul></li></ol><h3 id="10-链接命令"><a href="#10-链接命令" class="headerlink" title="10.链接命令"></a>10.链接命令</h3><ol><li>软链接<br>类似于Windows下的快捷方式，当一个源文件的目录层级比较深，我们想要方便使用它可以给源文件创建一个软链接,方便文件操作<br><img src="/2024/06/21/linux-zhi-ling/link.png" alt="alt text"></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> 源文件路径 软链接名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ln -s</td><td>创建软链接</td></tr></tbody></table><h3 id="11-解压缩命令"><a href="#11-解压缩命令" class="headerlink" title="11.解压缩命令"></a>11.解压缩命令</h3><ul><li>.gz和.bz2的压缩包需要使用<code>tar</code>命令来压缩和解压缩</li><li>不加z参数，就没有压缩，只是打包成一个文件</li></ul><table><thead><tr><th>压缩格式</th><th>说明</th><th>压缩包后缀</th></tr></thead><tbody><tr><td>bz2</td><td>常见的压缩文件格式，由bzip2生成，具有高压缩率</td><td>.bz2</td></tr><tr><td>gz</td><td>常见的压缩文件格式，由gzip生成，广泛应用于Linux和Unix系统</td><td>.gz</td></tr></tbody></table><table><thead><tr><th>tar命令选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>创建打包文件</td></tr><tr><td>-v</td><td>显示打包或者解包的详细信息</td></tr><tr><td>-f</td><td>指定文件名称, 必须放到所有选项后面</td></tr><tr><td>-z</td><td>压缩(.gz)</td></tr><tr><td>-j</td><td>压缩(.bz2)</td></tr><tr><td>-x</td><td>解压缩</td></tr><tr><td>-C</td><td>解压缩到指定目录</td></tr></tbody></table><h3 id="12-关机和重启命令的使用"><a href="#12-关机和重启命令的使用" class="headerlink" title="12.关机和重启命令的使用"></a>12.关机和重启命令的使用</h3><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>shutdown -h now</code></td><td align="center">立刻关机。这个命令会立即关闭系统，并断开所有用户的连接。</td></tr><tr><td align="center"><code>reboot</code></td><td align="center">重启。这个命令会重新启动系统，相当于按下计算机的重启按钮。</td></tr></tbody></table><h3 id="13-远程登陆，远程拷贝命令"><a href="#13-远程登陆，远程拷贝命令" class="headerlink" title="13.远程登陆，远程拷贝命令"></a>13.远程登陆，远程拷贝命令</h3><h4 id="13-1-ssh命令的使用"><a href="#13-1-ssh命令的使用" class="headerlink" title="13.1 ssh命令的使用"></a>13.1 ssh命令的使用</h4><p>安装步骤:<br>① 假如Ubuntu作为服务端,需要安装ssh服务端软件,执行命令: sudo apt-get install openssh-server<br>② 客户端电脑如果是macOS系统则不需要安装ssh客户端软件，默认已经安装过了，直接可以使用ssh命令<br>③ 客户端电脑如果是Windows系统则需要安装OpenSSH for Windows这个软件</p><h4 id="13-2-scp命令的使用"><a href="#13-2-scp命令的使用" class="headerlink" title="13.2 scp命令的使用"></a>13.2 scp命令的使用</h4><p><code>scp</code> 是基于 SSH 进行安全的远程文件拷贝的命令，也就是说需要保证服务端和客户端电脑安装了相应的 SSH 软件。</p><p><strong>scp命令格式:</strong></p><ol><li><p>远程拷贝文件:</p><ul><li><code>scp 本地文件 远程服务器用户名@远程服务器ip地址:指定拷贝到远程服务器的路径</code></li><li><code>scp 远程服务器用户名@远程服务器ip地址:远程服务器文件 指定拷贝到本地的路径</code></li></ul></li><li><p>远程拷贝目录:</p><ul><li><code>scp -r 本地目录 远程服务器用户名@远程服务器ip地址:指定拷贝到远程服务器的路径</code></li><li><code>scp -r 远程服务器用户名@远程服务器ip地址:远程服务器目录 指定拷贝到本地的路径</code></li><li><code>-r</code> 表示递归拷贝整个目录<br><img src="/2024/06/21/linux-zhi-ling/scp.png" alt="alt text"></li></ul></li><li><p><code>ssh</code>命令是远程登录主机电脑，相当于直接操作的是远程电脑。</p></li><li><p><code>scp</code>命令是可以把本机文件拷贝到远程主机，也可以把远程主机文件远程拷贝的本机，注意:拷贝文件夹需要加<code>-r</code>选项。</p></li><li><p>大量的文件上传和下载可以通过可视化工具<code>FileZilla</code>来完成。</p></li></ol><h5 id="软件安装和卸载"><a href="#软件安装和卸载" class="headerlink" title="软件安装和卸载"></a>软件安装和卸载</h5><table><thead><tr><th>安装方式</th><th>说明</th></tr></thead><tbody><tr><td>离线安装：deb文件格式安装</td><td>从本地存储介质安装软件，使用Debian软件包格式安装软件</td></tr><tr><td>在线安装：apt-get方式安装</td><td>通过网络下载并安装软，使用apt-get命令从仓库安装软件</td></tr></tbody></table><ul><li>更改镜像源<br>因为使用 apt-get 命令默认是从国外的服务器下载安装软件的，会导致下载安装速度很慢，所以需要更改成国内的镜像源服务器</li><li>镜像源就是下载软件来源的服务器。</li><li>apt-get 方式卸载命令: sudo apt-get remove 安装包名</li></ul><h2 id="第四章-文件和文件系统"><a href="#第四章-文件和文件系统" class="headerlink" title="第四章 文件和文件系统"></a>第四章 文件和文件系统</h2><p>使用文件系统的三个步骤：分区、格式化、挂载</p><ul><li>Linux系统中把一切可以用字节流传输的都看作一个文件</li><li>Linux系统里面的文件系统类型ext2 xfs jfs ext3 ext4</li><li>Windows系统里的文件系统类型: ntfs fat32<br><img src="/2024/06/21/linux-zhi-ling/unix_device.png" alt="alt text"><pre class="line-numbers language-text" data-language="text"><code class="language-text">第一块SATA硬盘./dev/sda第二块SATA硬盘 /dev/sdbfdisk /dev/sdb  分区指令mkfs -t  ext4 /dev/sdb  格式化指令,-t参数表示要创建什么样的文件系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Linux系统下的重要文件"><a href="#Linux系统下的重要文件" class="headerlink" title="Linux系统下的重要文件"></a>Linux系统下的重要文件</h3><ul><li><code>/etc/passwd</code>: 每个用户在该文件中都有一行记录，其中包含了用户的登录名、密码（通常是一个指向加密密码的指针）、用户ID、组ID、用户信息、用户主目录和默认shell等信息<ol><li>&#x2F;usr&#x2F;bin&#x2F;chsh可以改变默认用户登陆的shell</li><li>&#x2F;etc&#x2F;passwd和&#x2F;usr&#x2F;bin&#x2F;passwd是两个不同文件,一个是记录用户口令等信息的文本文件,另一个是改变用户口令的可执行文件</li></ol></li><li><code>/dev/null</code>是Unix和类Unix操作系统（包括Linux）中的一个特殊文件，也被称为“空设备”或“空设备文件”。<ol><li>这个文件的主要特点是会丢弃所有写入到它的数据，就好像这些数据进入了一个黑洞一样。同时，当你尝试从&#x2F;dev&#x2F;null读取数据时，它会立即返回一个文件结束（EOF）标记。</li><li>在命令行操作中，&#x2F;dev&#x2F;null常被用作丢弃不需要的输出。例如，当你运行一个命令但并不关心其输出时，你可以将输出重定向到&#x2F;dev&#x2F;null，这样命令的输出就不会显示在终端或写入到其他文件。这对于清理不需要的日志信息或避免在脚本中产生垃圾数据非常有用。</li><li>简单来说，&#x2F;dev&#x2F;null就像一个数据的“黑洞”，任何写入其中的数据都会消失无踪，而读取它则不会得到任何实际内容。</li></ol></li></ul><h3 id="mount挂载命令"><a href="#mount挂载命令" class="headerlink" title="mount挂载命令"></a><code>mount</code>挂载命令</h3><ul><li>mount [-t vfstype][-o options] device dir</li><li>vfstype :vfat(window fat32 format)、ext3、ext4、iso9660(cdrom format)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sdc1 /mnt<span class="token function">umount</span> .mnt<span class="token function">umount</span> /dev/sdc1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/06/21/linux-zhi-ling/mount.png" alt="alt text"></li></ul><h3 id="Types-of-Files文件种类"><a href="#Types-of-Files文件种类" class="headerlink" title="Types of Files文件种类"></a>Types of Files文件种类</h3><ul><li><code>Simple/ordinary Files(普通文件)</code></li><li><code>Directory Files(目录文件)</code><br> 目录文件只包含两个字段:一个包含目录下的所有文件名,另一个是索引节点号<br> <img src="/2024/06/21/linux-zhi-ling/direct.png" alt="alt text"></li><li><code>Link Files(链接文件)</code><br>A Link File is created by the system when a symbolic linkin created to an existing file.</li><li><code>Special(Device) Files(设备文件)</code><br>A special File is a means of accessinghardware devicesincluding the keyboard, hard disk, Cb-ROM drive, tapedrive andprinter.<ol><li>character special files(字符设备)</li><li>block special files(块设备)</li></ol></li><li><code>Named Pipe(FIFO)</code><br>Tools that enable processes to communicate with each other</li><li>Socket(网络插口)</li></ul><h3 id="动态库和静态库文件"><a href="#动态库和静态库文件" class="headerlink" title="动态库和静态库文件"></a>动态库和静态库文件</h3><ul><li>widows下</li></ul><ol><li>动态库.dll,不把代码打包进可执行文件,只是链接</li><li>静态库.o</li></ol><ul><li>linux</li></ul><ol><li>动态.so</li><li>静态.a</li></ol><h3 id="Linux下的目录结构"><a href="#Linux下的目录结构" class="headerlink" title="Linux下的目录结构"></a>Linux下的目录结构</h3><p><img src="/2024/06/21/linux-zhi-ling/directory_struct.jpg" alt="alt text"></p><h3 id="和文件操作相关的命令"><a href="#和文件操作相关的命令" class="headerlink" title="和文件操作相关的命令"></a>和文件操作相关的命令</h3><ul><li><code>df</code>命令  显示分区使用情况(挂载)<br><img src="/2024/06/21/linux-zhi-ling/df.png" alt="alt text"></li><li><code>du</code>命令  查看文件分配的存储空间大小<br><img src="/2024/06/21/linux-zhi-ling/du.png" alt="alt text"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-s</span> /etc<span class="token comment"># 查看目录占用空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><code>mkdir</code>命令  创建目录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> dira/dirb参数p表示创建路径上的所有目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><code>rmdir</code>命令  只能删除空目录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> dira<span class="token function">rmdir</span> dira<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><code>ls</code>命令 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-a</span> 目录或文件名参数a表示显示出所有以.开头的隐藏文件<span class="token function">ls</span> <span class="token parameter variable">-l</span> 目录或文件名参数l表示以列表的形式列出详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/06/21/linux-zhi-ling/ls-l.png" alt="alt text"><br>第一个字段第一个字符表示文件类型,<code>-</code>表示普通文件<br>第二个字段: 链接数,有多少个条目指向了这个文件的索引节点<br>第三个字段:所属用户<br>第四个字段:所属组<br>第五个字段:大小(以字节为单位)<br>第六个字段:文件最后修改时间<br>第七个字段:文件名<br><img src="/2024/06/21/linux-zhi-ling/Determining_File_Attributes.png" alt="alt text"></li><li><code>touch</code>命令  创建文件或修改文件最后修改时间<br>如果文件不存在,则创建文件,否则修改最后修改时间</li><li><code>rm</code>命令  删除文件或目录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-i</span> file1参数i表示交互式的<span class="token function">rm</span> <span class="token parameter variable">-rf</span> dirb参数r表示递归删除子目录在删除所有文件参数f表示强制删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>mv</code>命令  移动文件或者文件重命名</li><li><code>file</code>命令  查看文件详细信息</li></ul><p><img src="/2024/06/21/linux-zhi-ling/file.png" alt="alt text"></p><h3 id="逻辑卷管理-好处-可以动态扩充"><a href="#逻辑卷管理-好处-可以动态扩充" class="headerlink" title="逻辑卷管理(好处:可以动态扩充)"></a>逻辑卷管理(好处:可以动态扩充)</h3><ul><li>挂载: 把一个硬件设备和对应的目录关联起来</li><li>硬盘变成可用存储空间要经过三步<ol><li>分区</li><li>格式化</li><li>挂载</li></ol></li><li>逻辑卷管理软件工具:用多块硬盘上的分区虚拟成一个分区</li></ul><p> 逻辑卷管理软件工具，如逻辑卷管理器（LVM），允许用户将多块硬盘上的分区虚拟成一个分区，从而更有效地管理和使用硬盘资源。以下是使用LVM将多块硬盘上的分区虚拟成一个分区的基本步骤：</p><ol><li><strong>准备磁盘并标记物理卷</strong>：首先，你需要准备要进行逻辑卷管理的硬盘分区，并将这些分区标记为物理卷。物理卷是LVM管理的基本单位，可以是一个硬盘分区或者整个硬盘。</li><li><strong>创建卷组</strong>：接下来，你需要创建一个卷组。卷组是由一个或多个物理卷组成的集合，它提供了逻辑卷管理的框架。</li><li><strong>创建逻辑卷</strong>：在卷组中，你可以创建逻辑卷。逻辑卷是最终提供给操作系统使用的虚拟分区，它们可以跨多个物理卷或卷组。</li><li><strong>格式化逻辑卷</strong>：创建逻辑卷后，你需要对其进行格式化，以便操作系统可以识别和使用。</li><li><strong>挂载逻辑卷</strong>：最后，将逻辑卷挂载到操作系统的文件系统中，这样你就可以像访问其他分区一样访问逻辑卷上的数据。</li></ol><p>此外，LVM还提供了许多其他功能，如逻辑卷的扩容、缩小、迁移和备份等，这些都可以在不中断数据访问的情况下进行。</p><h2 id="第五章-文件安全"><a href="#第五章-文件安全" class="headerlink" title="第五章 文件安全"></a>第五章 文件安全</h2><h3 id="1-Protection-based-on-AccessPermission"><a href="#1-Protection-based-on-AccessPermission" class="headerlink" title="1.Protection based on AccessPermission"></a>1.Protection based on AccessPermission</h3><ul><li>Types of users <ol><li>User&#x2F;owner(文件拥有者)</li><li>groups(同组用户)</li><li>others(其他人)</li></ol></li><li>Types of Access Permissions<ul><li>Read, write, and execute(执行)</li></ul></li><li>Access Permissions for Directories<ul><li>Read: list the files</li><li>Write: create or remove directories and files</li></ul></li></ul><p>所以,对于每个文件,三个身份和三种权限组成九个权限位<br><img src="/2024/06/21/linux-zhi-ling/file_permission.png" alt="alt text"></p><ul><li>目录也有权限<ol><li>目录的x执行权限:所有要进入到目录里的操作,包括(<code>cd</code>命令,<code>touch</code>命令,删除目录里的文件)<br>目录文件只包含两个字段:一个包含目录下的所有文件名,另一个是索引节点号<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 想要查看目录权限要加参数d</span><span class="token function">ls</span> <span class="token parameter variable">-ld</span> dira<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/06/21/linux-zhi-ling/ls_view_dir.png" alt="alt text"></li></ol></li></ul><h3 id="2-改变权限或者所属组的命令"><a href="#2-改变权限或者所属组的命令" class="headerlink" title="2. 改变权限或者所属组的命令"></a>2. 改变权限或者所属组的命令</h3><ul><li><code>chgrp  组1 文件或目录路径</code>: 改变组</li><li><code>chown newowner 文件</code>: 改变所属用户</li><li><code>id user</code>: Find the user id</li><li><code>group user</code>: Find the user group</li></ul><h3 id="3-Changing-File-Access-Privileges"><a href="#3-Changing-File-Access-Privileges" class="headerlink" title="3.Changing File Access Privileges"></a>3.Changing File Access Privileges</h3><p><code>chmod  权限语句 文件或目录对象</code>命令:改变文件权限位<br>权限语句由三部分组成:</p><ul><li>例如 <code>u-x</code><br>第一部分是要修改谁的权限:a表示所有,u表示owner,g表示group,o表示others,ugo也表示所有<br><img src="/2024/06/21/linux-zhi-ling/chmod.png" alt="alt text"></li><li>也可以用八进制数来代替权限语句,能够一次性设定所有文件权限位<br>如要给一个文件设置rwxr-x—权限,每三位(111 101 000)转化成八进制数就是750,所以命令就是<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">750</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/06/21/linux-zhi-ling/rm_file_withoutpermisn.png" alt="alt text"></li></ul><h3 id="Default-file-access-privileges-默认文件权限"><a href="#Default-file-access-privileges-默认文件权限" class="headerlink" title="Default file access privileges 默认文件权限"></a>Default file access privileges 默认文件权限</h3><ul><li>通过掩码值umask来设定默认访问权限</li><li><code>umask</code>命令  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示掩码值</span>input: <span class="token builtin class-name">umask</span>ouput: 0022<span class="token comment"># 设置掩码值</span>input: <span class="token builtin class-name">umask</span> 077<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>umask怎么决定文件访问权限<ol><li>The access permission value onexecutable file or directory iscomputed by(针对目录或者可执行文件): <code>file access permission=777-mask</code></li><li>The access permission value on otherfile is computed by(对于普通文件):<code>file access permission = 666-mask</code><br><img src="/2024/06/21/linux-zhi-ling/umask01.png" alt="alt text"></li></ol></li></ul><p><img src="/2024/06/21/linux-zhi-ling/umask02.png" alt="alt text"></p><h3 id="三个特殊权限位"><a href="#三个特殊权限位" class="headerlink" title="三个特殊权限位"></a>三个特殊权限位</h3><ul><li><p><code>SUID</code>位<br><img src="/2024/06/21/linux-zhi-ling/suid.png" alt="alt text"><br>If this bit is set for a file containing an executable program for a command,the command takes on the privileges of the owner of the file when it executes.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置suid位 --<span class="token operator">></span><span class="token function">sudo</span> <span class="token function">chmod</span> u+s /usr/bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>SGID</code>位<br>执行命令时,会把身份临时切换成同组成员(groups)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置sgid位 --<span class="token operator">></span><span class="token function">sudo</span> <span class="token function">chmod</span> g+s /usr/bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>STICKY</code>黏着位(对于目录)<br> 设置黏着位意味着在对于一些共享目录(所有人都能创建文件)时,不同用户只能删除自己的文件</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置/取消设置黏着位 --<span class="token operator">></span><span class="token function">chmod</span> +t /tmp<span class="token function">chmod</span> <span class="token parameter variable">-t</span> /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="第六章-File-Processing"><a href="#第六章-File-Processing" class="headerlink" title="第六章 File Processing"></a>第六章 File Processing</h2><h3 id="view-complete-file"><a href="#view-complete-file" class="headerlink" title="view complete file"></a>view complete file</h3><h4 id="显示文件全部内容"><a href="#显示文件全部内容" class="headerlink" title="显示文件全部内容"></a>显示文件全部内容</h4><ul><li><code>cat</code>命令 <ol><li>参数<code>n</code>: 显示行号</li><li><code>cat</code>命令不加文件时,默认从标准输入中读取数据(等待键盘输入)</li></ol></li><li><code>nl</code>命令</li></ul><h4 id="分页查看文本文件"><a href="#分页查看文本文件" class="headerlink" title="分页查看文本文件"></a>分页查看文本文件</h4><ul><li><code>more</code>或<code>less</code>命令<ol><li>输入<code>/s22</code>会在文件中查找s22相对应文字</li><li>按Q退出</li></ol></li><li><code>od</code>命令 显示不可见字符<br><img src="/2024/06/21/linux-zhi-ling/od.png" alt="alt text"><ol><li>参数<code>-c</code>表示以字符形式显示,例如空行会变成<code>\n</code></li><li><code>-h</code>以十六进制显示</li></ol></li></ul><h4 id="Viewing-the-head-or-tail-of-a-file"><a href="#Viewing-the-head-or-tail-of-a-file" class="headerlink" title="Viewing the head or tail of a file"></a>Viewing the head or tail of a file</h4><ul><li><code>head</code>默认显示文件前五行<ol><li>参数<code>-n5</code>表示显示文件开头前5行,数字可任意改,<code>n</code>可以不写</li></ol></li><li><code>tail</code>默认显示文件最后五行<ol><li>参数<code>-5</code>表示显示文件开头前5行,数字可任意改</li><li>参数<code>-f</code>实时刷新 ctrl+c退出</li></ol></li><li><code>wc</code> 查看文件大小的命令(Determining file size)<br> <img src="/2024/06/21/linux-zhi-ling/wc.png" alt="alt text"><ol><li>参数<code>-l</code>表示只显示行数</li><li><code>-w</code>只显示单词数</li><li><code>-c</code>表示只显示字符数<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> <span class="token parameter variable">-l</span> /tmp/hello.cpp<span class="token comment"># 查看系统里有多少个用户</span><span class="token function">wc</span> <span class="token parameter variable">-l</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h4 id="比较两个文本文件"><a href="#比较两个文本文件" class="headerlink" title="比较两个文本文件"></a>比较两个文本文件</h4><ul><li><code>diff</code>命令<br>diff [options] [file1] [file2]</li></ul><h3 id="查找文件命令"><a href="#查找文件命令" class="headerlink" title="查找文件命令"></a>查找文件命令</h3><h4 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h4><ul><li><code>find</code>命令</li><li><code>find</code> 后面跟一个目录,表示在此目录中寻找,  </li><li>expression:<ul><li><code>-name</code> pattern</li><li><code>-size</code> +&#x2F;-N  加号&#x2F;减号表示 大小&#x2F;小于 大于N的文件</li><li><code>-exec</code> or <code>-ok</code> CMD 表示对find找到的结果每一个都执行一条命令CMD,exec和ok的区别在于ok每一次都要询问 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /tmp  <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-name</span> <span class="token string">"*.txt"</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-size</span> <span class="token number">0</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token parameter variable">-exec</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="/2024/06/21/linux-zhi-ling/find_exec.png" alt="alt text"></li><li><code>\( 组合 \)</code> 使用括号来把多个条件组合在一起 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /tmp  <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-name</span> <span class="token string">"*.txt"</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-size</span> <span class="token number">0</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><ol><li>通配符的使用,通配符是一种特殊语句，主要有星号(*)和问号(?)，用来模糊搜索文件</li></ol><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>代表0个或多个任意字符</td></tr><tr><td>?</td><td>代表任意一个字符</td></tr></tbody></table><p><img src="/2024/06/21/linux-zhi-ling/find.png" alt="alt text"><br>通配符不仅能结合 find 命令使用，还可以结合其它命令使用,比如: ls、mv、cp 等，这里需要注意只有find命令使用通配符需要加上引号。<br><img src="/2024/06/21/linux-zhi-ling/dev_null.png" alt="alt text"></p><h4 id="命令文件"><a href="#命令文件" class="headerlink" title="命令文件"></a>命令文件</h4><ul><li><code>whereis</code> 查找命令文件，会找出可执行文件的位置和帮助文档的位置</li><li><code>which</code> 查找命令文件</li></ul><h3 id="对文件内容操作"><a href="#对文件内容操作" class="headerlink" title="对文件内容操作"></a>对文件内容操作</h3><h4 id="去掉重复内容"><a href="#去掉重复内容" class="headerlink" title="去掉重复内容"></a>去掉重复内容</h4><ul><li><code>uniq</code>命令<br>uniq命令只能除去中间没有其他行的重复行</li><li>参数<ol><li><code>-c</code> 统计连续重复出现的次数</li><li><code>-d</code> 显示重复的行</li><li><code>uniq 源文件名a 文件名b</code>表示把去重结果输出到文件中<br><img src="/2024/06/21/linux-zhi-ling/uniq.png" alt="alt text"></li></ol></li></ul><h4 id="sort对文件内容进行排序"><a href="#sort对文件内容进行排序" class="headerlink" title="sort对文件内容进行排序"></a><code>sort</code>对文件内容进行排序</h4><ul><li><code>sort</code> 排序</li><li>参数<ul><li><code>-k3</code> 表示按第3个字段来排序</li><li><code>-n</code> 默认按字符串来排，看编码，想要把字段当作数字来排序，加参数<code>-n</code></li><li><code>-r</code> 逆序排列 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> <span class="token parameter variable">-nrk4</span> /tmp/student_record<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>-t&quot;分隔符&quot;</code> sort命令默认按空格分割字段，参数<code>-t</code>可以切换分隔符 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> <span class="token parameter variable">-nrk4</span> -t<span class="token string">":"</span> /tmp/student_record<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>-f</code> 表示不区分大小写</li></ul></li></ul><h4 id="cut命令剪切文件内容"><a href="#cut命令剪切文件内容" class="headerlink" title="cut命令剪切文件内容"></a><code>cut</code>命令剪切文件内容</h4><ul><li>cut -blist [-n][file-list]</li><li>cut -clist [file-list]</li><li>cut -flist [-dchar][-s][file-list]</li><li>参数<ul><li><code>-f参数1,参数2...</code>  表示切割出第（参数）列字段</li><li><code>-d&quot;分隔符&quot;</code> <code>cut</code>命令默认使用<code>TAB制表符</code>来作为分隔符，加<code>-d</code>参数可以修改分隔符<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cut</span> -d<span class="token string">":"</span> <span class="token parameter variable">-f2</span> /etc/passwd <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>-c参数1,参数2</code> 表示切割出第（参数）列字符</li></ul></li></ul><h4 id="拼接命令"><a href="#拼接命令" class="headerlink" title="拼接命令"></a>拼接命令</h4><ul><li><code>paste 文件a 文件b</code>命令 简单的把文件a和b按行拼接，第一行拼第一行…</li><li><code>join</code>命令 实现按关键字拼接</li></ul><h4 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h4><p><code>grep</code>命令: 查找或搜索文件内容</p><ul><li><code>grep</code> 查找内容 文件名</li></ul><ol><li>grep命令及选项的使用</li></ol><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-v</td><td>显示不包含匹配文本的所有行</td></tr><tr><td>-n</td><td>显示匹配行号</td></tr><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-l</td><td>只列出包含内容的文件列表，不关心内容</td></tr><tr><td>-c</td><td>只计数，对每个文件进行计数操作</td></tr></tbody></table><ol start="2"><li>grep命令结合正则表达式使用</li></ol><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>(行)以指定字符开头</td></tr><tr><td>$</td><td>(行)以指定字符结尾</td></tr><tr><td>.</td><td>匹配任意一个非换行符的字符</td></tr><tr><td>*</td><td>代表前一个字符可以出现一次或者任意多次</td></tr><tr><td>[]</td><td>代表集合的意思,eg. [Hh]ello</td></tr><tr><td><code>[^]</code></td><td>方括号里上箭头表示取反,匹配除了括号里的其他所有字符</td></tr><tr><td><code>\&lt;</code></td><td>表示一个单词的开头,或者可以用grep的参数<code>-w</code></td></tr><tr><td><code>\&gt;</code></td><td>表示一个单词的结束</td></tr><tr><td><code>\&#123;a,b\&#125;</code></td><td>表示前一个字符出现a到b次,a为0表示至多出现b次,b不填表示至少出现a次以上</td></tr><tr><td><code>| </code></td><td>表示或,要用grep的升级版egrep</td></tr><tr><td><code>?</code></td><td>出现一次或者不出现</td></tr><tr><td><code>+</code></td><td>表示前一个字符至少出现一次</td></tr><tr><td><code>()</code></td><td>Grouping</td></tr><tr><td><code>\</code></td><td>转义斜杠</td></tr></tbody></table><p><img src="/2024/06/21/linux-zhi-ling/re.png" alt="alt text"></p><p><img src="/2024/06/21/linux-zhi-ling/grep.png" alt="alt text"></p><ul><li>通过 grep 命令可以在指定文件中查找指定搜索内容，这里扩展一下，grep 还可以查找管道中的内容<br>比如:ls&#x2F;| grep ‘lib’</li><li>在使用 grep 命令时，还可以省略查找内容的引号比如:ls&#x2F;| grep lib , grep hello 1.txt</li></ul><h4 id="对文本批量修改"><a href="#对文本批量修改" class="headerlink" title="对文本批量修改"></a>对文本批量修改</h4><ul><li><code>sed</code>流处理<br> 对文件流水线处理,读一行处理一行sed ‘[address]command’ filename(s)<ul><li>根据行号选中行处理<ol><li><code>d</code> 删除操作对1到3行进行删除操作<code>sed &#39;1,3d&#39; filename</code></li></ol></li><li>根据正则表达式选中包含匹配项的行处理,<code>sed &#39;/正则表达式/&#39; file</code><ol><li><code>s</code>替换操作 对计算机系CS的学生替换成EECS<code>sed &#39;s/&lt;CS/EECS/&#39; file</code></li><li><code>s///g</code>全局替换操作 把数字替换成*屏蔽成绩<code>sed &#39;s/[0-9]/*/g&#39; file</code></li><li><code>p</code>打印前三行<code>sed &#39;1,3p&#39; file</code></li><li><code>a</code>在匹配行后加一行内容<code>sed &#39;/\&lt;CS/a =====High Salary=====&#39; file</code></li><li><code>i</code>在匹配后前加一行内容<code>sed &#39;/\&lt;CS/i =====High Salary=====&#39; file</code></li><li><code>!</code>否定</li></ol></li><li><code>-n</code>参数 表示只执行操作,不默认输出缓冲区</li><li><code>-i</code>参数（或 <code>--in-place</code>）是一个非常重要的选项，它允许你直接修改输入文件，而不是仅仅将结果发送到标准输出。</li></ul><ul><li><code>sed</code>格式<br>  <code>sed &#39;/正则表达式/s#原文#替换文本#&#39;</code><br>  <code>sed &#39;/^[[:space:]]*$/d&#39; output_sort.txt</code>严格删除所有空行<code>[[:space:]]</code>这是sed中的一个字符类，表示空白字符。它匹配任何空白字符，如空格、制表符、换行符、回车符等</li></ul></li><li><code>awk</code>命令<ul><li><code>awk</code>命令里的正则表达式格式为<code>awk &#39;/re/&#39; filename</code><br> <img src="/2024/06/21/linux-zhi-ling/awk01.png" alt="alt text"></li><li>在awk命令中,美元符号表示字段的意思<code>$</code><br> <img src="/2024/06/21/linux-zhi-ling/awk_$.png" alt="alt text"></li><li><code>F</code>参数指定分割符<ul><li>默认情况下，awk 使用空格或制表符作为字段分隔符</li><li>如果你有一个以逗号, 分隔的文件，并希望使用 awk 来处理它，你可以这样指定分隔符:<code>awk -F, &#39;&#123;print $1, $2&#125;&#39; filename</code></li><li>如果有都多个分隔符,用<code>[]</code>括起来,例如<code>-F&#39;[ab]&#39;</code></li></ul></li><li><code>$1~</code>字段匹配<ul><li><code>awk &#39;$2~/^D/&#123;print $1,$2&#125;&#39;</code>表示对字段2进行匹配,如果是以D开头的,就打印字段1,字段2</li><li><code>awk &#39;$2!~/^D/&#123;print $1,$2&#125;&#39;</code>表示对字段2不进行匹配以D开头的,就打印字段1,字段2</li></ul></li><li><code>过滤</code>条件<ul><li><code>awk -F: &#39;$3 &gt;= 1000 &amp;&amp; $3 &lt;= 2000 &#123;print $1, $3&#125;&#39; /etc/passwd</code>要显示用户ID在1000到2000之间的用户名，您可以使用awk来过滤&#x2F;etc&#x2F;passwd文件。$3 &gt;&#x3D; 1000 &amp;&amp; $3 &lt;&#x3D; 2000 是一个条件，它检查第三个字段（用户ID）是否在1000到2000之间（包括1000和2000）。</li></ul></li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'/\&lt;CS/&#123;print $1,$2&#125;'</span> /tmp/student_record<span class="token function">awk</span> <span class="token string">'$2~/^D/&#123;print $1,$2&#125;'</span><span class="token comment"># $2~/^D/：这是一个条件，它检查第二列（由字段分隔符分隔，默认为空格或制表符）是否以字母 "D" 开头,~ 是 awk 中用于模式匹配的操作符</span><span class="token function">awk</span> -F: <span class="token string">'$2 !~ /916/ &#123;print $1&#125;'</span> /tmp/donors<span class="token comment">#这条命令将根据冒号分隔符(:)来解析文件中的内容，并打印出第二个字段中不包含916区号的人的名字。</span><span class="token function">awk</span> <span class="token string">'&#123;print NR ": " $0&#125;'</span> /tmp/donors<span class="token comment"># 请将"文件名"替换为您要处理的文件名。这条命令将打印出每条记录的行号（记录号）后面跟着记录的内容。记录号由NR内置变量提供，表示当前处理的记录的序号。</span> <span class="token function">awk</span>  -F<span class="token string">'[: ]'</span> <span class="token string">'$7 &lt;= 85 &#123;print $1,$2,$4&#125;'</span> /tmp/donors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tr</code>命令(映射替换)<ul><li>tr 被映射域 映射域(可用区间表示)<br> <img src="/2024/06/21/linux-zhi-ling/tr.png" alt="alt text"></li></ul></li></ul><h3 id="文件解压缩"><a href="#文件解压缩" class="headerlink" title="文件解压缩"></a>文件解压缩</h3><ul><li><p><code>gzip</code> 只能保留压缩或者未压缩二选一</p><ul><li>压缩命令格式<code>gzip filename</code></li><li>解压格式<code>gzip -d ziped_filename</code></li></ul></li><li><p><code>bzip2</code> .bz2后缀</p><ul><li>压缩命令格式<code>bzip2 filename</code></li><li>解压格式<code>bzip2 -d ziped_filename</code></li></ul></li><li><p><code>Linux</code>下文本文件和<code>Windows</code>下文本文件不同:<br> <code>Windows</code>下文本文件会每行包含一个<code>\r</code><br> <img src="/2024/06/21/linux-zhi-ling/linuxtxt_dif_windows.png" alt="alt text"></p></li></ul><h2 id="第七章-vim的使用"><a href="#第七章-vim的使用" class="headerlink" title="第七章 vim的使用"></a>第七章 vim的使用</h2><h3 id="7-1-vim的三种模式"><a href="#7-1-vim的三种模式" class="headerlink" title="7.1 vim的三种模式"></a>7.1 vim的三种模式</h3><ol><li>命令模式<br>命令模式下按i进入编辑模式（插入模式）</li><li>插入模式<br>在此模式下编辑文件内容，按esc退出，进入末行模式</li><li>末行模式<br>在此模式下输入<code>:q</code>表示直接退出，<code>:q！</code>强制退出<br><code>w</code>表示保存，<code>wq</code>保存且退出</li></ol><h3 id="7-2-vim的常用命令"><a href="#7-2-vim的常用命令" class="headerlink" title="7.2 vim的常用命令"></a>7.2 vim的常用命令</h3><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>p</td><td>粘贴</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>v</td><td>普通视图模式</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl+r</td><td>重做,反撤销</td></tr><tr><td>g</td><td>跳到文件头</td></tr><tr><td>G</td><td>跳到文件尾</td></tr><tr><td>数字+G</td><td>跳转到指定行</td></tr><tr><td>&#x2F;关键词</td><td>向下查找关键词</td></tr><tr><td>:&#x2F;搜索的内容</td><td>搜索指定内容</td></tr><tr><td>?关键词</td><td>向上查找关键词</td></tr><tr><td>n</td><td>查找下一个</td></tr><tr><td>N</td><td>查找上一个</td></tr><tr><td>:%s&#x2F;原字符串&#x2F;新字符串&#x2F;g</td><td>全局替换</td></tr><tr><td>:开始行数,结束行数s&#x2F;原字符串&#x2F;新字符串&#x2F;g</td><td>局部替换</td></tr></tbody></table><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>.</code></td><td>重复上一次命令操作</td></tr><tr><td><code>&gt;</code></td><td>跳至基地</td></tr><tr><td><code>shift</code>+<code>6</code></td><td>切换成蓝色主题的外观</td></tr><tr><td><code>shift</code>+<code>4</code></td><td>回到浅灰色主题</td></tr><tr><td><code>ctrl</code>+<code>f</code></td><td>回到黑暗主题</td></tr><tr><td><code>ctrl</code>+<code>b</code></td><td>上传一屏</td></tr></tbody></table><h2 id="第八章-File-Share"><a href="#第八章-File-Share" class="headerlink" title="第八章 File Share"></a>第八章 File Share</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><ul><li><p><code>ln 源文件名  链接文件名</code><br> 修改链接文件的内容,原文件也会改变</p></li><li><p>不能跨文件系统(设备)创建链接,也不能对目录创建硬链接</p></li><li><p>创建硬链接文件,链接文件与原文件分配同样的索引节点号(文件系统)</p></li></ul><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><ul><li><code>ln -s 源文件名  链接文件名</code><br> 分配<strong>不同于源文件的索引节点</strong>,当访问链接文件时,先去根据索引节点号找到链接文件所在硬盘位置,访问<strong>链接文件内容(源文件路径信息等)<strong>找到源文件,在根据源文件的文件名和索引节点号找到源文件索引节点,从而找到</strong>源文件路径,对源文件进行访问</strong>。<code>要访问两次硬盘</code></li></ul><h2 id="第九章-重定向和管道"><a href="#第九章-重定向和管道" class="headerlink" title="第九章 重定向和管道"></a>第九章 重定向和管道</h2><h3 id="1-文件描述符表"><a href="#1-文件描述符表" class="headerlink" title="1.文件描述符表"></a>1.文件描述符表</h3><p><strong>文件描述符表</strong>（File Descriptor Table）是操作系统中用于管理打开的文件、套接字、管道等文件类型对象的一种数据结构。在Unix和类Unix系统（如Linux）中，每一个进程都有一个与之关联的文件描述符表。</p><ol><li><strong>文件描述符</strong>：这是一个非负整数，用于在进程中唯一地标识一个打开的文件或套接字。例如，当你使用<code>open()</code>函数打开一个文件时，系统会返回一个文件描述符。</li><li><strong>文件描述符表</strong>：这个表是一个数组，其索引是文件描述符，数组的元素是指向打开文件的指针（在更底层，这通常是一个指向文件表项的指针）。</li><li><strong>文件表</strong>：每个打开的文件在内核中都有一个对应的文件表项（也称为v-node或inode）。这个表项包含了文件的详细信息，如文件的大小、访问权限、偏移量等。</li><li><strong>关系</strong>：文件描述符表是进程级别的，而文件表是系统级别的。一个文件表项可以被多个进程共享（通过不同的文件描述符），但每个进程都有自己的文件描述符表。</li><li><strong>操作</strong>：当进程执行如<code>read()</code>、<code>write()</code>等系统调用时，它会使用文件描述符作为参数。系统会根据文件描述符在文件描述符表中查找对应的文件表项，并执行相应的操作。</li><li><strong>关闭文件</strong>：当进程使用<code>close()</code>系统调用关闭一个文件时，它实际上是在文件描述符表中删除对应的条目，而不是删除文件表项。只有当所有引用该文件的进程都关闭了该文件时，文件表项才会被释放。</li></ol><p><img src="/2024/06/21/linux-zhi-ling/file_desc_specl.png" alt="alt text"></p><ul><li>有三个特殊的文件描述符,是系统自动打开的<ol><li>标准输入描述符<code>stdin</code> 0</li><li>标准输出描述符<code>stdout</code> 1</li><li>标准错误输出描述符<code>stderr</code> 2</li></ol></li></ul><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><h4 id="2-1标准输出重定向"><a href="#2-1标准输出重定向" class="headerlink" title="2.1标准输出重定向"></a>2.1标准输出重定向</h4><ul><li>格式: <code>command &lt; input_file</code></li><li>例子 把&#x2F;tmp&#x2F;studnet_record 里的所有小写字母变成大写<br><img src="/2024/06/21/linux-zhi-ling/input_rediect.png" alt="alt text"></li></ul><h4 id="2-2标准输出重定向"><a href="#2-2标准输出重定向" class="headerlink" title="2.2标准输出重定向"></a>2.2标准输出重定向</h4><p>重定向也称为输出重定向，把在终端执行命令的结果保存到目标文件。</p><ul><li>格式: <code>command &gt; output_file</code></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>如果文件存在，会覆盖原有文件内容，相当于文件操作中的’w’模式</td></tr><tr><td>&gt;&gt;</td><td>如果文件存在，会追加写入文件末尾，相当于文件操作中的’a’模式</td></tr></tbody></table><p><img src="/2024/06/21/linux-zhi-ling/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="alt text"></p><ul><li>可以使用输出重定向合并文件<ol><li>按列合并 cat filea fileb &gt; newfile</li><li>按行合并 paste filea fileb &gt; newfile</li></ol></li></ul><h4 id="2-2标准错误输出重定向"><a href="#2-2标准错误输出重定向" class="headerlink" title="2.2标准错误输出重定向"></a>2.2标准错误输出重定向</h4><ul><li>格式: <code>2 &gt; output_file</code><br> <code>2</code>表示标准错误输出</li><li>使用pipe出现错误输出时,<code>2&gt;/dev/null</code>放在出现错误命令的后面</li></ul><p><img src="/2024/06/21/linux-zhi-ling/stderr.png" alt="alt text"></p><ul><li><code>/dev/null</code> 空设备,一般不关心的错误输出就丢到空设备文件中</li></ul><h4 id="多种重定向结合"><a href="#多种重定向结合" class="headerlink" title="多种重定向结合"></a>多种重定向结合</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /tmp <span class="token parameter variable">-name</span> <span class="token string">"*.cpp"</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">></span>result <span class="token comment"># 即丢弃结果也保存正常输出文件</span><span class="token function">find</span> /tmp <span class="token parameter variable">-name</span> <span class="token string">"*.cpp"</span> <span class="token operator">>&amp;</span>result <span class="token comment"># 把标准输出和标准错误输出都保存到文件result中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Redirecting stdin and stdout in OneCommand<br> Command <input-file> out-file</input-file></p></li><li><p>Redirecting stdout and stderr in OneCommand<br> Command &gt;out-file 2&gt;err-file<br> Command &gt;out-file 2&gt;&amp;1<br> Command &gt;&amp; out-file</p></li></ul><h3 id="进程间通信的方式"><a href="#进程间通信的方式" class="headerlink" title="进程间通信的方式"></a>进程间通信的方式</h3><ul><li>匿名管道：是一种半双工的通信方式，只能在有亲缘关系的进程之间使用。管道可以实现在一个进程中生成输出，而在另一个进程中读取该输出</li><li>命名管道：是一种有名的FIFO文件，在文件系统中以文件形式存在，可以在不相关的进程之间进行通信</li><li>消息队列：是一种进程间通信的方式，一方发送消息到队列，而另一方则从队列中接收消息</li><li>信号量：用于进程间的同步与互斥，可以实现进程对临界资源的访问控制</li><li>信号：是一种异步的通知机制，用于通知进程发生了某种事件，比如接收到了某种信号或者错误</li><li>共享内存：是一种高效的进程间通信方式，多个进程可以共享同一块内存区域，以实现数据的共享</li><li>socket：是一种网络编程的通信方式，通过网络套接字实现不同主机的进程间通信</li></ul><h3 id="KISS原则"><a href="#KISS原则" class="headerlink" title="KISS原则"></a><code>KISS</code>原则</h3><p>Linux设计时,遵循<code>KISS(Keep It Simple Stupid)</code>原则</p><h3 id="匿名-管道命令"><a href="#匿名-管道命令" class="headerlink" title="(匿名)管道命令"></a>(匿名)管道命令</h3><p>管道<code>|</code>相当于一个容器,可以把命令执行的结果存储到里面,在释放出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tree /bin/ <span class="token operator">|</span> <span class="token function">more</span><span class="token comment"># 统计当前登陆主机人数</span><span class="token function">who</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token function">du</span> /tmp/* <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-k1</span> <span class="token operator">|</span> <span class="token function">tail</span> -3<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print$2&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tee</code>命令<br> 接收上一条命令的输出,拷贝保存到一个文件中,并把输出传入下一个管道命令的输入<br><img src="/2024/06/21/linux-zhi-ling/tee.png" alt="alt text"></li></ul><h3 id="命名管道FIFOs"><a href="#命名管道FIFOs" class="headerlink" title="命名管道FIFOs"></a>命名管道FIFOs</h3><ul><li><p>FIFOs（命名管道）可用于系统上两个进程之间的通信。它们允许两个进程在系统上独立执行时进行通信，而不像普通管道那样只能在同一个进程内进行通信。</p></li><li><p>FIFOs（命名管道）是在磁盘上创建的，并且有一个类似文件名的名称。这意味着像操作文件一样，必须先创建并打开 FIFOs（命名管道）才能用于进程间通信。</p></li><li><p>可以在独立执行的程序之间使用 FIFOs（命名管道），这使得它成为进程间跨应用程序通信的一种有效方式。</p></li></ul><h4 id="FIFOs的使用"><a href="#FIFOs的使用" class="headerlink" title="FIFOs的使用"></a>FIFOs的使用</h4><ul><li><code>mkfifo [option] file-list</code>创建命名管道命令<ul><li><code>-m 八进制权限数</code> 参数用来设定管道文件的权限<br><img src="/2024/06/21/linux-zhi-ling/fifo.png" alt="alt text"></li></ul></li></ul><h2 id="第十章-进程Processing"><a href="#第十章-进程Processing" class="headerlink" title="第十章 进程Processing"></a>第十章 进程Processing</h2><ul><li><code>进程</code>就是程序的一次运行</li><li>A process is a program in execution</li><li>A process is created every time you run an external command and is removed after the command finishes its execution</li></ul><h3 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h3><ul><li>先来先服务（FCFS）调度算法</li><li>短作业优先（SJF）调度算法</li><li>优先级调度算法</li><li>多优先级队列</li><li>高响应比优先调度算法</li><li>时间片轮转调度算法</li><li>多级反馈队列调度算法</li></ul><h3 id="Linux下的进程"><a href="#Linux下的进程" class="headerlink" title="Linux下的进程"></a>Linux下的进程</h3><p>Linux系统采用多级优先队列的方式</p><p><strong>1. Processor Scheduler（处理器调度器）</strong></p><ul><li><p><strong>定义</strong>：</p><ul><li>处理器调度器是操作系统中负责实现CPU调度算法的代码部分。</li></ul></li><li><p><strong>功能</strong>：</p><ul><li>确定下一个要运行哪个进程。</li><li>考虑多种因素，如进程优先级、等待时间、I&#x2F;O需求等。</li></ul></li><li><p><strong>目标</strong>：</p><ul><li>确保系统资源的公平分配。</li><li>提高系统的吞吐量和响应速度。</li></ul></li></ul><p><strong>2. Dispatcher（调度器）</strong></p><ul><li><p><strong>定义</strong>：</p><ul><li>调度器是操作系统中负责将CPU控制权从当前进程转移到新调度进程的组件。</li></ul></li><li><p><strong>功能</strong>：</p><ul><li>停止当前进程的执行。</li><li>保存当前进程的上下文（如程序计数器、寄存器状态等）。</li><li>加载新进程的上下文。</li><li>将新进程置于就绪状态，以便其可以开始执行。</li></ul></li><li><p><strong>要求</strong>：</p><ul><li>上下文切换过程需要快速且准确，以确保系统的稳定性和性能。</li></ul></li></ul><p><strong>3. 进程优先级值计算</strong></p><ul><li><p><strong>影响因素</strong>：</p><ul><li>Nice值：一个介于-20（最高优先级）和19（最低优先级）之间的整数。</li><li>CPU使用情况：进程占用的CPU资源量。</li></ul></li><li><p><strong>调整方式</strong>：</p><ul><li>用户可以使用<code>nice</code>命令或<code>renice</code>命令来调整进程的Nice值。</li><li>操作系统根据进程的CPU使用情况动态地调整其优先级值。</li></ul></li><li><p><strong>目的</strong>：</p><ul><li>确保所有进程能够公平地获得CPU资源。</li><li>防止某个进程长时间占用过多CPU资源，影响其他进程的执行。</li></ul></li><li><p>怎么改变Nice_Value值</p><ul><li><code>nice -n nice_value</code>命令</li></ul></li></ul><h3 id="进程相关命令"><a href="#进程相关命令" class="headerlink" title="进程相关命令"></a>进程相关命令</h3><ul><li><code>ps</code>命令<ul><li><code>-l</code>参数: 显示详细信息</li><li><code>-e</code>选项: 显示系统中所有进程</li></ul></li></ul><p><img src="/2024/06/21/linux-zhi-ling/ps.png" alt="alt text"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改进程优先级(普通用户只能降低优先级--->给nice_value赋正值)</span><span class="token function">nice</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-20</span> <span class="token function">ps</span> <span class="token parameter variable">-l</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2024/06/21/linux-zhi-ling/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6.png" alt="alt text"></p><p><strong>Shell命令</strong>可以是内部的（内建的）或外部的。</p><ul><li><p><strong>内部（内建）命令</strong>：这些命令的代码是shell进程的一部分。内部命令直接由shell解释和执行，不需要创建新的进程。您列举的内部命令包括<code>bg</code>（将后台暂停的任务继续执行）、<code>cd</code>（更改目录）、<code>continue</code>（在循环中跳过当前迭代的剩余部分）、<code>echo</code>（在终端显示文本或将文本写入文件）、<code>exec</code>（替换当前shell进程为新的进程）。</p></li><li><p><strong>外部命令</strong>：这些命令的代码存储在文件中，文件内容可以是二进制代码或shell脚本。外部命令需要shell创建一个新的子进程来执行。您列举的外部命令包括<code>grep</code>（搜索文件中的文本模式）、<code>more</code>（分页查看文件内容）、<code>cat</code>（连接并打印文件内容）、<code>mkdir</code>（创建目录）、<code>rmdir</code>（删除空目录）和<code>ls</code>（列出目录内容）。</p></li></ul><p>在UNIX系统中，一个进程可以通过使用<strong>fork系统调用</strong>来创建另一个进程。这个系统调用会创建一个与原始进程完全相同的内存映射。</p><ul><li><strong>父进程</strong>：执行fork系统调用的原始进程被称为父进程。</li><li><strong>子进程</strong>：通过fork系统调用创建的新进程被称为子进程。</li></ul><p>可以使用type命令来查看是内部命令还是外部命令</p><ul><li><code>type</code>命令</li></ul><p><img src="/2024/06/21/linux-zhi-ling/type.png" alt="alt text"></p><h3 id="shell环境下执行命令"><a href="#shell环境下执行命令" class="headerlink" title="shell环境下执行命令"></a>shell环境下执行命令</h3><ul><li>命令执行</li></ul><p>在Linux下，Bash执行外部命令的过程涉及多个步骤。以下是该过程的大致描述：</p><ol><li><p><strong>命令输入</strong>：</p><ul><li>用户在Bash shell中输入一个命令，例如<code>ls</code>。</li></ul></li><li><p><strong>词法分析</strong>：</p><ul><li>Bash首先对输入的命令进行词法分析，将命令分解为单词或标记（tokens），例如命令名、选项、参数等。</li></ul></li><li><p><strong>路径搜索</strong>：</p><ul><li>Bash需要确定输入的是内部命令（如<code>cd</code>、<code>echo</code>等Bash内置的命令）还是外部命令。</li><li>对于外部命令，Bash会在环境变量<code>PATH</code>指定的目录中搜索该命令的可执行文件。<code>PATH</code>环境变量包含了一系列用冒号分隔的目录路径，Bash会按照这些路径的顺序进行搜索。</li></ul></li><li><p><strong>创建子进程</strong>：</p><ul><li>一旦找到可执行文件，Bash会使用<code>fork()</code>系统调用来创建一个新的子进程。这个子进程是当前Bash进程的副本，它将用于执行外部命令。</li></ul></li><li><p><strong>执行外部命令</strong>：</p><ul><li>在子进程中，Bash使用<code>exec()</code>系统调用来替换当前进程的映像为外部命令的可执行文件映像，从而开始执行该命令。</li><li><code>exec()</code>调用会导致子进程完全变成另一个程序（即外部命令），执行完毕后不会返回到原Bash进程，除非遇到错误或外部命令执行完成。</li></ul></li><li><p><strong>等待命令完成</strong>：</p><ul><li>父进程（即原始的Bash进程）会等待子进程（执行外部命令的进程）完成。这通常是通过<code>wait()</code>系统调用来实现的，它允许父进程挂起执行，直到子进程结束。</li></ul></li><li><p><strong>处理命令输出</strong>：</p><ul><li>外部命令执行过程中可能会产生标准输出（stdout）和标准错误输出（stderr）。这些输出通常会被打印到终端上，除非用户通过重定向（<code>&gt;</code>、<code>&gt;&gt;</code>、<code>2&gt;</code>等）或管道（<code>|</code>）改变了输出的方向。</li></ul></li><li><p><strong>命令结束</strong>：</p><ul><li>当外部命令执行完毕后，控制权会返回到Bash进程。如果命令成功执行，Bash通常会返回一个成功的退出状态（通常是0）；如果命令执行失败，则会返回一个非零的退出状态。</li></ul></li></ol><ul><li><p>脚本文件执行<br><img src="/2024/06/21/linux-zhi-ling/script.png" alt="alt text"></p></li><li><p><code>top</code>命令<br>动态实时的显示系统中进程变化<br><img src="/2024/06/21/linux-zhi-ling/top.png" alt="alt text"></p><ul><li><code>d</code>: 按D键切换刷新时间</li><li><code>h</code>: 显示可选项</li><li><code>q</code>: 退出</li></ul></li><li><p><code>pstree</code>命令<br>用树的方式显示进程之间的关系</p></li></ul><h3 id="对进程进行控制"><a href="#对进程进行控制" class="headerlink" title="对进程进行控制"></a>对进程进行控制</h3><p>前台进程的概念:<br>   前台进程是与用户直接交互的进程。以下是对前台进程的详细解释：</p><ol><li><strong>定义</strong>：前台进程指的是那些当前正在与用户进行直接交互的进程。这类进程通常位于屏幕的最前端，接收用户的输入并显示输出结果。</li><li><strong>特性</strong>：<ul><li>交互性：前台进程能够直接响应用户的操作，如点击、输入等。</li><li>阻塞性：当一个前台进程正在运行时，它通常会阻塞用户终端，意味着用户无法进行其他操作，直到该进程完成。</li><li>单一性：在任何时刻，通常只有一个进程（或进程组）可以在前台运行。</li></ul></li><li><strong>与后台进程的区别</strong>：与前台进程不同，后台进程在后台运行，不会阻塞用户终端，允许用户在同一终端启动新的前台或后台进程。后台进虽&gt;然可以向终端发送输出，但通常不能从终端接收输入。</li><li><strong>操作系统中的表现</strong>：在Unix-like操作系统中，用户可以通过特定的命令在前台和后台之间切换进程。</li><li><strong>实例</strong>：以Oracle数据库为例，当用户运行一个应用进程时，系统会为该应用建立一个服务进程，这个服务进程可以被视为前台进程，用于处理连接到数据库实例的用户进程的请求。</li><li><strong>其他系统中的应用</strong>：在Android系统中，前台进程也是极其重要的，它代表当前正在与用户交互的应用程序。这类进程在系统资源分配中通常享有优先级，以确保流畅的用户体验。<br>   总的来说，前台进程是计算机系统中直接与用户进行交互的进程，它具有高度的交互性和实时性要求。在不同的操作系统和应用场景中，前台进程的具体表现和管理方式可能会有所不同。</li></ol><ul><li>执行命令时指定其为后台进程<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/tmp/loop <span class="token operator">&amp;</span><span class="token comment"># 此时后台进程loop不断输出数字,按CTRL+C无效,因为是后台进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>jobs命令</strong>是Linux系统中的一个内置命令，它用于显示当前shell中正在运行或已经挂起的任务列表。</p><ol><li><p><strong>基本功能</strong>：</p><ul><li>显示当前shell中所有正在运行或挂起的任务。</li><li>通过任务编号、状态、进程编号和任务名称来展示任务信息。</li></ul></li><li><p><strong>常用操作</strong>：</p><ul><li>使用<code>jobs</code>命令直接查看任务列表。</li><li><code>fg [%n]</code>用于将后台执行的进程调到前台。</li><li><code>bg [%n]</code>用于将后台暂停的进程继续运行。</li><li><code>Ctrl+Z</code>可以将当前正在运行的前台进程暂停，并将其移动到后台。</li></ul></li><li><p><strong>任务状态</strong>：</p><ul><li>任务的状态可以是停止状态(S)、运行状态(R)或已完成状态(D)。</li></ul></li><li><p><strong>命令参数</strong>：</p><ul><li><code>-l</code>选项：显示详细的任务信息，包括进程ID（PID）、状态、作业编号、命令和进程组ID。</li><li><code>-n</code>选项：只显示上次显示过的已经停止的或已经退出的作业。</li><li><code>-p</code>选项：仅显示选定作业的进程组的进程ID。</li><li><code>-r</code>选项：仅显示正在运行的作业。</li><li><code>-s</code>选项：仅显示停止的作业。</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li>当你在终端中运行了多个命令或脚本，并且想要查看或管理这些任务时，可以使用jobs命令。</li><li>特别是当你需要切换任务的执行前后台，或者查看哪些任务正在运行、哪些已经暂停时，jobs命令会非常有用。</li></ul></li></ol><p><img src="/2024/06/21/linux-zhi-ling/loop.png" alt="alt text"></p><ul><li><code>fg</code><br>   把后台进程变成前台进程<ul><li>默认把带<code>+</code>的进程调到前台</li><li><code>%1</code>: 指定把哪个(进程id)进程变成前台进程</li></ul></li></ul><p><img src="/2024/06/21/linux-zhi-ling/fg.png" alt="alt text"></p><ul><li><code>bg</code><br>   挂起前台任务使用<code>CTRL+Z</code>，<code>bg</code>命令来把后台挂起的任务唤醒</li></ul><h3 id="命令的顺序和并行执行（Sequential-and-Parallel-Execution-of-Commands）"><a href="#命令的顺序和并行执行（Sequential-and-Parallel-Execution-of-Commands）" class="headerlink" title="命令的顺序和并行执行（Sequential and Parallel Execution of Commands）"></a>命令的顺序和并行执行（Sequential and Parallel Execution of Commands）</h3><ul><li>串行: cmd1 ; cmd2</li><li>并行: cmd1 &amp; cmd2</li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E5%91%BD%E4%BB%A4%E4%B8%B2%E5%B9%B6%E8%A1%8C.png" alt="alt text"></p><h3 id="如何终止进程"><a href="#如何终止进程" class="headerlink" title="如何终止进程"></a>如何终止进程</h3><ul><li>终止前台进程<ul><li>CTRL+C</li></ul></li><li>终止后台进程<ul><li><code>kill</code>命令<br><img src="/2024/06/21/linux-zhi-ling/kill.png" alt="alt text"></li></ul></li></ul><h4 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a><code>kill</code>命令</h4><p><code>kill</code> 命令在 Unix 和 Linux 系统中用于向进程发送信号。其基本语法是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token punctuation">[</span>-信号编号<span class="token punctuation">]</span> 进程ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>信号编号</code> 是一个可选参数，用于指定要发送给进程的信号。如果省略，则默认信号是 SIGTERM（软件终止信号，通常为编号 15）。</li><li><code>进程ID</code> 是要发送信号的进程的 ID。</li></ul><p><code>kill -l</code> 命令会列出所有可用的信号。</p><p>目的：将 <code>信号编号</code> 指定的信号发送给 <code>proc-list</code> 中指定的进程ID（PID）对应的进程。作业ID通常用于 shell 作业控制，必须以 <code>%</code> 符号开头。</p><p><code>kill -l</code> 命令返回所有信号及其名称的列表。在某些系统上，信号编号可能不会与名称一起显示。</p><p>常用的信号编号包括：</p><ul><li>HUP（挂起，通常为信号编号 1）</li><li>INT（中断，通常由按 Ctrl+C 发送，信号编号 2）</li><li>QUIT（退出，通常由按 Ctrl+\ 发送，信号编号 3）</li><li>KILL（强制杀死，信号编号 9）</li><li>TERM（软件信号，如果没有指定则为默认信号，通常为编号 15）</li></ul><p>请注意，向进程发送某些信号，尤其是 KILL（信号 9），应该谨慎进行，因为它可以在不给进程机会适当清理资源的情况下突然终止进程。</p><p>如果你想向多个进程发送信号，可以通过空格分隔指定多个 PID，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token parameter variable">-SIGTERM</span> <span class="token number">1234</span> <span class="token number">5678</span> <span class="token number">9012</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将 SIGTERM 信号发送给 PID 为 1234、5678 和 9012 的进程。</p><h4 id="信号的处理"><a href="#信号的处理" class="headerlink" title="信号的处理"></a>信号的处理</h4><p>命令和进程的异常终止（续）</p><p><code>kill</code>命令的主要目的是向进程发送信号（软件中断）。进程在接收到信号时可以采取以下三种行动之一：</p><ol><li>接受由UNIX内核决定的默认操作。</li><li>忽略该信号。</li><li>拦截信号并执行用户定义的操作。</li></ol><p>由进程内部事件引起的信号被称为内部信号或陷阱（trap）。由进程外部事件引起的信号被称为外部信号。</p><h2 id="第十一章-Shell脚本编程"><a href="#第十一章-Shell脚本编程" class="headerlink" title="第十一章 Shell脚本编程"></a>第十一章 Shell脚本编程</h2><ol><li><p><strong>Shell Script (Shell 程序)</strong>:</p><ul><li>一个Shell脚本是一个包含一系列Shell命令的文本文件。这些命令可以由Shell（如bash, zsh, sh等）解释并执行。</li><li>Shell脚本通常用于自动化任务和简化复杂的命令序列。</li></ul></li><li><p><strong>Shell Variable (Shell 变量)</strong>:</p><ul><li>Shell变量是用户或程序员在Shell环境中用于存储和引用数据的机制。</li><li>变量可以存储字符串、数字或其他数据类型（取决于Shell）。</li><li>Shell变量通常用于在脚本中传递和存储数据，以及动态地构建命令。</li></ul></li><li><p><strong>Program Control Flow Commands (程序控制流命令)</strong>:</p><ul><li>这些命令允许在Shell脚本中执行非顺序的命令，以及重复执行命令块。</li><li>常见的控制流命令包括<code>if</code>、<code>for</code>、<code>while</code>、<code>until</code>、<code>case</code>等。</li><li>这些命令使得脚本能够基于条件执行不同的命令序列，或者重复执行某个命令块，直到满足某个条件为止。</li></ul></li></ol><p>总结：Shell脚本是包含一系列Shell命令的文本文件，用于自动化任务和简化命令序列。Shell变量用于存储和引用数据，而程序控制流命令则允许在脚本中执行非顺序的命令和重复执行命令块。</p><p>Shell脚本也是一种编程语言(解释型)<br>编程语言分为两种</p><ul><li>编译型: 如C++这种,通过g++先生成可执行文件</li><li>解释型: python或java,读一行命令,解释执行一行</li></ul><p><img src="/2024/06/21/linux-zhi-ling/shellscript.png" alt="alt text"></p><h3 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> first.sh<span class="token function">date</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>shell脚本有三种执行方式</p><ol><li><code>bash first.sh</code> 指定运行shell来执行脚本</li><li><code>first.sh</code> 直接执行shell脚本</li><li><code>. first.sh</code>或<code>source first.sh</code></li></ol><ul><li>在脚本文件第一行指定shell环境<code>#! /bin/bash</code>表示把<code>/bin/bash</code>程序加载进来,由它来解释执行脚本文件<br><img src="/2024/06/21/linux-zhi-ling/%E6%8C%87%E5%AE%9A%E8%84%9A%E6%9C%AC%E8%A7%A3%E9%87%8A%E5%99%A8.png" alt="alt text"></li></ul><h3 id="shell变量分类及操作"><a href="#shell变量分类及操作" class="headerlink" title="shell变量分类及操作"></a>shell变量分类及操作</h3><ul><li>环境变量(子进程无法修改父进程的环境变量)<br> 使用<code>env</code>命令直接显示环境变量</li><li>用户自定义变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /usr/bin/bash</span><span class="token comment"># 定义变量,不能加空格</span><span class="token assign-left variable">nam</span><span class="token operator">=</span><span class="token string">"Jack"</span><span class="token comment"># 不能使用双引号</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$nam</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>readonly</code>: 把一个变量变成只读</li><li><code>export</code>: 把一个用户定义变量变成环境变量</li><li><code>source</code>: 允许脚本修改环境变量值(使用<code>source</code>或者<code>.</code>执行脚本文件时,不会再创建子进程来执行,使用当前shell进程来解释执行脚本)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /usr/bin/bash</span><span class="token comment"># 设置父(当前)进程环境变量值</span><span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'Study Hard/$'</span><span class="token comment"># 执行时使用 . first.sh  或者 source first.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="内置的环境变量"><a href="#内置的环境变量" class="headerlink" title="内置的环境变量"></a>内置的环境变量</h3><ol><li><p><code>PATH</code></p><ul><li><strong>Purpose</strong>: 包含目录名称的列表，shell在查找外部命令或程序时会搜索这些目录。</li><li><strong>Default</strong>: 通常包括<code>/usr/bin</code>, <code>/bin</code>, <code>/usr/local/bin</code>等目录。</li></ul></li><li><p><code>EDITOR</code></p><ul><li><strong>Purpose</strong>: 指定默认文本编辑器，如<code>vi</code>, <code>nano</code>, <code>emacs</code>等。</li><li><strong>Default</strong>: 根据系统配置和用户偏好而定。</li></ul></li><li><p><code>ENV</code></p><ul><li><strong>Purpose</strong>: 指定shell启动时要读取的初始化文件。在某些shell中，如<code>ksh</code>，它可能用于指定环境设置文件。</li><li><strong>Default</strong>: 通常不设置，但在某些shell配置中可能使用。</li></ul></li><li><p><code>HOME</code></p><ul><li><strong>Purpose</strong>: 用户的主目录路径。当用户首次登录时，shell通常会切换到这个目录。</li><li><strong>Default</strong>: <code>/home/username</code>（其中<code>username</code>是用户的登录名）。</li></ul></li><li><p><code>MAIL</code></p><ul><li><strong>Purpose</strong>: 用户的系统邮箱文件的路径。当有新邮件时，某些shell会显示通知。</li><li><strong>Default</strong>: <code>/var/spool/mail/username</code>（其中<code>username</code>是用户的登录名）。</li></ul></li><li><p><code>MAILCHECK</code></p><ul><li><strong>Purpose</strong>: 指定shell检查用户邮箱以查找新邮件的频率（以秒为单位）。</li><li><strong>Default</strong>: 通常设置为60秒，但可能因系统而异。</li></ul></li><li><p><code>PPID</code></p><ul><li><strong>Purpose</strong>: 当前进程的父进程ID（PID）。这不是一个通常设置的环境变量，而是可以通过shell命令（如<code>$!</code>或<code>$PPID</code>在某些shell中）或程序内部API获取的。</li><li><strong>Default</strong>: 由操作系统在进程创建时设置。</li></ul></li><li><p><code>PS1</code></p><ul><li><strong>Purpose</strong>: 主shell提示符，显示在命令行上。</li><li><strong>Default</strong>: 通常设置为类似<code>$</code>或<code>#</code>（对于root用户）的字符，但用户可以通过修改<code>.bashrc</code>、<code>.bash_profile</code>等文件来定制它。</li></ul></li><li><p><code>PWD</code></p><ul><li><strong>Purpose</strong>: 当前工作目录的路径。</li><li><strong>Default</strong>: 由shell在每次更改目录时设置。</li></ul></li><li><p><code>TERM</code></p><ul><li><strong>Purpose</strong>: 终端类型。它告诉应用程序（如文本编辑器、终端仿真器等）关于终端的功能和特性。</li><li><strong>Default</strong>: 根据用户使用的终端仿真器而定，如<code>xterm</code>, <code>vt100</code>, <code>linux</code>等。</li></ul></li></ol><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$0</code></td><td>程序的名称</td></tr><tr><td><code>$1 - $9</code></td><td>命令行参数1到9的值</td></tr><tr><td><code>$@</code></td><td>所有命令行参数的值</td></tr><tr><td><code>$*</code></td><td>所有命令行参数的值,单一字符串<code>&quot;a b c d&quot;</code></td></tr><tr><td><code>&quot;$@&quot;</code></td><td>所有命令行参数的值；每个参数都单独引用 <code>&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;</code></td></tr><tr><td><code>$#</code></td><td>命令行参数的总数</td></tr><tr><td><code>$$</code></td><td>当前进程的进程ID（PID）</td></tr><tr><td><code>$?</code></td><td>最近命令的退出状态,执行成功返回值0</td></tr><tr><td><code>$!</code></td><td>最近后台进程的PID</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Study Hard:<span class="token variable">$cat</span> first.sh<span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token variable">$0</span><span class="token builtin class-name">echo</span> <span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token variable">$2</span>Study Hard:<span class="token variable">$first</span>.sh a b c./first.shabStudy Hard:<span class="token variable">$vim</span> first.shStudy Hard:<span class="token variable">$cat</span> first.sh<span class="token comment">#!/bin/bashecho $1</span>Study Hard:<span class="token variable">$first</span>.sh TomTom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell变量的数据类型"><a href="#shell变量的数据类型" class="headerlink" title="shell变量的数据类型"></a>shell变量的数据类型</h3><p><strong>变量声明</strong></p><p><strong>语法：</strong></p><ul><li><code>declare [选项][名称[=值]]</code></li><li><code>typeset [选项][名称[=值]]</code></li></ul><p><strong>目的：</strong><br>声明变量并初始化它们，设置它们的属性。在函数内部，会创建新的变量副本。使用<code>+</code>代替<code>-</code>关闭属性。</p><p><strong>输出：</strong></p><ul><li>没有名称和选项时，在当前shell环境中显示所有shell变量的名称和值。</li><li>使用选项时，显示具有特定属性的变量名称和其值。</li></ul><p><strong>常用选项&#x2F;特性：</strong></p><ul><li><code>-a</code>：将每个“名称”标记为数组</li><li><code>-f</code>：将每个“名称”标记为函数</li><li><code>-i</code>：将“名称”标记为整数</li><li><code>-r</code>：将“名称”标记为只读（无法通过<code>+x</code>关闭）</li><li><code>-x</code>：将“名称”标记为环境变量</li></ul><p>shell变量被默认为是字符串类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Input: <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span>Input: <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span>Input: <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token variable">$a</span>+<span class="token variable">$b</span>Input: <span class="token builtin class-name">echo</span> <span class="token variable">$c</span>Output: <span class="token number">1</span>+2<span class="token comment"># 正确输出加法公式</span>Input: <span class="token builtin class-name">declare</span> <span class="token parameter variable">-i</span> zInput: <span class="token assign-left variable">z</span><span class="token operator">=</span>a+bIuput: <span class="token builtin class-name">echo</span> <span class="token variable">$z</span>Output: <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算数拓展"><a href="#算数拓展" class="headerlink" title="算数拓展"></a>算数拓展</h3><ol><li><code>$()</code>: 这是命令替换（Command Substitution）的语法。当你想要将命令的输出赋值给一个变量，或者将命令的输出作为另一个命令的参数时，你会使用它。<code>$()</code> 的结果会被替换为括号内命令的输出。例如：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$files</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个例子中，<code>ls</code> 命令的输出会被赋值给变量 <code>files</code>，然后 <code>echo</code> 命令会打印出这个输出。</p><p>另外，<code>$()</code> 是反引号（<code>...</code>）的现代替代方式，两者在功能上是等价的。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$files</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><code>$((...))</code>: 这是算术扩展（Arithmetic Expansion）的语法。当你需要在 Bash 脚本中执行算术运算时，你会使用它。<code>$((...))</code> 的结果会被替换为括号内算术表达式的结果。例如：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>a <span class="token operator">+</span> b<span class="token variable">))</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，算术表达式 <code>a + b</code> 的结果（即 15）会被赋值给变量 <code>sum</code>，然后 <code>echo</code> 命令会打印出这个结果。</p><h3 id="命令替换-把命令结果存储成变量"><a href="#命令替换-把命令结果存储成变量" class="headerlink" title="命令替换(把命令结果存储成变量)"></a>命令替换(把命令结果存储成变量)</h3><ul><li><strong>变量名&#x3D;`cmd`</strong></li><li><code>cmd1 &quot;$(cmd2)&quot;</code><ul><li><code>$(...)</code>: 这是一个命令替换的语法，它允许你执行一个命令，并将该命令的输出作为另一个命令的输入。在这个例子中，<code>$(sort &quot;$filename&quot;)</code> 会执行 <code>sort &quot;$filename&quot;</code> 命令，该命令会对 <code>$filename</code> 文件的内容进行排序，并输出排序后的结果。这个输出随后被用作 <code>nl</code> 命令的输入。</li></ul></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2.png" alt="alt text"></p><h3 id="变量的输入输出"><a href="#变量的输入输出" class="headerlink" title="变量的输入输出"></a>变量的输入输出</h3><h4 id="变量的输入"><a href="#变量的输入" class="headerlink" title="变量的输入"></a>变量的输入</h4><p><code>read</code> 是一个在Linux中常用的命令，用于从标准输入或其他文件描述符中读取输入并赋值给变量。它的基本语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 变量名<span class="token punctuation">(</span>列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>选项</code> 是可选的，可以用来指定read命令的特定行为。</li><li><code>变量名</code> 是要将输入赋值给的变量。</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Please enter your name:"</span><span class="token builtin class-name">read</span> name<span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$name</span>. Welcome!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个示例中，当用户输入其名字并按下回车后，<code>read</code> 命令将输入的内容赋值给变量 <code>name</code>，然后 <code>echo</code> 命令使用这个变量进行输出。</p><p>常用选项包括：</p><ul><li><code>-p</code> ：用于显示提示信息而不是使用<code>echo</code>命令来显示。</li><li><code>-a</code> ：将输入分配到数组而不是普通变量。</li><li><code>-n</code> ：限制输入的字符数。</li><li><code>-s</code> ：用于静默模式，输入时不显示在屏幕上。</li><li><code>-t</code> ：设置等待时间，如果超过指定秒数没有输入，则读取终止。</li></ul><p><img src="/2024/06/21/linux-zhi-ling/read.png" alt="alt text"></p><h4 id="变量的输出-echo"><a href="#变量的输出-echo" class="headerlink" title="变量的输出-&gt;echo"></a>变量的输出-&gt;<code>echo</code></h4><p><code>echo</code> 命令用于在终端中显示文本或变量的内容。它的基本语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>字符串或变量<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>[选项]</code> 是可选的，可以用来指定特定行为，比如 <code>-e</code> 用于解释转义字符。</li><li><code>[字符串或变量]</code> 是要显示的文本或变量的内容。</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个示例中，<code>echo</code> 命令会在终端中显示 “Hello, World!”。</p><p>常用选项包括：</p><ul><li><code>-e</code> ：允许使用反斜杠转义字符。</li><li><code>-n</code> ：不在结尾添加换行符。</li><li><code>-E</code> ：关闭反斜杠转义功能，将反斜杠字符输出为原始字符。</li><li><code>&gt;&gt; 文件</code> ：将输出追加到指定文件。</li><li><code>-E</code> ：关闭 <code>-e</code> 选项开启的转义字符解释功能。</li></ul><h3 id="对数值进行处理"><a href="#对数值进行处理" class="headerlink" title="对数值进行处理"></a>对数值进行处理</h3><p>因为shell变量被默认为是字符串类型</p><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ul><li><code>declare</code></li><li><code>expr 表达式</code></li><li><code>let</code>命令<br><img src="/2024/06/21/linux-zhi-ling/expr&let.png" alt="alt text"></li></ul><h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><ul><li><code>bc</code>命令: 默认从标准输入读取小数<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1.1</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2.1</span><span class="token builtin class-name">echo</span> <span class="token variable">$a</span> + <span class="token variable">$b</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token comment"># 从标准输出中通过管道变成标准输入在交给bc命令</span>Output: <span class="token number">3.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><ul><li>Write a script that take a directory as a command-line argument and output the names of all directories within that directory.(1.sh)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">dirname</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token variable">$dirname</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^d/&#123;print $9&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Write a script that read a text filename from the keybard, sort the file and display it with the line number(2.sh)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input a file name:"</span> filename<span class="token function">sort</span> <span class="token variable">$filename</span> <span class="token operator">|</span> <span class="token function">nl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="shell脚本的注释"><a href="#shell脚本的注释" class="headerlink" title="shell脚本的注释"></a>shell脚本的注释</h3><p><code>#</code>用来注释一行,类似于python(除第一行外)</p><h3 id="编写shell脚本-1"><a href="#编写shell脚本-1" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><h4 id="shell表达式"><a href="#shell表达式" class="headerlink" title="shell表达式"></a>shell表达式</h4><p><img src="/2024/06/21/linux-zhi-ling/shell%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="alt text"></p><ul><li><p><code>-eq</code>: 两个整数相等</p></li><li><p><code>-ge</code>: 大于等于</p></li><li><p><code>-gt</code>: 大于</p></li><li><p><code>-le</code>: 小于等于</p></li><li><p><code>-lt</code>: 小于</p></li><li><p><code>-a</code>: AND</p></li><li><p><code>-o</code>: OR</p></li><li><p><code>!</code>: 非</p></li></ul><p>对表达式求值有两种方式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token comment"># 要有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash  </span>  <span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">10</span>  <span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">20</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$num1</span> <span class="token parameter variable">-lt</span> <span class="token variable">$num2</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$num1</span> is less than <span class="token variable">$num2</span>"</span>  <span class="token keyword">fi</span><span class="token comment">#! /usr/bin/bash</span><span class="token builtin class-name">read</span> a<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">'zero'</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"is Postive"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">" is Negative"</span><span class="token keyword">fi</span><span class="token comment"># if.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p><img src="/2024/06/21/linux-zhi-ling/%E5%BE%AA%E7%8E%AF%E8%AF%BB%E5%8F%96.png" alt="alt text"></p><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p><img src="/2024/06/21/linux-zhi-ling/if%E7%BB%93%E6%9E%84.png" alt="alt text"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># for循环格式 in可以不写,表示从命令行取参数列表</span><span class="token keyword">for</span> variable <span class="token punctuation">[</span>in argument-list<span class="token punctuation">]</span><span class="token keyword">do</span>   command-list<span class="token keyword">done</span><span class="token comment"># 实例</span><span class="token keyword">for</span> <span class="token for-or-select variable">name</span> <span class="token keyword">in</span> tom jack marry<span class="token keyword">do</span>   <span class="token builtin class-name">echo</span> <span class="token string">"hello <span class="token variable">$name</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>题目： 输出命令行参数之和</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">do</span>    <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $sum + $i<span class="token variable">`</span></span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>题目: 从1加到100,输出结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> n<span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> $n<span class="token variable">)</span></span><span class="token keyword">do</span>        <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $sum + $i<span class="token variable">`</span></span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>题目: 批量的给文件改名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash  </span>  <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入目录（默认为当前目录）: "</span> <span class="token function">dir</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$dir</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token string">"./"</span>  <span class="token comment"># 如果目录为空，则默认为当前目录  </span><span class="token keyword">fi</span>    <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">filename</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$dir</span>"</span>*.txt<span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token comment"># 注意这里使用引号包围变量和模式  </span>    <span class="token builtin class-name">echo</span> <span class="token string">"重命名 <span class="token variable">$filename</span> 到 <span class="token variable">$i</span>.txt，y 或 n"</span>      <span class="token builtin class-name">read</span> choice      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$choice</span>"</span> <span class="token operator">=</span> <span class="token string">"y"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>          <span class="token function">mv</span> <span class="token string">"<span class="token variable">$filename</span>"</span> <span class="token string">"<span class="token variable">$dir</span><span class="token variable">$i</span>.txt"</span>  <span class="token comment"># 确保重命名后的文件路径正确  </span>        <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>      <span class="token keyword">fi</span>  <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> expression<span class="token keyword">do</span>   command-list<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目: 输入密码检验<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#/bin/bash</span><span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token string">"007"</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input your password"</span> password<span class="token comment"># 变量要加双引号,防止用户输入出现空格导致异常</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$password</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$passwd</span>"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input your password"</span> password<span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"Congradulations!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>while循环中的break和continue<br><img src="/2024/06/21/linux-zhi-ling/break_continue.png" alt="alt text"></li></ul><h4 id="case分支语句"><a href="#case分支语句" class="headerlink" title="case分支语句"></a>case分支语句</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 格式</span><span class="token keyword">case</span> test-string <span class="token keyword">in</span>pattern1<span class="token punctuation">)</span>   command-list1            <span class="token punctuation">;</span><span class="token punctuation">;</span>pattern2<span class="token punctuation">)</span>   command-list2            <span class="token punctuation">;</span><span class="token punctuation">;</span>patternN<span class="token punctuation">)</span>   command-listN            <span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PTA习题"><a href="#PTA习题" class="headerlink" title="PTA习题"></a>PTA习题</h2><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9801.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> a b other  <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>a <span class="token operator">+</span> b<span class="token variable">))</span></span>  <span class="token builtin class-name">echo</span> <span class="token variable">$sum</span><span class="token comment"># 解法2</span><span class="token builtin class-name">read</span> a b other  <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span>  <span class="token builtin class-name">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9802.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash  </span><span class="token comment"># 提示用户输入密码  </span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"输入密码password: "</span>  <span class="token builtin class-name">read</span> <span class="token parameter variable">-s</span> password  <span class="token comment"># -s 选项使输入不回显到屏幕上  </span><span class="token builtin class-name">echo</span>  <span class="token comment"># 打印一个空行以分隔密码输入和后续输出  </span>  <span class="token comment"># 检查密码是否正确  </span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$password</span>"</span> <span class="token operator">=</span> <span class="token string">"pta12345"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"密码正确"</span>  <span class="token keyword">else</span>      <span class="token builtin class-name">echo</span> <span class="token string">"密码错误"</span>  <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9803.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token parameter variable">-o</span> <span class="token variable">$n</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$n</span> indian boy."</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$n</span> indian boys."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9804.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> <span class="token parameter variable">-lt</span> <span class="token number">0</span> <span class="token parameter variable">-o</span> <span class="token variable">$n</span> <span class="token parameter variable">-gt</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输入整数小于0或大于100"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输入整数在0到100之间（含）"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9805.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> a<span class="token comment"># 算数拓展</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$((</span>$a <span class="token operator">%</span> <span class="token number">2</span><span class="token variable">))</span></span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span>是偶数"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span>是奇数"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9806.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读取用户输入的文件名</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入文件名："</span> filename<span class="token comment"># 判断文件是否为目录</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$filename</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Yes"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"No"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9807.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token builtin class-name">read</span> num    <span class="token comment"># 读取用户输入的数字</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>   <span class="token comment"># 如果输入为0，跳出循环</span>    <span class="token keyword">fi</span>    <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>sum <span class="token operator">+</span> num<span class="token variable">))</span></span>  <span class="token comment"># 求和</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token variable">$sum</span>   <span class="token comment"># 输出求和结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/linux-zhi-ling/%E4%B9%A0%E9%A2%9808.png" alt="alt text"></p><ul><li><code>解答</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">chance</span><span class="token operator">=</span><span class="token number">3</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$chance</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Enter password: "</span> <span class="token function">passwd</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$passwd</span>"</span> <span class="token operator">=</span> <span class="token string">"zust"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Success"</span>        <span class="token builtin class-name">exit</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Password error"</span>        <span class="token assign-left variable">chance</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>chance <span class="token operator">-</span> <span class="token number">1</span><span class="token variable">))</span></span>        <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"Login failed"</span><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="期末考试exam程序源代码"><a href="#期末考试exam程序源代码" class="headerlink" title="期末考试exam程序源代码"></a>期末考试exam程序源代码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">paperdir</span><span class="token operator">=</span><span class="token string">"/tmp"</span><span class="token assign-left variable">select_first</span><span class="token operator">=</span>True<span class="token assign-left variable">command_first</span><span class="token operator">=</span>True<span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clear</span>        <span class="token keyword">while</span> <span class="token boolean">true</span>        <span class="token keyword">do</span>                <span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span> <span class="token string">MENU                        1) select                        2) command                        3) script                        0) quitMENU</span>                <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"please input your selection:"</span> section                <span class="token builtin class-name">echo</span>                <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$section</span>"</span> <span class="token keyword">in</span>                        <span class="token number">1</span><span class="token punctuation">)</span> selection<span class="token punctuation">;</span><span class="token punctuation">;</span>                        <span class="token number">2</span><span class="token punctuation">)</span> <span class="token builtin class-name">command</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>                        <span class="token number">3</span><span class="token punctuation">)</span> script <span class="token punctuation">;</span><span class="token punctuation">;</span>                        <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>                        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"input error!"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token keyword">esac</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token function-name function">selection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token assign-left variable">paper</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$paperdir</span>/p1"</span>        <span class="token function">grep</span> <span class="token string">"^#"</span> <span class="token variable">$paper</span>        <span class="token assign-left variable">select_ans</span><span class="token operator">=~</span>/1.ans        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$select_first</span>"</span> <span class="token operator">=</span> <span class="token string">"True"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token assign-left variable">snum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">'^[0-9]\&#123;1,2\&#125;\.'</span> $paperdir/p1<span class="token variable">`</span></span>                gen_ans <span class="token number">1</span> <span class="token variable">$snum</span>        <span class="token keyword">fi</span>        <span class="token assign-left variable">select_first</span><span class="token operator">=</span>False        <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token boolean">true</span>        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span>                <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;curr&#125;</span>p"</span> $select_ans <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">'.'</span> <span class="token parameter variable">-f1</span><span class="token variable">`</span></span>                <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">"/^<span class="token variable">$pid</span>\./,/^$/p"</span> <span class="token variable">$paper</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/^[0-9]\&#123;1,2\&#125;./<span class="token variable">$curr</span>./"</span>                <span class="token assign-left variable">youranswer</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token string">"^"</span>$pid<span class="token string">"\."</span> $select_ans <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-f2</span> -d<span class="token string">" "</span><span class="token variable">`</span></span>                <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"input your answer(<span class="token variable">$youranswer</span>): "</span> answer                <span class="token keyword">case</span> <span class="token variable">$answer</span> <span class="token keyword">in</span>                <span class="token number">0</span><span class="token punctuation">)</span>                        main                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span>-2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-ge</span> <span class="token number">1</span> <span class="token parameter variable">-a</span> <span class="token variable">$curr</span> <span class="token parameter variable">-le</span> <span class="token variable">$snum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$answer</span>"</span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token punctuation">[</span>a-d<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>A-D<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token assign-left variable">answer</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $answer <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">"[a-z]"</span> <span class="token string">"[A-Z]"</span><span class="token variable">`</span></span>                        <span class="token function">sed</span>  <span class="token parameter variable">-i</span> <span class="token string">"s/^<span class="token variable">$pid</span>\. .*/<span class="token variable">$pid</span>\. <span class="token variable">$answer</span>/"</span> <span class="token variable">$select_ans</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-lt</span> <span class="token variable">$snum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr + <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                -<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr - <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token string">""</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-lt</span> <span class="token variable">$snum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr + <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                *<span class="token punctuation">)</span>                        <span class="token builtin class-name">echo</span> <span class="token string">"input the correct problem number or answer!"</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token keyword">esac</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token function-name function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token assign-left variable">paper</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$paperdir</span>/p2"</span>        <span class="token assign-left variable">cmd_ans</span><span class="token operator">=~</span>/2.ans        <span class="token function">grep</span> <span class="token string">"^#"</span> <span class="token variable">$paper</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$command_first</span>"</span> <span class="token operator">=</span> <span class="token string">"True"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token assign-left variable">cnum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">'^[0-9]\&#123;1,2\&#125;\.'</span> $paperdir/p2<span class="token variable">`</span></span>                <span class="token comment">#gen_ans 2 8 $cnum</span>                gen_ans <span class="token number">2</span> <span class="token variable">$cnum</span>        <span class="token keyword">fi</span>        <span class="token assign-left variable">command_first</span><span class="token operator">=</span>False        <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token boolean">true</span>        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span>                <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;curr&#125;</span>p"</span> $cmd_ans <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">'.'</span> <span class="token parameter variable">-f1</span><span class="token variable">`</span></span>                <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">"/^<span class="token variable">$pid</span>\./,/^$/p"</span> <span class="token variable">$paper</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/^<span class="token variable">$pid</span>\./<span class="token variable">$curr</span>./"</span>                <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"ANS: "</span>                <span class="token function">grep</span> <span class="token string">"^<span class="token variable">$pid</span>\."</span> <span class="token variable">$cmd_ans</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/^<span class="token variable">$pid</span>\.//"</span>                <span class="token builtin class-name">echo</span>                <span class="token builtin class-name">read</span> <span class="token parameter variable">-rep</span> <span class="token string">"input your answer: "</span> answer                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-eq</span> <span class="token variable">$cnum</span> <span class="token punctuation">]</span>                <span class="token keyword">then</span>                   <span class="token builtin class-name">echo</span> <span class="token string">'============  Last problem. This is my bottom line. ================'</span>                <span class="token keyword">fi</span>                <span class="token keyword">case</span> <span class="token variable">$answer</span> <span class="token keyword">in</span>                <span class="token number">0</span><span class="token punctuation">)</span>                        main                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$answer</span> <span class="token parameter variable">-le</span> <span class="token variable">$cnum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$answer</span>"</span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                -<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr - <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token string">""</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-lt</span> <span class="token variable">$cnum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr + <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                *<span class="token punctuation">)</span>                        <span class="token comment">#answer=$&#123;answer//\\/\\\\&#125;</span>                        <span class="token assign-left variable">answer</span><span class="token operator">=</span><span class="token variable">$&#123;answer<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">#</span><span class="token operator">/</span>\\<span class="token operator">#</span>&#125;</span>                        <span class="token assign-left variable">answer</span><span class="token operator">=</span><span class="token variable">$&#123;answer<span class="token operator">/</span><span class="token operator">/</span>&amp;<span class="token operator">/</span>\\&amp;&#125;</span>                        <span class="token builtin class-name">echo</span> <span class="token variable">$answer</span>                        <span class="token function">sed</span>  <span class="token parameter variable">-i</span> <span class="token string">"s#^<span class="token variable">$pid</span>\. .*#<span class="token variable">$pid</span>\. <span class="token variable">$answer</span>#"</span> <span class="token variable">$cmd_ans</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-lt</span> <span class="token variable">$cnum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr + <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token keyword">esac</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token function-name function">script</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token assign-left variable">paper</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$paperdir</span>/p3"</span>        <span class="token function">grep</span> <span class="token string">"^#"</span> <span class="token variable">$paper</span>        <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token assign-left variable">scnum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">'^[0-9]\&#123;1,2\&#125;\.'</span> $paperdir/p3<span class="token variable">`</span></span>        <span class="token keyword">while</span> <span class="token boolean">true</span>        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span>                <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">"/^<span class="token variable">$curr</span>\./,/^$/p"</span> <span class="token variable">$paper</span>                <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"input your selection( n(nano)/v(vim) to edit the file ): "</span> answer                <span class="token keyword">case</span> <span class="token variable">$answer</span> <span class="token keyword">in</span>                <span class="token number">0</span><span class="token punctuation">)</span>                        main                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token punctuation">[</span><span class="token number">1</span>-<span class="token variable">$scnum</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$answer</span>"</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                -<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr - <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                n<span class="token punctuation">)</span>                        <span class="token function">nano</span> ~/<span class="token variable">$curr</span>.sh                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token function">v</span><span class="token punctuation">)</span>                        <span class="token function">vim</span> ~/<span class="token variable">$curr</span>.sh                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token string">""</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$curr</span> <span class="token parameter variable">-lt</span> <span class="token variable">$scnum</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                                <span class="token assign-left variable">curr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $curr + <span class="token number">1</span><span class="token variable">`</span></span>                        <span class="token keyword">fi</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                *<span class="token punctuation">)</span>                        <span class="token builtin class-name">echo</span> <span class="token string">"input the correct number"</span>                        <span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token keyword">esac</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token function-name function">makefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token assign-left variable">paper</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$paperdir</span>/p4"</span>        <span class="token function">cat</span> <span class="token variable">$paper</span>        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"press 0 to quit or any other key to start edit the makefile...: "</span> choice        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$choice</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                main        <span class="token keyword">else</span>                <span class="token function">vi</span> makefile                main        <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">gen_ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token assign-left variable">ans_file</span><span class="token operator">=~</span>/<span class="token variable">$1</span>.ans        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$ans_file</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token builtin class-name">return</span>                <span class="token builtin class-name">echo</span> <span class="token parameter variable">-ne</span>  <span class="token string">"There is a answer sheet in your home directory.<span class="token entity" title="\n">\n</span>Do you want to recreate it? (y/n): "</span>                <span class="token builtin class-name">read</span> ans                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ans</span>"</span> <span class="token operator">=</span> <span class="token string">"Y"</span> <span class="token parameter variable">-o</span> <span class="token string">"<span class="token variable">$ans</span>"</span> <span class="token operator">=</span> <span class="token string">"y"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                        <span class="token function">shuf</span> <span class="token parameter variable">-i</span> <span class="token number">1</span>-<span class="token variable">$2</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/$/. /'</span>  <span class="token operator">></span> <span class="token variable">$ans_file</span>                <span class="token keyword">fi</span>        <span class="token keyword">else</span>                <span class="token function">shuf</span> <span class="token parameter variable">-i</span> <span class="token number">1</span>-<span class="token variable">$2</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/$/. /'</span>  <span class="token operator">>></span> <span class="token variable">$ans_file</span>        <span class="token keyword">fi</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-gt</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token function">seq</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $2 + <span class="token number">1</span><span class="token variable">`</span></span> <span class="token variable">$3</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/$/. /'</span>  <span class="token operator">>></span> <span class="token variable">$ans_file</span>        <span class="token keyword">fi</span>        <span class="token comment">#seq -f '%g. ' 1 $2  >> $select_ans</span><span class="token punctuation">&#125;</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/06/21/shu-ju-ku/"/>
      <url>/2024/06/21/shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系数据库，是指采用了关系模型来组织数据的数据库简单来说，关系模型指的就是二维表格模型</p><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>非关系型数据库，又被称为NoSQL(Not Only SQL),意为不仅仅是SQL,对<code>NOSQL</code>最普遍的定义是<code>非关联型的</code>，强调Key-Value的方式存储。</p><h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p><code>数据库管理系统</code>(Database Management System,简称<code>DBMS</code>)是为管理数据库而设计的软件系统</p><ul><li>包括三大部分构成。<ul><li>数据库文件集合:主要是一系列的数据文件，作用是存储数据。</li><li>数据库服务器:主要负责对数据文件以及文件中的数据进行管理。</li><li>数据库客户端:主要负责和服务端通信，向服务端传输数据或者从服务端获取数据。</li></ul></li></ul><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>数据库客户端和数据库服务端怎么通讯呢?<br>数据库客户端通过“特殊的语言”告诉服务端，客户端想要做什么.这个专门的语言就是SQL语句</p><ul><li><code>SQL(Structured Query Language)</code>是结构化査询语言，是一种用来操作<code>RDBMS(Relational Database Management System 所谓的关系型数据库管理系统RDBMS)</code>的数据库语言。</li><li>当前几乎所有关系型数据库都支持使用SQL语言进行操作,也就是说可以通过 SQL 操作 oracle,sql server,mysql,sqlite 等等所有的关系型的数据库。</li></ul><h2 id="关系型数据库中核心元素（主键定义）"><a href="#关系型数据库中核心元素（主键定义）" class="headerlink" title="关系型数据库中核心元素（主键定义）"></a>关系型数据库中核心元素（主键定义）</h2><ul><li>字段:一列数据类型相同的数据</li><li>记录:一行记录某个事物的完整信息的数据</li><li>数据表:有若干字段和记录组成</li><li>数据库:由若干数据表组成</li><li>主键:唯一标识一行记录的字段（可以由多个字段组成）<br> <img src="/2024/06/21/shu-ju-ku/main_element.png" alt="alt text"></li></ul><h2 id="搭建mysql环境"><a href="#搭建mysql环境" class="headerlink" title="搭建mysql环境"></a>搭建mysql环境</h2><ul><li><p>安装 MySQL 数据库服务端：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 MySQL 数据库客户端：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install mysql-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 MySQL 数据库：</p><pre class="line-numbers language-none"><code class="language-none">sudo service mysql start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>停止 MySQL 数据库：</p><pre class="line-numbers language-none"><code class="language-none">sudo service mysql stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看 MySQL 数据库启动状态：</p><pre class="line-numbers language-none"><code class="language-none">ps ajx|grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="MySQL配置文件-了解"><a href="#MySQL配置文件-了解" class="headerlink" title="MySQL配置文件(了解)"></a>MySQL配置文件(了解)</h3><p>配置文件目录为&#x2F;etc&#x2F;mysql&#x2F;mysql.cnf:<br>进入mysql.conf.d目录，打开mysql.cnf，可以看到配置项:</p><h4 id="主要配置选项"><a href="#主要配置选项" class="headerlink" title="主要配置选项"></a>主要配置选项</h4><ul><li>bind-address表示服务器绑定的ip，默认为127.0.0.1</li><li>port表示端口，默认为3306</li><li>datadir表示数据库目录，默认为&#x2F;var&#x2F;lib&#x2F;mysql</li><li>general_log_file表示普通日志，默认为&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql.log</li><li>log_error表示错误日志，默认为&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log</li></ul><h2 id="MySql数据类型"><a href="#MySql数据类型" class="headerlink" title="MySql数据类型"></a>MySql数据类型</h2><ul><li>枚举类型<br>枚举类型enum，在定义字段时就预告规定好固定的几个值，然后插入记录时值只能在这几个固定好的值中选择一个<ul><li>语法定义:<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">gender enum(&#39;男&#39;,&#39;女&#39;,&#39;妖&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>应用场景:<br>当值是几个固定可选时，比如:性别、星期、月份、表示状态时(比如:是、否)</li></ul></li><li>decimal: 定点数<ul><li>decimal(5,2)代表共5位数字，其中2位是小数，比如:888.88</li></ul></li><li>char:定长字符串<ul><li>char(10):不管实际使用,必然占用10个字符空间</li></ul></li><li>varchar:变长字符串<ul><li>varchar(10):根据实际使用占用空间</li></ul></li></ul><h2 id="数据完整性和约束"><a href="#数据完整性和约束" class="headerlink" title="数据完整性和约束"></a>数据完整性和约束</h2><h3 id="1-数据完整性"><a href="#1-数据完整性" class="headerlink" title="1.数据完整性"></a>1.数据完整性</h3><p><code>数据完整性</code>用于保证数据的<code>正确性</code>。系统在更新、插入或除等操作时都要检查数据的完整性，核实其约束条件。<br>参照完整性<br><strong>参照完整性</strong>属于表间规则。在更新、插入或者删除记录时，如果只改其一，就会影响数据的完整性。如<strong>删除表2的某记录后</strong>，表1的相应记录未删除，致使这些记录成为孤立记录。</p><h3 id="2-约束"><a href="#2-约束" class="headerlink" title="2.约束"></a>2.约束</h3><table><thead><tr><th>约束类型</th><th>约束说明</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束(设置非空约束，该字段不能为空)</td></tr><tr><td>PRIMARY KEY</td><td>主键约束(唯一性，非空性)</td></tr><tr><td>UNIQUE KEY</td><td>唯一约束(唯一性，可以空，但只能有一个)</td></tr><tr><td>DEFAULT</td><td>默认约束(该数据的默认值)</td></tr><tr><td>FOREIGN KEY</td><td>外键约束(需要建立两表间的关系)</td></tr></tbody></table><h2 id="MySql基本操作"><a href="#MySql基本操作" class="headerlink" title="MySql基本操作"></a>MySql基本操作</h2><ul><li>快捷键<ol><li><code>ctrl + a</code>  快速回到行首</li><li><code>ctrl + e</code>  快速回到行尾</li><li><code>ctrl + l</code>  清屏</li><li><code>ctrl + c</code>  回车 结束</li></ol></li><li>数据库登陆和连接<ol><li><code>mysql -uroot -p密码</code>  root是根用户(超级用户)</li><li><code>quit/exit/ctrl + d</code>  退出mysql</li></ol></li><li>显示数据库信息<ol><li><code>select version();</code>  显示数据库版本</li><li><code>select now();</code>  显示时间</li></ol></li></ul><h2 id="数据库基本操作命令"><a href="#数据库基本操作命令" class="headerlink" title="数据库基本操作命令"></a>数据库基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>show databases;</td><td>查看所有数据库</td><td>show databases;</td></tr><tr><td>select database();</td><td>查看当前使用的数据库</td><td>select database();</td></tr><tr><td>create database数据库名 charset&#x3D;utf8;</td><td>创建数据库</td><td>create database python charset&#x3D;utf8;</td></tr><tr><td>use 数据库名;</td><td>使用数据库</td><td>use python;</td></tr><tr><td>drop database 数据库名;</td><td>删除数据库-慎重</td><td>drop database python;</td></tr></tbody></table><p>在MySQL中，您可以使用以下SQL语句来查看创建数据库的SQL语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条SQL语句将显示创建指定数据库的SQL语句，包括数据库名称和其默认字符集。您可以将 <code>database_name</code> 替换为实际的数据库名称来查看该数据库的创建语句。</p><h2 id="数据表基本操作命令"><a href="#数据表基本操作命令" class="headerlink" title="数据表基本操作命令"></a>数据表基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>show tables;</td><td>查看当前数据库中所有表</td></tr><tr><td>desc 表名;</td><td>查看表结构</td></tr><tr><td>show create table 表名</td><td>查看表的创建语句-详细过程</td></tr></tbody></table><ul><li>创建表<ul><li>int unsigned 无符号整形</li><li>auto_increment 表示自动增长</li><li>not null 表示不能为空</li><li>primary key 表示主键</li><li>default 默认值</li><li>create table 数据表名字(字段 类型 约束[，字段 类型 约束]);</li></ul></li></ul><h2 id="数据表基本操作命令-1"><a href="#数据表基本操作命令-1" class="headerlink" title="数据表基本操作命令"></a>数据表基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>ALTER TABLE 表名 ADD 列名 类型;</code></td><td><strong>添加字段</strong>：向表中增加一个新的列，需指定列名和数据类型。</td></tr><tr><td><code>ALTER TABLE 表名 CHANGE 原名 新名 类型及约束;</code></td><td><strong>重命名字段</strong>：更改现有列的名字，并可同时修改其数据类型和约束条件。</td></tr><tr><td><code>ALTER TABLE 表名 MODIFY 列名 类型及约束;</code></td><td><strong>修改字段类型</strong>：更改指定列的数据类型及约束条件，不改变列名。</td></tr><tr><td><code>ALTER TABLE 表名 DROP 列名;</code></td><td><strong>删除字段</strong>：从表中移除指定的列。</td></tr><tr><td><code>DROP TABLE 表名;</code></td><td><strong>删除表</strong>：完全删除指定的表及其所有数据，这是一个不可逆的操作。</td></tr></tbody></table><h2 id="数据增删改查操作"><a href="#数据增删改查操作" class="headerlink" title="数据增删改查操作"></a>数据增删改查操作</h2><ul><li>增加数据</li></ul><table><thead><tr><th>命令形式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>INSERT INTO 表名 VALUES (...);</code></td><td><strong>全列插入</strong>：值的顺序需与表结构中的字段顺序一致。</td><td><code>INSERT INTO Students VALUES (&#39;John Doe&#39;, 20, &#39;Computer Science&#39;);</code></td></tr><tr><td><code>INSERT INTO 表名 (列1,...) VALUES (值1,...);</code></td><td><strong>部分列插入</strong>：仅指定列和对应的值，值的顺序与列出的列顺序对应。</td><td><code>INSERT INTO Students (Name, Major) VALUES (&#39;Jane Doe&#39;, &#39;Mathematics&#39;);</code></td></tr><tr><td><code>INSERT INTO 表名 VALUES (...),(...)...;</code></td><td><strong>一次性插入多行数据</strong>：在单个命令中插入多行，每行数据用逗号分隔。所有行都必须遵循全列插入的规则。</td><td><code>INSERT INTO Students VALUES (&#39;Alice Smith&#39;, 19, &#39;Physics&#39;), (&#39;Bob Johnson&#39;, 21, &#39;Chemistry&#39;);</code></td></tr><tr><td><code>INSERT INTO 表名 (列1,...) VALUES (值1,...),(值1,...)...;</code></td><td><strong>部分列多行插入</strong>：结合了部分列插入和一次性插入多行的特点，每对值集对应一行，并指定了列。</td><td><code>INSERT INTO Students (Name, Major) VALUES (&#39;Eva Brown&#39;, &#39;Biology&#39;), (&#39;Sam Wilson&#39;, &#39;Engineering&#39;);</code></td></tr></tbody></table><ul><li>修改查询数据</li></ul><table><thead><tr><th>命令形式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>SELECT * FROM 表名;</code></td><td><strong>查询所有列数据</strong>：从指定表中选取所有列的所有数据行。</td><td><code>SELECT * FROM Employees;</code></td></tr><tr><td><code>SELECT 列1,列2... FROM 表名;</code></td><td><strong>查询指定列数据</strong>：仅选取指定列的数据行。</td><td><code>SELECT FirstName, LastName FROM Employees;</code></td></tr><tr><td><code>UPDATE 表名 SET 列1=值1,列2=值2... WHERE 条件;</code></td><td><strong>修改数据</strong>：更新表中满足指定条件的行的列值。</td><td><code>UPDATE Employees SET Salary=50000 WHERE Department=&#39;Sales&#39;;</code></td></tr><tr><td><code>SELECT 字段 as &quot;别名&quot;, 字段 as &quot;别名&quot;... FROM 表名;</code></td><td><strong>查询指定列(可以使用as为列或表指定别名)数据</strong>：仅选取指定列的数据行,并起别名</td><td><code>SELECT FirstName as &quot;姓&quot;, LastName as &quot;名&quot; FROM Employees;</code></td></tr><tr><td><code>SELECT 别名.字段 FROM 表名 AS 表的别名</code></td><td><strong>给表起别名</strong></td><td><code>SELECT s.name FROM students AS s;</code></td></tr><tr><td><code>SELECT DISTINCT 字段 FROM 表名;  </code></td><td><strong>去重查询</strong></td><td><code>SELECT DISTINCT gender FROM students;</code></td></tr></tbody></table><ul><li>删除数据</li></ul><ol><li>物理删除</li></ol><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>delete from 表名 where 条件;</td><td>删除数据</td></tr></tbody></table><ol><li>逻辑删除<br>用一个字段来表示 这条信息是否已经不能再使用了<br>给 students 表添加<code>is_delete</code> 字段 bit 类型<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">举例:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">add</span> is_delete <span class="token keyword">BIT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> students <span class="token keyword">SET</span> is_delete<span class="token operator">=</span>l <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-WHERE关键字"><a href="#1-WHERE关键字" class="headerlink" title="1.WHERE关键字"></a>1.WHERE关键字</h3><h4 id="1-1-where语句的作用"><a href="#1-1-where语句的作用" class="headerlink" title="1.1 where语句的作用"></a>1.1 where语句的作用</h4><p>使用where子句对表中的数据筛选，结果为true的记录会出现在结果集中</p><ul><li><p>条件查询语法:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span><span class="token comment">-- eg:  </span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> students <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>where</strong>后面支持<strong>多种运算符</strong>，进行条件的处理:</p><ul><li>比较运算符</li><li>逻辑运算符</li><li>模糊查询</li><li>范围查询</li><li>空判断</li></ul></li></ul><h4 id="1-2-比较运算符"><a href="#1-2-比较运算符" class="headerlink" title="1.2 比较运算符"></a>1.2 比较运算符</h4><p>常见的比较运算符</p><ul><li>等于: <code>=</code></li><li>大于: <code>&gt;</code></li><li>大于等于: <code>&gt;=</code></li><li>小于: <code>&lt;</code></li><li>小于等于: <code>&lt;=</code></li><li>不等于: <code>!=</code> 或 <code>&lt;&gt;</code><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- eg:  其他运算符类似</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> students <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> students <span class="token keyword">where</span> age <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="1-3-逻辑运算符"><a href="#1-3-逻辑运算符" class="headerlink" title="1.3 逻辑运算符"></a>1.3 逻辑运算符</h4><ul><li><code>AND</code> 表示有多个条件时，多个条件必须同时成立(值为True)</li><li><code>OR</code>表示有多个条件时，满足任意一个条件时成立</li><li><code>NOT</code>表示取反操作</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 18和28岁之间的所有学生信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token operator">and</span> age <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token comment">-- 失败(错误格式):</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> <span class="token number">18</span><span class="token operator">&lt;</span>age<span class="token operator">&lt;</span><span class="token number">28</span><span class="token punctuation">;</span><span class="token comment">-- 18岁以上的女性</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> age <span class="token operator">></span> l8 <span class="token operator">and</span> gender<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">;</span><span class="token comment">-- 18以上或者身高高过180(包含)以上</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token operator">or</span> height <span class="token operator">>=</span> <span class="token number">180</span><span class="token punctuation">;</span><span class="token comment">-- not</span><span class="token comment">-- 不在 18岁以上的女性 这个范围内的信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> <span class="token operator">not</span><span class="token punctuation">(</span>age <span class="token operator">></span> l8 <span class="token operator">and</span> gender<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 注意:使用 "()"   运算符优先级问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-模糊查询"><a href="#1-4-模糊查询" class="headerlink" title="1.4 模糊查询"></a>1.4 模糊查询</h4><ul><li><code>like</code>关键字</li><li>like后跟<code>% </code>表示任意多个任意字符,<code>_</code>表示一个任意字符<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">查询姓名中 以“小”开始的名字<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">"小%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="1-5-范围查询"><a href="#1-5-范围查询" class="headerlink" title="1.5 范围查询"></a>1.5 范围查询</h4><ul><li>知道<code>between-and</code>和<code>in</code>的区别</li><li>范围查询分为连续范围查询和非连续范围查询:<br>in 表示在一个非连续的范围内<br>between .. and .. 表示在一个连续的范围内</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询编号为3至8的学生:</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> id <span class="token operator">between</span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">-- 注意:select* from students where age not(petween 18 and 34);是错误的</span><span class="token comment">-- 查询年龄为18、34的姓名</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> students <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-where之空值判断"><a href="#1-6-where之空值判断" class="headerlink" title="1.6 where之空值判断"></a>1.6 where之空值判断</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> height <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="order排序查询"><a href="#order排序查询" class="headerlink" title="order排序查询"></a>order排序查询</h3><ul><li><code>asc</code> 升序</li><li><code>desc</code> 降序<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> students <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span> <span class="token operator">and</span> gender <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">desc</span><span class="token punctuation">,</span> age <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token comment">-- 字段1 排序规则 ，字段2 排序规则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>可以按照多个字段排序，当第一字段数值相同，比较第二个字段，以此类推</li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>count(字段)</code></td><td>计算包含非NULL值的指定字段的总行数</td></tr><tr><td><code>max(字段)</code></td><td>求指定字段的最大值</td></tr><tr><td><code>min(字段)</code></td><td>求指定字段的最小值</td></tr><tr><td><code>sum(字段)</code></td><td>求指定字段所有值的总和</td></tr><tr><td><code>avg(字段)</code></td><td>求指定字段的平均值</td></tr></tbody></table><h4 id="7-2-聚合函数的作用和特点"><a href="#7-2-聚合函数的作用和特点" class="headerlink" title="7.2 聚合函数的作用和特点"></a>7.2 聚合函数的作用和特点</h4><p><strong>聚合函数作用:聚合函数会把当前所在表当做一个组进行统计</strong><br>聚合函数有以下几个特点:</p><ul><li>每个组函数接收一个参数(字段名或者表达式)</li><li>统计结果中默认忽略字段为NULL的记录</li><li>不允许出现嵌套 比如sum(max(xx))<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询男性有多少人</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> gender<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 计算平均年龄</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>round</code>函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- round(123.23, 1)表示保留1位小数</span><span class="token comment">-- 对年龄求平均值并保留两位小数</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="group分组查询"><a href="#group分组查询" class="headerlink" title="group分组查询"></a>group分组查询</h3><h4 id="1-1-什么是分组"><a href="#1-1-什么是分组" class="headerlink" title="1.1 什么是分组"></a>1.1 什么是分组</h4><p>什么是分组?</p><p>所谓的分组就是将一个“数据集”划分成若干个“小区域”,然后针对若干个“小区域”进行数据处理。</p><p><strong>group by分组</strong></p><blockquote><p><strong>使用特点</strong><br>  <em>group by的含义</em>:将查询结果按照1个或多个字段进行分组，字段值相同的为一组<br>  <em>group by</em>可用于<strong>单个字段</strong>分组，也可用于<strong>多个字段</strong>分组</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 按照性别分组，查询所有的性别</span><span class="token keyword">select</span> gender <span class="token keyword">from</span> students <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>gender <span class="token keyword">from</span> students <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span>错误<span class="token comment">-- 计算每种性别中的人数</span><span class="token keyword">select</span> gender<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> students <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span><span class="token comment">-- group_concat()函数</span><span class="token comment">-- 查询同种性别中的姓名</span><span class="token keyword">select</span> <span class="token keyword">group</span> concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>gender <span class="token keyword">from</span> students <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span><span class="token comment">-- 查询平均年龄超过30岁的性别，以及姓名 having avg(age)> 30(重点)</span><span class="token keyword">select</span> <span class="token keyword">group</span> concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>gender <span class="token keyword">from</span> students <span class="token keyword">group</span> <span class="token keyword">by</span> gender <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- with rollup 汇总的作用(了解)</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gender <span class="token keyword">from</span> students <span class="token keyword">group</span> <span class="token keyword">by</span> gender <span class="token keyword">with rollup</span><span class="token punctuation">;</span><span class="token comment">-- with rollup的作用是:在数据表最后新增一行，来记录当前表中该字段对应的操作结果，一般是汇总结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit-限制-分页查询"><a href="#limit-限制-分页查询" class="headerlink" title="limit(限制)分页查询"></a>limit(限制)分页查询</h3><h4 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h4><p><code>Q</code> select * from 淘宝某个数据表，会产生什么现象?<br><code>A</code> 由于数据过多很有可能直接死机了</p><h4 id="2-limit限制查询"><a href="#2-limit限制查询" class="headerlink" title="2.limit限制查询"></a>2.limit限制查询</h4><p>可以使用 <strong>limit</strong> 限制取出记录的数量，但 <strong>limit</strong> 要写在 sql语句的最后</p><p><strong>语法</strong></p><ul><li>limit 起始记录,记录数</li></ul><p><strong>说明:</strong></p><ul><li>起始记录是指从第几条记录开始取，第一条记录的下标是0</li><li>记录数是指从起始记录开始向后依次取的记录数</li></ul><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="1-为什么要使用连接查询"><a href="#1-为什么要使用连接查询" class="headerlink" title="1.为什么要使用连接查询"></a>1.为什么要使用连接查询</h4><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接查询:查询的结果为两个表符合条件匹配到的数据<br><img src="/2024/06/21/shu-ju-ku/%E5%86%85%E8%BF%9E%E6%8E%A5.png" alt="alt text"></p><ul><li>语法:<br>select 字段 from 表1 inner join 表2 on 表1.字段1&#x3D;表2.字段2</li><li>注意:<ol><li>内连接:根据连接条件取出两个表“交集”</li><li>on 是连接条件， where是连接后筛选条件</li></ol></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><strong>左外连接查询</strong>:查询数据为两个表匹配到的数据和左表的数据</p><ul><li>注意: 对于右表中不存在的数据使用null填充<br><img src="/2024/06/21/shu-ju-ku/%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5.png" alt="alt text"></li><li>语法<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 左连接:</span>主表 <span class="token keyword">left</span> <span class="token keyword">join</span> 从表 <span class="token keyword">on</span> 连接条件<span class="token punctuation">;</span><span class="token comment">-- 右连接:</span>主表 <span class="token keyword">right</span> <span class="token keyword">join</span> 从表 <span class="token keyword">on</span> 连接条件<span class="token punctuation">;</span><span class="token comment">-- 能够使用连接的前提是，多表之间有字段上的关联</span><span class="token comment">-- 左连接和右连接区别在于主表在SQL语句中的位置,因此实际左连接就可以满足常见需求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>使用自身和自身连接,第一次查询的结果被第二次查询时用到</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> city<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> areas <span class="token keyword">as</span> city <span class="token keyword">inner</span> <span class="token keyword">join</span> areas <span class="token keyword">as</span> province <span class="token keyword">on</span> city<span class="token punctuation">.</span>pid<span class="token operator">=</span>province<span class="token punctuation">.</span>aid <span class="token keyword">where</span> province<span class="token punctuation">.</span>atitle<span class="token operator">=</span><span class="token string">"广东省"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用自连接査询 只需要使用一个表 可以加开査询速度 减少数据表占用空间<br>自连接查询本质就还是连接查询</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p><strong>子查询</strong>:把一个查询的结果当做另一查询的条件</p><p>子查询分为三类</p><ul><li>标量子查询:子查询返回的结果是一个数据(一行一列)</li><li>列子查询:返回的结果是一列(一列多行)</li><li>行子查询:返回的结果是一行(一行多列)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查出高于平均身高的信息</span><span class="token keyword">select</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> height <span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token keyword">from</span> students<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查出能够对应上班级号的学生信息</span><span class="token keyword">select</span> <span class="token keyword">from</span> students <span class="token keyword">where</span> cls_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="MySql高级"><a href="#MySql高级" class="headerlink" title="MySql高级"></a>MySql高级</h2><h3 id="删除异常"><a href="#删除异常" class="headerlink" title="删除异常"></a>删除异常</h3><p><img src="/2024/06/21/shu-ju-ku/%E5%88%A0%E9%99%A4%E5%BC%82%E5%B8%B8.png" alt="alt text"></p><p>由于只存在<strong>商品信息一张表</strong>，其中既有商品信息又有<strong>分类名称</strong>和<strong>品牌名称</strong>。</p><p>当把某个<strong>商品信息</strong>删除后，本不应该删除的 <strong>&lt;独立于商品信息的分类和品牌&gt;</strong> 等信息结果也随着删除商品信息而删除，那么此时存在<strong>删除异常</strong>。</p><p><img src="/2024/06/21/shu-ju-ku/%E6%9C%80%E7%BB%88%E8%A1%A8.png" alt="alt text"></p><h4 id="信息表优化"><a href="#信息表优化" class="headerlink" title="信息表优化"></a>信息表优化</h4><ul><li>第一步: 创建商品种类表</li><li>第二步: 同步数据到商品种类表中</li><li>第三步: 更新商品信息表数据</li><li>第四步: 修改商品信息表表结构</li></ul><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><h4 id="1-什么是外键？"><a href="#1-什么是外键？" class="headerlink" title="1.什么是外键？"></a>1.什么是外键？</h4><ul><li>外键的作用<ul><li>外键有一个很重要的作用: 防止无效信息的插入</li></ul></li><li>注意:<ul><li>关键字: foreign key,只有 innodb 数据库引擎才能使用外键</li><li>外键本身也是一种约束 和 not null 等约束一样</li></ul></li></ul><h4 id="2-外键的使用"><a href="#2-外键的使用" class="headerlink" title="2.外键的使用"></a>2.外键的使用</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 添加外键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> goods <span class="token keyword">add</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>cate_id<span class="token punctuation">)</span> <span class="token keyword">references</span> goods_cates<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 如何取消外键约束</span><span class="token comment">-- 需要先获取外键约束名称，该名称系统会自动生成,可以通过查看表创建语句来获取名称</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> goods<span class="token punctuation">;</span><span class="token comment">-- 获取名称之后就可以根据名称来删除外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> goods <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> goods_ibfk_1<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> goods <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> goods_ibfk_2<span class="token punctuation">;</span><span class="token comment">-- 注意:使用到外键约束会极大的降低表更新的效率,所以在追求读写效率优先的场景下一般很少使用外键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在创建数据表的时候设置外键约束<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建数据表的同时直接创建外键</span><span class="token keyword">create</span> <span class="token keyword">table</span> goods<span class="token punctuation">(</span>  id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">' '</span><span class="token punctuation">,</span>  price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  cate_id <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span>  brand_id <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span>  is_show <span class="token keyword">bit</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">,</span>  is_saleoff <span class="token keyword">bit</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>cate_id<span class="token punctuation">)</span><span class="token keyword">references</span> goods_cates<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span> <span class="token keyword">references</span> goods_brands<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="1-什么是视图"><a href="#1-什么是视图" class="headerlink" title="1.什么是视图"></a>1.什么是视图</h4><p>视图就是一个能够把复杂SQL语句的功能封装起来的一个虚表。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上</p><p>视图是对若干张基本表的引用，一张虚表，不存储具体的数据(基本表数据发生了改变，视图也会跟着改变)</p><p>视图的好处:方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性，复用性;</p><h4 id="2-视图的使用"><a href="#2-视图的使用" class="headerlink" title="2.视图的使用"></a>2.视图的使用</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 定义(创建)视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> 视图名字<span class="token punctuation">(</span>一般使用v开头<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">select</span>语句<span class="token punctuation">;</span><span class="token comment">-- 查看视图</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">-- 使用视图</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v_goods_info<span class="token punctuation">,</span><span class="token comment">-- 删除视图</span><span class="token keyword">drop</span> <span class="token keyword">view</span> 视图名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>总结</li></ul><ol><li>视图封装了对多张基本表的复杂操作，简化用户操作</li><li>视图只是一个虚表,并不存储任何基本表的表数据,当用户使用视图的时候。视图会从基本表中取出</li><li>通过视图可以对用户展示指定字段从而屏蔽其他字段数据，更加安全</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1. 事务的概念"></a>1. 事务的概念</h4><p>事务Transaction,是指作为一个基本工作单元执行的一系列SQL语句的操作,要么完全地执行,要么完全地都不执行。</p><p>事务回滚</p><h4 id="2-事务四大特性"><a href="#2-事务四大特性" class="headerlink" title="2.事务四大特性"></a>2.事务四大特性</h4><ol><li>原子性(Atomicity)<ul><li>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</li></ul></li><li>一致性(Consistency)<ul><li>数据库总是从一致性的状态转换到另一个一致性的状态。(在前面的例子中，一致性确保了即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失500元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中)</li></ul></li><li>隔离性(Isolation)<ul><li>通常来说，个事务所做的修改在最终提交以前，对其他事务是不可见的。(在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去500元)</li></ul></li><li>持久性(Durability)<ul><li>一旦事务提交，则其所做的修改会永久保存到数据库。(此时即使系统崩溃，修改的数据也不会丢失。)</li></ul></li></ol><h4 id="3-事务的使用"><a href="#3-事务的使用" class="headerlink" title="3.事务的使用"></a>3.事务的使用</h4><ul><li>开启事务</li></ul><p>开启事务后执行修改命令变更会维护到本地缓存中，而不维护到物理表中<br><code>begin;</code> 或者<code>start transaction;</code></p><ul><li>提交事务</li></ul><p>将缓存中的数据变更维护到物理表中<br><code>commit;</code></p><ul><li>回滚事务</li></ul><p>放弃缓存中变更的数据 表示事务执行失败 应该回到开始事务前的状态<br><code>rollback;</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token keyword">update</span> students <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 至此才完成一次事务,真正修改了数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="1-索引的作用"><a href="#1-索引的作用" class="headerlink" title="1.索引的作用"></a>1.索引的作用</h4><p><strong>思考:</strong><br>如何在一个图书馆中找到一本书?<br>图书馆管理系统，大家要找书籍先在系统上查找到书籍所在的房屋编号和货架编号，然后就可以直接大摇大摆的去取书了。</p><p>我们把这种能够帮助我们快速查询数据的线索就称之为索引<br>如果数据库本身是一个字典，<strong>那么索引就是这个字典的目录</strong></p><p><strong>索引的本质</strong><br>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的位置信息。</p><h4 id="2-索引的使用"><a href="#2-索引的使用" class="headerlink" title="2.索引的使用"></a>2.索引的使用</h4><p>查看表中已有索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">index</span> 索引名【可选】<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1. 创建测试表：</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 2. 插入数据：</span>使用Python脚本或其他方式向<span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span>表中插入数据。这里不展示具体的Python脚本，但请确保插入足够的数据以便观察索引的效果。<span class="token comment">-- 3. 没有索引时测试查询性能：</span>在测试之前，确保MySQL的profiling功能是开启的（如果您的MySQL版本支持）。但请注意，profiling在MySQL <span class="token number">8.0</span>及更高版本中已被弃用。<span class="token comment">-- 注意：MySQL 8.0+中SET profiling = 1; 已被弃用</span><span class="token comment">-- 使用 EXPLAIN 替代</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test <span class="token keyword">WHERE</span> title <span class="token operator">=</span> <span class="token string">'some_title'</span><span class="token punctuation">;</span><span class="token comment">-- 如果您使用的是MySQL 8.0或更高版本，直接使用`EXPLAIN`命令来分析查询的执行计划。</span><span class="token comment">-- 4. 为`title`字段创建索引：</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_title <span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 5. 有索引时测试查询性能：</span>再次使用<span class="token identifier"><span class="token punctuation">`</span>EXPLAIN<span class="token punctuation">`</span></span>命令来查看查询的执行计划，或者使用其他性能分析工具（如<span class="token identifier"><span class="token punctuation">`</span>Performance Schema<span class="token punctuation">`</span></span>）来监控性能。<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test <span class="token keyword">WHERE</span> title <span class="token operator">=</span> <span class="token string">'some_title'</span><span class="token punctuation">;</span><span class="token comment">-- 请注意，即使您使用的是支持profiling的MySQL版本，也建议优先使用`EXPLAIN`命令，因为它提供了更详细的信息，并且不需要在每次查询之前都开启profiling。</span><span class="token comment">-- 6. 比较结果：</span><span class="token comment">-- 比较没有索引和有索引时查询的执行计划，观察索引如何影响查询性能。在有索引的情况下，您应该能看到查询速度的提升，特别是当查询条件能够充分利用索引时。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点:</li></ul><p>加快数据的查询速度</p><ul><li>缺点:</li></ul><p>创建索引会浪费时间和占用磁盘空间，并且随着数据量的增加所耗费的时间会越来越多</p><ul><li>使用原则:</li></ul><ol><li>经常发生数据更新的表避免使用过多的索引</li><li>数据量小的表没有必要使用索引</li><li>数据量较大同时不会频发发生数据更改的表可以使用索引</li></ol><h3 id="数据库设计之三范式"><a href="#数据库设计之三范式" class="headerlink" title="数据库设计之三范式"></a>数据库设计之三范式</h3><h4 id="1-什么是三范式"><a href="#1-什么是三范式" class="headerlink" title="1.什么是三范式"></a>1.什么是三范式</h4><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式</p><p>各种范式呈递次规范，越高的范式数据库几余越小。</p><h4 id="2-范式的划分"><a href="#2-范式的划分" class="headerlink" title="2.范式的划分"></a>2.范式的划分</h4><p><strong>数据冗余</strong>是指数据之间的重复，也可以说是同一数据存储在不同数据文件中的现象</p><p><img src="/2024/06/21/shu-ju-ku/%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99.png" alt="alt text"></p><h4 id="3-范式的划分"><a href="#3-范式的划分" class="headerlink" title="3.范式的划分"></a>3.范式的划分</h4><p>根据数据库<strong>冗余的大小</strong>,目前<strong>关系型数据库</strong>有六种范式,各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>六种范式:</p><ul><li>第一范式(1NF)</li><li>第二范式(2NF)</li><li>第三范式(3NF)</li><li>巴斯-科德范式(BCNF)</li><li>第四范式(4NF)</li><li>第五范式(5NF，又称完美范式)</li></ul><p>一般遵循 前三种范式即可</p><h5 id="第一范式1NF"><a href="#第一范式1NF" class="headerlink" title="第一范式1NF"></a>第一范式1NF</h5><p>第一范式(1NF):强调的是字段的原子性，即一个字段不能够再分成其他几个字段<br><img src="/2024/06/21/shu-ju-ku/%E4%B8%80%E8%8C%83%E5%BC%8F%E8%8C%83%E4%BE%8B.png" alt="alt text"></p><h5 id="第二范式2NF"><a href="#第二范式2NF" class="headerlink" title="第二范式2NF"></a>第二范式2NF</h5><p>第二范式(2NF):<strong>满足 1NF的基础上</strong>，另外包含两部分内容</p><p>一是表必须有一个<strong>主键</strong><br>二是<strong>非主键字段</strong>必须<strong>完全</strong>依赖于主键，而不能只依赖于主键的一部分（意思是关系中非主键字段必须可以由主键唯一确定）</p><p><img src="/2024/06/21/shu-ju-ku/%E4%B8%BB%E9%94%AE%E7%94%B1%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%9E%84%E6%88%90.png" alt="alt text"></p><p><img src="/2024/06/21/shu-ju-ku/%E4%BA%8C%E8%8C%83%E5%BC%8F%E6%94%B9%E8%89%AF.png" alt="alt text"></p><h5 id="第三范式3NF"><a href="#第三范式3NF" class="headerlink" title="第三范式3NF"></a>第三范式3NF</h5><p>第三范式(3NF):<strong>满足 2NF</strong><br>另外<strong>非主键字段</strong>必须<strong>直接依赖</strong>于主键，不能存在传递依赖。</p><p>即不能存在:非主键字段 A 依赖于非主键字段 B,非主键字段 B 依赖于主键的情况</p><p><img src="/2024/06/21/shu-ju-ku/%E4%B8%89%E8%8C%83%E5%BC%8F%E5%89%8D.png" alt="alt text"></p><p><img src="/2024/06/21/shu-ju-ku/%E4%B8%89%E8%8C%83%E5%BC%8F%E5%90%8E.png" alt="alt text"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>范式:</strong><br>设计关系<strong>数据库</strong>时，遵从不同的规范<strong>要求</strong>，设计出合理的关系型数据库，这些不同的规范要求被称为不同的<strong>范式</strong>，各种范式呈递次规范，越高的范式<strong>数据库冗余</strong>越小。</p><ol><li><p>第一范式（1NF, First Normal Form）:</p><ul><li>强调列的原子性。即数据库表的每一列都是不可分割的原子数据项，不能再分。</li><li>所有的列都是单一的数据类型，如整数、字符串等。</li><li>如果某个列包含多个值（如一个列存储多个电话号码），则需要拆分该列，使得每一行数据都是唯一的，且每列数据都是原子的。</li></ul></li><li><p>第二范式（2NF, Second Normal Form）:</p><ul><li>必须满足1NF。</li><li>表必须有一个主键，主键可以是一个列或多个列的组合（复合主键）。</li><li>所有的非主键列必须完全依赖于整个主键，而不是主键的一部分。</li><li>如果存在复合主键，那么非主键列不能仅依赖于复合主键中的某一个字段，它必须依赖于整个复合主键。</li></ul></li><li><p>第三范式（3NF, Third Normal Form）:</p><ul><li>必须满足2NF。</li><li>任何非主键列不能传递依赖于主键。</li><li>这意味着，非主键列A不能依赖于非主键列B，而列B又依赖于主键。如果存在这样的依赖关系，就需要将列A和列B（以及它们相关的其他列）分离到另一个新的表中，并在两个表之间建立关联关系（如使用外键）。</li></ul></li></ol><p>第三范式的主要目的是减少数据冗余和更新异常。通过消除传递依赖，我们可以确保数据的一致性，并在更新数据时避免不必要的麻烦。</p><h3 id="E-R模型和表间关系"><a href="#E-R模型和表间关系" class="headerlink" title="E-R模型和表间关系"></a>E-R模型和表间关系</h3><p>E-R模型即<strong>实体-关系模型</strong><br>E-R模型就是<strong>描述数据库存储数据的结构模型</strong></p><h4 id="三种关系"><a href="#三种关系" class="headerlink" title="三种关系"></a>三种关系</h4><p><strong>表现形式</strong></p><ul><li>实体: 用矩形表示，并标注实体名称</li><li>属性: 用椭圆表示，并标注属性名称</li><li>关系: 用菱形表示，并标注关系名称<br><strong>E-R模型中的三种关系</strong></li><li>一对一</li><li>一对多(1-n)</li><li>多对多(m-n)<br><img src="/2024/06/21/shu-ju-ku/E_R.png" alt="alt text"></li></ul><h1 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>不安全因素<ol><li>非授权对数据库的恶意存取和破坏</li><li>数据库中重要的数据泄露</li><li>安全环境的脆弱性</li></ol></li></ul><p>自主存取控制方法</p><ol><li>grant revoke<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span> <span class="token keyword">on</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">to</span> <span class="token operator">&lt;</span>用户<span class="token operator">></span><span class="token keyword">revoke</span><span class="token operator">&lt;</span>权限<span class="token operator">></span> <span class="token keyword">on</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>用户<span class="token operator">></span>用户、角色创建用户<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token keyword">with</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="安全性控制"><a href="#安全性控制" class="headerlink" title="安全性控制"></a>安全性控制</h2><ul><li>数据库安全性控制<ul><li>用户身份鉴别<ul><li>静态口令鉴别</li><li>动态口令鉴别</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ul></li><li>存取控制</li><li>自主存取控制方法(重点讲解)；字面意思就是我们用户可以自定义和分配其他用户的操作权限<pre class="line-numbers language-text" data-language="text"><code class="language-text">主要通过grant  revoke来进行控制由两个元素构成:  数据库对象 和 操作权限我们定义用户的存取权限 成为授权主要存取权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">Reference权限代表是否允许创建外键4、授权 GrantGrant单词翻译:vt.承认;同意;准许;授予n.拨款;补助金;授给物(如财产、授地、专有权、补助、拨款等)Grant &lt;权限> on 表名[(列名)] to 用户 With grant option授权命令是由数据库管理员使用的，若给用户分配权限时带 Withgrant option 子句，则普通用户获权后,可把自己的权限授予其他用户。grant all privilege on 视图或者表 to usr1;5回收权限 revoke REVOKE &lt;权限> 0N &lt;数据对象> FR0M &lt;数据库用户名> cascade(级联)revoke翻译:vt.撤销，取消;废除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/06/21/shu-ju-ku/%E8%B5%8B%E4%BA%88%E6%9F%A5%E8%AF%A2%E6%9D%83%E9%99%90.png" alt="alt text"></p><h2 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h2><p>数据库角色（Role）是数据库管理系统（DBMS）中用于管理权限的一种机制。通过角色，数据库管理员（DBA）可以为一组用户分配相同的权限，而无需单独为每个用户设置权限。这大大简化了权限管理过程，提高了安全性和可管理性。</p><h3 id="角色的基本概念"><a href="#角色的基本概念" class="headerlink" title="角色的基本概念"></a>角色的基本概念</h3><ul><li><strong>角色</strong>：代表了一类用户，如CEO、总监、普通职员等。通过角色，可以为这些用户组分配相同的权限。</li></ul><h3 id="角色的操作"><a href="#角色的操作" class="headerlink" title="角色的操作"></a>角色的操作</h3><h4 id="1-角色的创建"><a href="#1-角色的创建" class="headerlink" title="1. 角色的创建"></a>1. 角色的创建</h4><p>使用<code>CREATE ROLE</code>语句创建角色。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> ROLE CEO<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-角色授权"><a href="#2-角色授权" class="headerlink" title="2. 角色授权"></a>2. 角色授权</h4><p>使用<code>GRANT</code>语句为角色分配权限。例如，为<code>CEO</code>角色授予<code>Student</code>表上的<code>SELECT</code>权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> Student <span class="token keyword">TO</span> CEO<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要为多个角色分配权限，可以在<code>TO</code>子句后列出这些角色，用逗号分隔：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> Student <span class="token keyword">TO</span> CEO<span class="token punctuation">,</span> Director<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-把角色授权给其他用户或角色"><a href="#3-把角色授权给其他用户或角色" class="headerlink" title="3. 把角色授权给其他用户或角色"></a>3. 把角色授权给其他用户或角色</h4><p>使用<code>GRANT</code>语句将角色授权给其他用户或角色。如果加上<code>WITH ADMIN OPTION</code>，则意味着被授权的用户或角色还可以将这个角色及其权限进一步授予其他用户或角色。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> CEO <span class="token keyword">TO</span> User1 <span class="token keyword">WITH</span> ADMIN <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-角色权限的收回"><a href="#4-角色权限的收回" class="headerlink" title="4. 角色权限的收回"></a>4. 角色权限的收回</h4><p>使用<code>REVOKE</code>语句收回角色的权限。例如，从<code>CEO</code>角色中收回<code>Student</code>表上的<code>SELECT</code>权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> Student <span class="token keyword">FROM</span> CEO<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要从用户或角色中收回角色本身，也需要使用<code>REVOKE</code>语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> CEO <span class="token keyword">FROM</span> User1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在使用角色时，要确保遵循数据库的安全策略和最佳实践。</li><li>不要为不必要的角色分配过多的权限，以减少潜在的安全风险。</li><li>定期审查和更新角色的权限设置，以确保其与组织的需求和策略保持一致。</li></ul><h1 id="Python数据库编程"><a href="#Python数据库编程" class="headerlink" title="Python数据库编程"></a>Python数据库编程</h1><h2 id="1-Python连接MySQL"><a href="#1-Python连接MySQL" class="headerlink" title="1.Python连接MySQL"></a>1.Python连接MySQL</h2><h3 id="1-1-PyMysql模块"><a href="#1-1-PyMysql模块" class="headerlink" title="1.1 PyMysql模块"></a>1.1 PyMysql模块</h3><p>如果使用之前学习的MySQL客户端来完成这个操作，那么这个工作量无疑是巨大的</p><p>我们可以通过使用程序代码的方式去连接MySQL数据库，然后对MySQL数据库进行增删改查的方式，实现10000条数据的插入，像这样使用代码的方式操作数据库就称为<strong>数据库编程</strong></p><p>安装pymysql第三方包:<code>sudo pip3 install pymysql</code></p><h3 id="1-2-使用PyMysql模块"><a href="#1-2-使用PyMysql模块" class="headerlink" title="1.2 使用PyMysql模块"></a>1.2 使用PyMysql模块</h3><p>pymysql使用步骤</p><ol><li>导入<strong>pymysql</strong>包</li><li>创建<strong>连接对象</strong></li><li>获取<strong>游标对象</strong></li><li>pymysql完成数据的<strong>增删改查</strong>操作</li><li>关闭<strong>游标</strong>和<strong>连接</strong></li></ol><h3 id="1-3-python代码"><a href="#1-3-python代码" class="headerlink" title="1.3 python代码"></a>1.3 python代码</h3><p>在使用 <code>pymysql</code> 这个 Python 库与 MySQL 数据库进行交互时，通常需要遵循以下步骤。以下是详细的步骤说明：</p><h4 id="①-导入-pymysql-模块"><a href="#①-导入-pymysql-模块" class="headerlink" title="① 导入 pymysql 模块"></a>① 导入 pymysql 模块</h4><p>在使用 <code>pymysql</code> 之前，首先需要导入该模块。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②-创建连接对象"><a href="#②-创建连接对象" class="headerlink" title="② 创建连接对象"></a>② 创建连接对象</h4><p>调用 <code>pymysql</code> 模块中的 <code>connect()</code> 函数来创建连接对象。你需要提供一系列参数来配置你的连接。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>    host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>       <span class="token comment"># 连接的mysql主机，如果本机是'localhost'</span>    port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>              <span class="token comment"># 连接的mysql主机的端口，默认是3306</span>    user<span class="token operator">=</span><span class="token string">'yourusername'</span><span class="token punctuation">,</span>    <span class="token comment"># 连接的用户名</span>    password<span class="token operator">=</span><span class="token string">'yourpassword'</span><span class="token punctuation">,</span><span class="token comment"># 连接的密码</span>    database<span class="token operator">=</span><span class="token string">'yourdb'</span><span class="token punctuation">,</span>      <span class="token comment"># 数据库的名称</span>    charset<span class="token operator">=</span><span class="token string">'utf8'</span>          <span class="token comment"># 通信采用的编码方式，推荐使用utf8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-获取游标对象"><a href="#③-获取游标对象" class="headerlink" title="③ 获取游标对象"></a>③ 获取游标对象</h4><p>获取游标对象的目标是要执行 SQL 语句，完成对数据库的增、删、改、查操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="④-使用游标执行-SQL-语句"><a href="#④-使用游标执行-SQL-语句" class="headerlink" title="④ 使用游标执行 SQL 语句"></a>④ 使用游标执行 SQL 语句</h4><p>使用游标对象的 <code>execute()</code> 方法来执行 SQL 语句。返回受影响的行数，主要用于执行insert、update、delete、select等语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 插入数据</span>sql <span class="token operator">=</span> <span class="token string">"INSERT INTO your_table (column1, column2) VALUES (%s, %s)"</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 更新数据</span>sql <span class="token operator">=</span> <span class="token string">"UPDATE your_table SET column1=%s WHERE column2=%s"</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'new_value1'</span><span class="token punctuation">,</span> <span class="token string">'some_condition'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除数据</span>sql <span class="token operator">=</span> <span class="token string">"DELETE FROM your_table WHERE column2=%s"</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'some_condition'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 查询数据</span>sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM your_table WHERE column2=%s"</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'some_condition'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑤-获取查询结果"><a href="#⑤-获取查询结果" class="headerlink" title="⑤ 获取查询结果"></a>⑤ 获取查询结果</h4><p>对于查询语句，可以使用游标对象的 <code>fetchone()</code> 或 <code>fetchall()</code> 方法来获取结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取查询结果集中的一条数据</span>row <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>  <span class="token comment"># 输出如: (1, '张三')</span><span class="token comment"># 获取查询结果集中的所有数据</span>rows <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span>  <span class="token comment"># 输出如: [(1, '张三'), (2, '李四')]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在调用 <code>fetchone()</code> 或 <code>fetchall()</code> 后，游标的位置会移动到下一条数据或末尾。如果你需要再次遍历结果集，通常需要重置游标位置或使用新的游标对象。</p><h4 id="⑥-提交或回滚事务"><a href="#⑥-提交或回滚事务" class="headerlink" title="⑥ 提交或回滚事务"></a>⑥ 提交或回滚事务</h4><p>如果执行了修改数据（如 INSERT、UPDATE、DELETE）的 SQL 语句，并且你希望这些更改被保存到数据库中，那么你需要调用连接对象的 <code>commit()</code> 方法。如果希望在出错时撤销这些更改，可以调用 <code>rollback()</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 提交事务</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 或者回滚事务</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑦-关闭游标和连接"><a href="#⑦-关闭游标和连接" class="headerlink" title="⑦ 关闭游标和连接"></a>⑦ 关闭游标和连接</h4><p>在完成数据库操作后，需要关闭游标和连接以释放资源。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 关闭游标</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭连接</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在实际应用中，应该使用 <code>try...except...finally</code> 语句块来确保即使在发生异常时也能正确地关闭游标和连接。</p><h1 id="SQL语句参数化"><a href="#SQL语句参数化" class="headerlink" title="SQL语句参数化"></a>SQL语句参数化</h1><h2 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h2><p>什么是SQL注入?<br>用户提交带有恶意的数据与SQL语句进行字符串方式的拼接，从而影响了SQL语句的语义，最终产生数据泄露的现象。</p><p>SQL注入是一种网络安全漏洞，攻击者可以通过在输入字段中插入恶意的SQL代码来访问或修改数据库中的数据。以下是一个简单的SQL注入案例，用于说明其工作原理和潜在危害。</p><h3 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h3><p>假设我们有一个简单的用户登录页面，用户需要输入用户名和密码来登录系统。登录页面的后台代码可能使用类似以下的SQL查询来验证用户输入：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'$username'</span> <span class="token operator">AND</span> password<span class="token operator">=</span><span class="token string">'$password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的<code>$username</code>和<code>$password</code>是用户输入的用户名和密码，它们被直接嵌入到SQL查询中。</p><h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><ol><li><p><strong>攻击者输入</strong>：<br>攻击者尝试在用户名或密码字段中输入特殊字符来修改原始的SQL查询。例如，攻击者可能在用户名字段中输入<code>&#39; OR &#39;1&#39;=&#39;1</code>（注意这里的单引号用于闭合原始查询中的<code>$username</code>变量），这样原始的SQL查询就会变为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">OR</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">AND</span> password<span class="token operator">=</span><span class="token string">'$password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>&#39;1&#39;=&#39;1&#39;</code>始终为真，因此这个查询会返回数据库中的所有用户记录，而不管密码是什么。</p></li><li><p><strong>结果</strong>：<br>因为SQL查询被篡改，攻击者能够绕过登录验证，并可能访问到系统内的敏感信息或执行其他恶意操作。</p></li></ol><h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><p>为了防止SQL注入攻击，应该采取以下措施：</p><ol><li><p><strong>使用参数化查询</strong>：避免直接在SQL查询中嵌入用户输入，而是使用参数化查询或预编译的语句。这样，即使用户输入包含特殊字符，它们也不会被解释为SQL代码的一部分。</p></li><li><p><strong>输入验证和过滤</strong>：对用户输入进行严格的验证和过滤，确保它们只包含预期的字符和数据类型。</p></li><li><p><strong>最小权限原则</strong>：为数据库连接分配最小的必要权限，以减少潜在的安全风险。</p></li><li><p><strong>使用ORM框架</strong>：对象关系映射（ORM）框架可以帮助管理数据库操作，减少手动编写SQL查询的需要，从而降低SQL注入的风险。</p></li><li><p><strong>定期更新和维护</strong>：保持数据库软件、Web服务器和应用程序的最新版本，以利用最新的安全特性和修复潜在的安全漏洞。</p></li><li><p><strong>使用防火墙和入侵检测系统</strong>：这些工具可以帮助检测和阻止潜在的攻击行为，提高系统的安全性。</p></li></ol><h2 id="2-如何防止SQL注入"><a href="#2-如何防止SQL注入" class="headerlink" title="2.如何防止SQL注入"></a>2.如何防止SQL注入</h2><p>SQL语句参数化</p><ul><li>SQL语言中的参数使用%s来占位，此处不是python中的字符串格式化操作</li><li>将SQL语句中%s占位所需要的参数存在一个列表中，把参数列表传递给execute方法中第二个参数</li></ul><p><strong>不安全的方式</strong></p><ul><li><code>sql =&quot;select * from goods where name=&#39;%s&#39;&quot; % find_name</code></li><li><code>cs.execute(sql)</code></li></ul><p><strong>安全的方式</strong></p><ul><li>构造参数列表<ul><li><code>params = [find_name]</code></li></ul></li><li>执行select语句<ul><li><code>sql = &quot;select * from goods where name=%s&quot;</code>(这里的%s不需要加引号)</li><li>cs.execute(sql,params)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/06/21/ji-suan-ji-wang-luo/"/>
      <url>/2024/06/21/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p><a href="#crc%E5%86%97%E4%BD%99%E7%A0%81">CRC</a> </p><p><a href="#ip%E5%9C%B0%E5%9D%80">判断ip是否属于子网</a></p><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h3 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h3><ul><li>计算机网络的定义</li></ul><p>计算机网络是指将<strong>地理位置不同、具有独立功能</strong>的多台计算机及其外部设备，通过<strong>通信线路</strong>连接起来，并在网络操作系统、网络管理软件及网络通信协议的管理和协调下，实现<strong>资源共享和信息传递</strong>的计算机系统</p><ul><li>计算机网络的组成<ul><li><code>通信子网</code>: 提供信息交换的网络结点和通信线路</li><li><code>资源子网</code>: 提供共享的软件资源和硬件资源</li></ul></li><li>计算机网络的类型<ul><li>按照拓扑分类<a href="https://blog.csdn.net/swadian2008/article/details/130888598">详细</a><ul><li>星型</li><li>网状型</li><li>树形</li><li>总线型</li><li>环形</li><li>网状</li></ul></li></ul></li></ul><img src="/2024/06/21/ji-suan-ji-wang-luo/网络结构拓扑图.png" alt="alt text" style="zoom:67%;"><ul><li>按照范围分类<ul><li><code>局域网 LAN</code>: 几百米到十几公里</li><li><code>城域网 MAN</code>: 覆盖一个城市</li><li><code>广域网 WAN</code>: 中国或者是大省之间的通信</li><li><code>个人局域网 PAN</code>: 蓝牙耳机等</li><li><code>Internet</code></li></ul></li><li>按照传输方式分类<ul><li>有线网络: IEEE802.3</li><li>无线网络: <ol><li>IEEE802.11</li><li>WLAN无线局域网 ( wireless )</li><li>WPAN无线个域网</li></ol></li></ul></li></ul><h3 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h3><ul><li><p>传输方式</p><ul><li>按照传输方向<ol><li><code>单工</code>: 只能单方向传输的工作模式</li><li><code>双工</code>: 在同一时间，线路上只能允许一个方向的数据通</li><li><code>全双工</code>: 双方可以同时进行数据通信</li></ol></li><li>按照传输对象(方式)<ol><li>单播: 1对1</li><li>多播: 1对多</li><li>广播: 1对all(范围内)</li></ol></li></ul></li><li><p>数据交换<a href="https://blog.csdn.net/kai_locust/article/details/108301553">详见</a></p><ul><li><p>电路交换: 整个报文从源头到终点连续的传输,呼叫双方在开始通话之前，首先由交换设备在两者之间建立一条专用电路，并且在整个通话期间独占该条电路直到结束。</p><ol><li>优点：传输时延小；传输效率高，不需要添加控制信息；编码方式和信息格式不受限制。</li><li>缺点：占用信道，效率不高</li></ol></li><li><p>报文交换: 整个报文先传送到相邻结点，全部存储下来查找转发表，再转发到下一个结点<br>报文交换又叫做消息交换，以报文作为传送单元。在这种交换方式中，发送方不需要提前建立起电路，不管接收方是否空闲，可随时向其所在的交换机发送消息。交换机收到的报文消息先存储于缓冲器的队列中，然后根据报文头中的地址信息计算出路由，确定输出线路。</p><ol><li>优点：传输时延小；传输效率高，不需要添加控制信息；编码方式和信息格式不受限制。</li><li>缺点：占用信道，效率不高</li></ol></li><li><p>分组交换: 将一个报文分成多个分组，传送到相邻结点，再查找转发表，再转发到下一个结点。分组交换是将用户的消息划分为一定长度的数据分组，然后在分组数据上加上控制信息和地址，然后经过分组交换机发送到目的地址，如下图。</p><ol><li>优点：灵活，切片，线路利用率高、传输可靠性高（分组交换在网络层实现了数据校验、错误检测和重传）</li><li>缺点：传输延迟增加，额外开销，丢失和重传</li></ol></li></ul></li><li><p>通信协议和体系结构</p><ul><li><p>网络协议三要素</p><ol><li>语法</li><li>语义</li><li>时序</li></ol></li><li><p>网络模型<a href="https://blog.csdn.net/wwy0324/article/details/109310658">参考博客</a></p><ul><li><code>OSI参考模型</code> -&gt; <strong>Open System Interconnect开放式系统互联模型</strong>(由低到高)</li><li><code>物理层</code> — 单位 bit，利用传输介质为通信的网络结点之问的建立，主机连路由器使用双绞线，,路由器之间使用光纤等电气特征。</li><li><code>数据链路层</code> — 单位 帧，在物理层的基础之上，提供结点到结点之间的服务，采取差错控制和流量控制的方法实现网络互联</li><li><code>网络层</code> — 单位 分组，在数据链路层的基础之上，提供点到点之问的通信，提供路由功能，实现拥塞控制、网络互联等功能。</li><li><code>传输层</code> — 提供端到端之间的数据传输服务，实现对数据进行控制和操作的功能。</li><li><code>会话层</code> — 负责维护通信中两个节点之间的会话建立维护和断开，以及数据的交换。</li><li><code>表示层</code> — 表示层用于处理交互数据的表示方式，例如格式转换、数据的加密和解密、数据压缩和恢复等功能</li><li><code>应用层</code> — 使用应用程序通过网络服务</li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="alt text"></p><ul><li><code>TCP/IP模型</code><img src="/2024/06/21/ji-suan-ji-wang-luo/tcpip%E6%A8%A1%E5%9E%8B.png" alt="alt text"></li></ul></li></ul></li></ul><h2 id="物理层-底层"><a href="#物理层-底层" class="headerlink" title="物理层(底层)"></a>物理层(底层)</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><ol><li>机械特性: 接口是怎样的? -水晶头,光纤头</li><li>电气特性: 用多少伏特电</li><li>功能特性: 线路上电平电压的特性</li><li>过程特性: 实现不同功能所发射信号的顺序</li></ol><h4 id="两种信号"><a href="#两种信号" class="headerlink" title="两种信号"></a>两种信号</h4><ul><li><code>模拟信号</code>: 特定频段的信号，有更加丰富的表现形式</li><li><code>数字信号</code>: 不是1就是0</li></ul><h4 id="调制和编码"><a href="#调制和编码" class="headerlink" title="调制和编码"></a>调制和编码</h4><ul><li>调制 – 模拟信号转换</li><li>编码 <ul><li>数字信号转换 </li><li>编码的步骤</li></ul><ol><li>采样</li><li>量化</li><li>编码</li></ol></li><li>区别<ul><li>数据可以通过编码手段转成数字信号，也可以通过调制手段将数据转为模拟信号。</li><li>数字数据可以通过数字发送器转化为数字信号(编码)，也可以通过调制器转化为模拟信号(调)</li><li>模拟数据可以通过PCM编码器转化为数字信号(编码)，也可以通过放大器调制器转化为模拟信号(调制)</li></ul></li></ul><h4 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h4><ul><li>双绞线(8根线)<ul><li>屏蔽双绞线 STP – 抗干扰强、贵一些</li><li>非屏蔽双绞线 UTP – 便宜、抗干扰差</li><li>制作标准</li></ul><ol><li><code>568B</code> – 橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</li><li><code>568A</code> – 13、26调换</li></ol></li><li>光纤<ul><li>多模光纤<br> 多模光纤(MultiMode Fiber)-芯较粗(50或62.5μm)，可传多种模式的光。但其模间色散较大，这就限制了传输数字信号的频率，而且随距离的增加会更加严重。例如:600MB&#x2F;KM的光纤在2KM时则只有300MB的带宽了。因此，多模光纤传输的距离就比较近，一般只有几公里。<br><code>距离:2KM</code></li><li>单模光纤<br> 单模光纤(Single Mode Fiber):中心纤芯很细(芯径一般为9或10um)，只能传一种模式的光。因此，其模间色散很小，适用于远程通讯，但还存在着材料色散和波导色散，这样单模光纤对光源的谱宽和稳定性有较高的要求，即谱宽要窄，稳定性要好。<br><code>距离:100KM</code></li></ul></li><li>同轴电缆 - 淘汰了（座机）</li><li>无线 - 无线信号频率标准 IEE802.11</li></ul><h4 id="三大部分"><a href="#三大部分" class="headerlink" title="三大部分"></a>三大部分</h4><ul><li>源系统：发送数据的一端</li><li>传输系统：传输过程中的各种传输介质</li><li>目的系统：接收数据的电脑</li></ul><h3 id="物理层的基本通信技术"><a href="#物理层的基本通信技术" class="headerlink" title="物理层的基本通信技术"></a>物理层的基本通信技术</h3><h4 id="四种信道复用技术"><a href="#四种信道复用技术" class="headerlink" title="四种信道复用技术"></a>四种信道复用技术</h4><p><code>复用技术</code>：复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程。<br>  将多种不同的信号在 同一信道上进行传输，复用技术主要是用于解决不同信号传输时应该如何区分。</p><ul><li><code>频分复用FDM</code>：划分不同频率来并行传输信号</li><li><code>时分复用TDM</code>: 划分不同时间段来传输信号</li><li><code>码分复用CDM</code>: 在同一时间同一频率根据传输的数据码进行区分</li><li><code>波分复用WDM</code>: 根据光波的波长进行传输(合波器耦合)</li></ul><h4 id="数据的传输方式"><a href="#数据的传输方式" class="headerlink" title="数据的传输方式"></a>数据的传输方式</h4><ul><li><p>通过同时间传输数量分为</p><ol><li>串行传输<br>使用一条数据线，将数据一位一位地依次传输，每一位数据占据一个固的时间长度。只需要少数几条线就可以在系统间交换信息，特别适用于计算机与计算机、外设之间的远距离通信。</li><li>并行传输<br>并行传输指的是数据以成组的方式，在多条并行井行传输信道上同时进行传输，是在传输中有多个数据位同时在设备之间进行的传输。</li></ol></li><li><p>通过数据报文的双方的行为分为</p><ol><li>同步传输(传输效率最高)<br>在计算机网络中，定时的因素称为位同步。同步是要接收方控照发送方发送的每个位的起止时刻和速率来接收数据，否则会产生误差。同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合称为数据帧，或简称为帧。</li><li>异步传输<br>异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方从不知道它们会在什么时候到达</li></ol></li><li><p>通过传输的信号分为</p><ol><li>基带传输: 传输数字信号叫做基带传输</li><li>频带传输: 传输模拟信号叫做频带传输 – 300-3400kHz</li></ol></li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="数据链路层基础概论"><a href="#数据链路层基础概论" class="headerlink" title="数据链路层基础概论"></a>数据链路层基础概论</h3><h4 id="数据链路层概念"><a href="#数据链路层概念" class="headerlink" title="数据链路层概念"></a>数据链路层概念</h4><p>数据链路层是在物理层和网络层之间的协议，提供相邻结点的<strong>可靠</strong>数据传输。</p><h4 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h4><p><code>MAC地址</code>，全称为媒体访问控制地址（Media Access Control Address），也被称为局域网地址（LAN Address）、以太网地址（Ethernet Address）或<strong>物理地址</strong>（Physical Address）。</p><p>它是一个用于在网络中唯一标识一个网络接口控制器（网卡）的地址。在OSI模型中，MAC地址工作在第二层 —— 数据链路层，而IP地址则工作在第三层 —— 网络层。</p><p>MAC地址通常由48位（6个字节）的二进制数表示，并且通常以十六进制的形式展示。例如，一个MAC地址可能看起来像这样：<code>00:0A:95:9D:68:16</code></p><h4 id="帧的概念"><a href="#帧的概念" class="headerlink" title="帧的概念"></a>帧的概念</h4><ul><li>概念: 数据链路层的协议数据单元</li><li>帧的组成: <ol><li>帧头 — 源<code>MAC</code>地址、目的<code>MAC</code>地址、类型</li><li>数据</li><li>帧尾 — 校验部分</li></ol></li></ul><img src="/2024/06/21/ji-suan-ji-wang-luo/帧格式.png" alt="alt text" style="zoom: 67%;"><img src="/2024/06/21/ji-suan-ji-wang-luo/各层数据格式.png" alt="alt text" style="zoom: 67%;"><p><strong>首部</strong>和<strong>尾部</strong>的作用之一就是进行<strong>帧定界</strong>,同时他们包含必要的控制信息.为了提高传输效率,应当使帧的数据部分尽可能长些,但考虑到差错控制等多种因素,每一种链路层协议都规定了<code>MTU(最大传送单元)</code></p><p>为了解决透明传输的问题,对于面向字节(字符)的物理链路可以采用字节(符)填充的方法</p><p>对于面向比特的物理链路可以采用零比特填充的方法<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%AD%97%E7%AC%A6%E5%A1%AB%E5%85%85.png" alt="alt text"></p><img src="/2024/06/21/ji-suan-ji-wang-luo/零比特填充.jpg" alt="alt text" style="zoom: 33%;"><h3 id="数据链路层的两种传输方式"><a href="#数据链路层的两种传输方式" class="headerlink" title="数据链路层的两种传输方式"></a>数据链路层的两种传输方式</h3><ul><li>单播</li><li>广播</li></ul><h3 id="数据链路层的三个基本问题"><a href="#数据链路层的三个基本问题" class="headerlink" title="数据链路层的三个基本问题"></a>数据链路层的三个基本问题</h3><ul><li>封装成帧</li><li>透明传输</li><li>差错检测 <ol><li>奇数校验</li><li>偶数校验</li><li>CRC冗余码</li></ol></li></ul><h3 id="局域网中的设备"><a href="#局域网中的设备" class="headerlink" title="局域网中的设备"></a>局域网中的设备</h3><ul><li>集线器</li></ul><p>集线器的英文称为”Hub”。”Hub”是”中心”的意思，集线器的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。<strong>不共享带宽</strong><br><strong>工作在物理层</strong></p><ul><li>交换机</li></ul><p>交换机(Switch)意为”开关”是一种用于电(光)信号转发的网络设备，它可以为接入交换交换机 数据链路层机的任意两个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。<strong>共享带宽</strong><br><strong>工作在数据链路层</strong></p><ul><li>网桥<br>两个端口的交换机</li></ul><h3 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h3><ul><li><code>冲突域</code>: 交换机的每一个端口都是一个冲突域;冲突域只能发生在一个网段</li><li><code>广播域</code>: 交换机的所有端口都在一个广播域;广播域在一个或多个网段内发生</li><li><code>区别: </code><ol><li>广播域可以跨网段</li><li>冲突域是基于第一层(物理层)，而广播域是机于第二层(数据链路层)。</li><li>HUB 所有端口都在同一个广播域，冲突域内。Swith所有端口都在同一个广播域内，而每一个端口就是一个冲突域。</li><li>同一冲突域共享带宽。<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%86%B2%E7%AA%81%E5%9F%9F%E5%B9%BF%E6%92%AD%E5%9F%9F.png" alt="alt text"></li></ol></li></ul><h3 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h3><ul><li><code>概念:</code> VLAN(Virtual LocalAreaNetwork)即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。VLAN内的主机间可以直接通信，而VLAN间不能直接通信，从而将广播报文限制在一个VLAN内。</li><li><code>优点和目的:</code><ol><li>划分广播域 — 减少垃圾数据</li><li>增强局域网的安全性</li><li>提高健壮性</li><li>灵活构建工作组</li></ol></li><li><code>划分VLAN的方式:</code><ul><li><strong>基于端口</strong> — 给交换机的每个接口配置不同的PVID，当一个数据帧进入交换机接口时，如果没有带VLAN标签，且该接口上配置了PVID，那么，该数据帧就会被打上接口的PVID。如果进入的帧已经带有VLAN标签，那么交换机不会再增加VLAN标签，即使接口已经配置了PVID。<ol><li>Access – 只允许通过一个VLAN</li><li>Trunk – 允许通过多个VLAN</li><li>hybird</li></ol></li><li>基于子网</li><li>基于MAC地址</li><li>基于协议</li><li>基于匹配策略</li></ul></li></ul><h3 id="CSMA-CD协议-总线型"><a href="#CSMA-CD协议-总线型" class="headerlink" title="CSMA&#x2F;CD协议(总线型)"></a>CSMA&#x2F;CD协议(总线型)</h3><ul><li>概念: CSMA&#x2F;CD即载波侦听多路访问&#x2F;冲突检测，是广播型信道中采用心-种随机访问技术的竞争型访问方法，具有多目标地址的特点。总线型网络传输数据</li><li>四大要点: <ol><li>先听再发  先监听信道是否被占用</li><li>边听边发  一边发送一边监听</li><li>冲突停止  发生冲突立即停止数据</li><li>延迟后发  发生冲突延迟一个<code>随机数×征用期</code>的时间在发送</li></ol></li><li><code>τ</code>：念tao，单程的”端到端”传播时延，记住:电磁波在1km电缆的传播时延约为5μs &#x3D; 5*10^(-6)s</li><li>争用期：停止等待，退避检测到冲突要等r倍的征用期时间才重新开始发送数据,以太网的端到端往返时间2τ,10Mbit&#x2F;s以太网的争用期2τ&#x3D;51.2μs。</li></ul><h3 id="PPP协议（单播）"><a href="#PPP协议（单播）" class="headerlink" title="PPP协议（单播）"></a>PPP协议（单播）</h3><ul><li>概念: 点对点通信是一对一信道，因此不会发生碰撞因此比较简单，采用PPP协议:其中PPP协议就是用户计算机和ISP(互联网服务提供商)进行通信时使用的数据链路层的协议，将数据封住成帧（开始和结束的表示 - 帧定界）</li></ul><h3 id="CRC冗余码"><a href="#CRC冗余码" class="headerlink" title="CRC冗余码"></a>CRC冗余码</h3><p><code>CRC循环冗余检验码</code>是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。循环冗余检查(CRC)是一种数据传输检错功能，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。</p><ul><li><code>生成多项式</code>: 进行模二除法的被除数，如一个生成多项式为<code>P(x) = x^4 + x^3 + 1</code>，那么被除数就是 <code>1*x^4 + 1*x^3 + 0*x^2 + 0*x^1 + 1*x^0</code>，为<code>11001</code>，生成多项式的最高位幂为<code>n</code>，就有<code>n</code>位被除数，在原数据后填<code>n</code>个零，最后冗余码结果就有<code>n-1</code>位<img src="/2024/06/21/ji-suan-ji-wang-luo/冗余码计算01.jpg" alt="alt text" style="zoom:50%;"><img src="/2024/06/21/ji-suan-ji-wang-luo/冗余码计算02.jpg" alt="alt text" style="zoom: 50%;"></li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="网络层的作用-分组"><a href="#网络层的作用-分组" class="headerlink" title="网络层的作用(分组)"></a>网络层的作用(分组)</h3><ul><li><strong>网络层的目的</strong>: 是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。<strong>提供端到端服务</strong></li></ul><h3 id="网际层协议IP"><a href="#网际层协议IP" class="headerlink" title="网际层协议IP"></a>网际层协议IP</h3><ul><li><code>ARP地址解析协议</code>: 根据IP地址获取物理地址</li><li><code>RARP反地址解析协议</code>: 根据数据链路层的MAC地址解析成网络层的IP地址</li><li><code>ICMP网际控制报文协议</code>: 通过ICMP传输控制消息，控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。例如<code>ping</code>命令等</li><li><code>IGMP网际组管理协议</code>: 是用于管理网路协议多播组成员的一种通信协议。IP主机和相邻的路由器利用IGMP来创建多播组的组成员。组播方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li>IP地址的概念<ul><li>IP地址</li></ul></li></ul><p>IP地址是IP协议提供的一种统一的地址格式，为互联购上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><ul><li><p>组成<br>一个IP地址由4个字节，32位组成，一般用点分十进制的方式表现。</p></li><li><p>IP地址和MAC地址的区别</p><ol><li>IP地址是一个逻辑地址，MAC地址是物理地址</li><li>MAC地址是唯一的但是IP地址不是唯一的</li><li>MAC地址主要是工作在第二层，IP地址在网络层IP地址和MAC地址的区别</li><li>MAC地址是48位，IP地址一般是32位(IPv6是128位)</li><li>IP地址的分配取决于网络拓扑，MAC地址分配取决于制造商。</li></ol></li><li><p>IP地址的组成：</p><ul><li><code>网络地址 + 主机号</code></li><li>主机地址&#x2F;主机号 – 标识某一台设备的地址</li><li>网络地址&#x2F;网络号 – 标识某一个网段的地址</li><li>子网掩码 – 它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</li></ul></li></ul><blockquote><ul><li>怎样查看一个<code>ip</code>地址192.168.2.128是否属于一个子网192.168.2.0&#x2F;24?</li></ul></blockquote><blockquote><ul><li>将<code>ip</code>地址转换成二进制与子网掩码相与（AND）<code>/24</code>就是表示子网掩码前24位全为1，后面全为0，即<code>11111111.11111111.11111111.00000000</code>，得出结果与子网号比较</li></ul></blockquote><ul><li>IP地址的分类<ol><li>A类: 前一个字节为网络号，第一个字节第一位是0，ip地址范围1.0.0.1 ~ 127.255.255.254，默认子网掩码255.0.0.0</li><li>B类: 前两个字节为网络号，第一个字节第一位是10，ip地址范围128.0.0.1 ~ 191.255.255.254</li><li>C类: 前两个字节为网络号，第一个字节第一位是110，ip地址范围192.x.x.x ~ 223.x.x.x</li><li>D类: <strong>多播地址</strong>前两个字节为网络号，第一个字节第一位是1110，ip地址范围224.x.x.x ~ 239.x.x.x</li><li>E类: 保留</li></ol></li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png" alt="alt text"></p><ul><li>IPv6</li></ul><p>因为IPv4地址满足不了需求，出现匮乏的情况所以诞生了IPv6地址继续使用。v6地址由128位，16个字节绍成，一般表现形式为十六进制。</p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><ul><li><code>子网划分</code></li></ul><p><strong>子网划分</strong>是一种网络技术，用于将一个大的有类网络（如A类、B类、C类网络）划分成若干个更小的子网，以优化IP地址的使用。通过修改子网掩码，可以实现更精细地划分网络号和主机号。子网掩码是一个32位的二进制数，其中值为1的比特对应IP地址中的网络位，值为0的比特对应IP地址中的主机位。这种划分有助于减少广播流量、提高网络安全性、优化网络性能和简化管理。</p><p>在子网划分中，网络掩码（也称为子网掩码或子网掩码长度）是关键。例如，C类网络的默认子网掩码是255.255.255.0，这表示前24位是网络位，后8位是主机位。通过改变子网掩码的长度，我们可以改变网络位和主机位的数量，从而创建不同大小的子网。</p><ul><li><code>VLSM（Variable Length Subnet Mask，可变长子网掩码）</code></li></ul><p><strong>VLSM</strong>是一种子网划分技术，允许网络管理员在网络中使用不同长度的子网掩码来创建子网。这种技术特别适用于大型网络，其中不同子网可能有不同的主机数量需求。通过使用VLSM，网络管理员可以根据实际需求为每个子网分配适当数量的IP地址，从而提高IP地址的利用率，减少浪费。</p><p>VLSM是<strong>CIDR</strong>（无类别域间路由）和<strong>路由汇聚</strong>技术的补充。CIDR允许使用不同长度的子网掩码来表示IP地址，而路由汇聚则通过汇总多个子网来减少路由表中的条目数量。VLSM通过层次化编址的方式，使网络管理员能够更有效地利用现有的地址空间。</p><img src="/2024/06/21/ji-suan-ji-wang-luo/子网划分.png" alt="alt text" style="zoom:80%;"><ol><li><p><strong>主机号全0</strong>：</p><ul><li>表示指向本网的<strong>网络地址</strong>，即该IP地址表示整个网络，而不是网络中的某个特定主机。这种地址常用在路由表中。</li><li>在子网掩码的情况下，非掩码段全为0的时候为网络地址。</li><li>对于A、B和C类IP地址，主机号全0的地址是网络地址，用于标识整个网络段。</li></ul></li><li><p><strong>主机号全1</strong>：</p><ul><li>表示<strong>广播地址</strong>，即该IP地址用于向所在网络上的所有主机发送数据包。</li><li>在大多数情况下，主机号全1的地址被保留用作广播地址，意味着发往这个地址的数据包会被发送到同一子网内的所有设备上。</li><li>网络安全警报：检测到主机号全为1的地址时，可能意味着系统正遭受攻击，因为恶意用户可能会故意发送大量数据包到这个地址，导致网络拥堵和性能下降，这种情况称为广播风暴。</li></ul></li></ol><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><img src="/2024/06/21/ji-suan-ji-wang-luo/子网划分题02.jpg" alt="alt text" style="zoom:50%;"><img src="/2024/06/21/ji-suan-ji-wang-luo/子网划分题01.jpg" alt="alt text" style="zoom: 50%;"><h3 id="网络层的路由"><a href="#网络层的路由" class="headerlink" title="网络层的路由"></a>网络层的路由</h3><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul><li><strong>路由是什么？</strong><ul><li><p>路由(routing)是指分组从源到目的地时，决定端到端路径的网络范围的进程。路由是指导报文转发的路径信息，通过路由可以确认转发IP报文的路径。</p></li><li><p>路由是网络层最主要的工作任务</p></li></ul></li><li><strong>什么是路由器？</strong><ul><li>是网络层的基本设备</li><li>数据转发</li><li>一个端口代表一个网段，路由器中存放着通往各个网段的表格，叫做<strong>路由表</strong>。</li></ul></li><li><strong>什么是路由表？</strong><ul><li><strong>路由表(routing table)</strong> 或称路由择域信息库(RIB，Routing Information Base)，是一个存储在路由器或者联网计算机中的电子表格(文件)或类数据库。路由表存储着指向特定网络地址的路径</li></ul></li><li><strong>什么是网关？</strong><ul><li><strong>网关(Gateway)</strong> 又称网间连接器、协议转换器。用于两个高层协议不同的网络互连。网关既可以以用于广域网互连，也可以用于局域网互连。</li><li><strong>默认网关(Default Getway)</strong> ，路由器不知道将数据往哪转发的时候，默认转发到默认网关</li></ul></li></ul><h4 id="路由的获取方式（路由表的建立和维护）"><a href="#路由的获取方式（路由表的建立和维护）" class="headerlink" title="路由的获取方式（路由表的建立和维护）"></a>路由的获取方式（路由表的建立和维护）</h4><ul><li>直连路由</li><li>静态路由</li><li>动态路由</li></ul><h4 id="路由的配置方式"><a href="#路由的配置方式" class="headerlink" title="路由的配置方式"></a>路由的配置方式</h4><p>直连路由、静态路由和动态路由是路由器在建立和维护路由表时使用的三种主要方式。以下是关于这三种路由方式的详细解释：</p><ol><li><strong>直连路由</strong>：</li></ol><ul><li>定义：直连路由是指路由器接口所直接连接的子网的路由方式简而言之，就是主机或网络设备直接连接到同一网络上，不需要过其他设备进行转发。</li><li>特点：<ul><li>直连路由是最简单的路由方式，适用于小型网络或简单拓结构。</li><li>通常无需配置额外的路由策略。</li><li>路由信息由链路层协议发现，只要接口处于活动状态，路由器就会自动将通向该网段的路由信息填写到路由表中。</li><li>直连路由无法使路由器获取与其不直接相连的路由信息。</li></ul></li></ul><ol start="2"><li><strong>静态路由</strong>：</li></ol><ul><li>定义：静态路由是一种路由方式，其中路由项（routing entry）由管理员手动配置，而非动态决定。</li><li>特点：<ul><li>静态路由是固定的，不会改变，即使网络状况已经改变或新配置。</li><li>静态路由配置简单，管理灵活，对网络影响较小。</li><li>适用于中小型网络。</li><li>网络安全保密性高，因为静态路由不会产生更新流量，不用网络带宽。</li><li>在大型和复杂的网络环境中，静态路由的配置和维护工作量较大，不利于网络的动态适应变化。</li></ul></li></ul><ol start="3"><li><strong>动态路由</strong>：</li></ol><ul><li>定义：动态路由是指路由器能够自动地建立自己的路由表，并且能够根据实际情况的变化适时地进行调整。</li><li>特点：<ul><li>动态路由是路由器根据路由器之间的交换的特定路由信息自动地建立路由表，并能够根据链路和节点的变化自动调整。</li><li>当网络中节点或链路发生故障，或存在其他可用路由时，动态路由可以自行选择最佳可用路由并继续转发报文。</li><li>动态路由依赖于路由器之间的路由信息交换和对路由表的维护。</li><li>常见的动态路由协议有<code>RIP</code>、<code>OSPF</code>、<code>IS-IS</code>、<code>BGP</code>等，每种协议都有其特点和适用场景。<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE.png" alt="alt text"></li></ul></li></ul><h4 id="RIP和OSPF的区别"><a href="#RIP和OSPF的区别" class="headerlink" title="RIP和OSPF的区别"></a><code>RIP和OSPF的区别</code></h4><ul><li><code>RIP协议</code>采用距离向量算法</li><li>RIP使用<code>UDP</code>：只和邻站交换信息，UDP虽不保证可靠性，但UDP开销小。<code>RIP</code>使用不可靠的UDP，因此需要周期性地和邻站交换路由信息，而<code>BGP</code>不需要。</li></ul><p>其特点是：</p><ol><li><p>仅和相邻路由器交换信息。如果两个路由器之间的通信不需要经过另一个路由器，那么这两个路由器就是相邻的。RIP协议规定，不相邻的路由器不交换信息。</p></li><li><p>路由器交换的信息是当前本路由器所知道的全部信息，即自己的路由表。也就是说，交换的信息是：“我到本自治系统中所有网络的（最短）距离，以及到每个网络应经过的下一跳路由器”。</p></li><li><p>按固定的时间间隔交换路由信息，例如，每隔30秒。然后路由器根据收到的路由信息更新路由表。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</p></li></ol><ul><li><p><code>OSPF协议</code>采用链路状态算法</p></li><li><p>OSPF使用IP：OSPF使用可靠的洪泛法，并直接使用IP，好处是灵活和开销小。</p></li></ul><p>其特点是：</p><ol><li><p>向本自治系统中所有路由器发送信息。这里使用的方法是洪泛法(flooding)，这就是路由器通过所有输出端口向所有相邻的路由器发送信息。而每一个相邻路由器又再将此信息发往其所有的相邻路由器（但不再发送给刚刚发来信息的那个路由器）。这样，最终整个区域中所有的路由器都得到了这个信息的一个副本。</p></li><li><p>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。所谓 “链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。OSPF将这个“度量”用来表示费用、距离、时延、带宽，等等。这些都由网络管理人员来决定，因此较为灵活。为了方便就称这个度量为“代价”。</p></li><li><p>只有当链路状态发生变化时，路由器才向所有路由器用洪泛法发送此信息。而不像RIP那样，不管网络拓扑有无发生变化，路由器之间都要定期交换路由表的信息。</p></li><li><p>对于规模很大的网络，OSPF可以把一个自治系统再划分为若干个更小范围的区域(area)，实现层次路由<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95%E5%8C%BA%E5%88%AB.png" alt="alt text"></p></li></ol><h2 id="运输-传输-层"><a href="#运输-传输-层" class="headerlink" title="运输(传输)层"></a>运输(传输)层</h2><h3 id="传输层概论"><a href="#传输层概论" class="headerlink" title="传输层概论"></a>传输层概论</h3><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ol><li>传输层提供<strong>端到端</strong>服务</li><li>从通信和信息处理的角度看，传输层向上层应用层提供通信服务。</li><li>所谓的端口，就好像是门牌号一样，客户端可以以通过ip地址找到对应的服器端，但是服务器端是有很多端口的，每个应用程序对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口进行区分，将每个端口进行了编号，这就是端口号</li></ol><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>通过端口号来区别相同计算机所提供的这些不同的服务</p><ul><li>第一类<br>公认端口（Well Known Ports）：从0到1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务的协议，例如：80端口实际上总是HTTP通讯。</li><li>第二类<br>注册端口（Registered Ports）：从1024到49151。它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些端口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。</li><li>第三类<br>动态&#x2F;私有端口（Dynamic and&#x2F;or Private Ports）：从49152到65535。这类端口号留给客户进程选作临时端口号.客户进程在发起通信时要先为自己选择一个未使用的临时端口号,通信结束时要释放该端口号以便其他客户进程使用.<br>理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口。但也有例外：SUN的RPC端口从32768开始。</li></ul><table><thead><tr><th>应用程序</th><th>端口号</th></tr></thead><tbody><tr><td>HTTP(超文本传输)</td><td>80</td></tr><tr><td>HTTPS(超文本传输安全协议)</td><td>443</td></tr><tr><td>FTP(文件传输协议)</td><td>21连接,20传送数据</td></tr><tr><td>TFTP(简单文件传输协议)</td><td>69</td></tr><tr><td>SSH</td><td>22</td></tr><tr><td>Telnet(远程登陆)</td><td>23</td></tr><tr><td>SMTP(简单电子邮件传输协议)</td><td>25</td></tr><tr><td>POP3(邮局协议版本3)</td><td>110</td></tr><tr><td>IMAP</td><td>143</td></tr><tr><td>DNS(域名系统)</td><td>53</td></tr><tr><td>LDAP</td><td>389</td></tr><tr><td>RDP(远程桌面协议 )</td><td>3389</td></tr><tr><td>SNMP(简单网络管理协议)</td><td>161</td></tr><tr><td>NTP</td><td>123</td></tr></tbody></table><h3 id="TCP-可靠"><a href="#TCP-可靠" class="headerlink" title="TCP(可靠)"></a>TCP(可靠)</h3><h4 id="概念-传输控制协议"><a href="#概念-传输控制协议" class="headerlink" title="概念: 传输控制协议"></a><code>概念</code>: 传输控制协议</h4><p>TCP是TCP&#x2F;IP体系中较为复杂的协议，是传输层中最重要的协议。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a><code>特点</code>:</h4><ol><li>TCP是<strong>面向连接</strong>的传输层协议</li><li>TCP提供<strong>可靠的</strong>交付服务</li><li>TCP提供<strong>全双工</strong>通信</li><li>TCP是<strong>面向字节流</strong></li></ol><h4 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a><code>三次握手四次挥手</code></h4><h5 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h5><img src="/2024/06/21/ji-suan-ji-wang-luo/tcp三次握手.png" alt="三次握手" style="zoom:67%;"><p>最开始的时候客户端和服务器都是处于CLOSED关闭状态。主动打开连接的为客户端，被动打开连接的是服务器。</p><p>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了 LISTEN 监听状态</p><p><strong>第一次握手</strong> TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN&#x3D;1，同时选择一个初始序列号 seq&#x3D;x ，此时，TCP客户端进程进入了 SYN-SENT 同步已发送状态</p><p><strong>第二次握手</strong> TCP服务器收到请求报文后，如果同意连接，则会向客户端发出确认报文。确认报文中应该 ACK&#x3D;1，SYN&#x3D;1，确认号是ack&#x3D;x+1，同时也要为自己初始化一个序列号 seq&#x3D;y，此时，TCP服务器进程进入了 SYN-RCVD 同步收到状态</p><p><strong>第三次握手</strong> TCP客户端收到确认后，还要向服务器给出确认。确认报文的ACK&#x3D;1，ack&#x3D;y+1，自己的序列号seq&#x3D;x+1，此时，TCP连接建立，客户端进入ESTABLISHED已建立连接状态 触发三次握手</p><ul><li>为什么要进行第三次握手？</li></ul><p>主要原因：防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误</p><ul><li>第一次握手： 客户端向服务器端发送报文<br>证明客户端的发送能力正常</li><li>第二次握手：服务器端接收到报文并向客户端发送报文<br>证明服务器端的接收能力、发送能力正常</li><li>第三次握手：客户端向服务器发送报文<br>证明客户端的接收能力正常</li></ul><h5 id="释放连接-参考blog"><a href="#释放连接-参考blog" class="headerlink" title="释放连接 参考blog"></a>释放连接 <a href="https://blog.csdn.net/m0_56649557/article/details/119492899">参考blog</a></h5><img src="/2024/06/21/ji-suan-ji-wang-luo/四次挥手.png" alt="四次挥手" style="zoom:67%;"><p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。</p><p><strong>第一次挥手</strong> 客户端发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN&#x3D;1，其序列号为seq&#x3D;u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态</p><p><strong>第二次挥手</strong> 服务器端接收到连接释放报文后，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT 关闭等待状态</p><p><strong>第三次挥手</strong> 客户端接收到服务器端的确认请求后，客户端就会进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文，服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p><p><strong>第四次挥手</strong> 客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态，但此时TCP连接还未终止，必须要经过2MSL后（最长报文寿命），当客户端撤销相应的TCB后，客户端才会进入CLOSED关闭状态，服务器端接收到确认报文后，会立即进入CLOSED关闭状态，到这里TCP连接就断开了，四次挥手完成</p><h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a><code>窗口</code></h4><ol><li>固定窗口<br>如果窗口过小，当传输比较大的数据的时候需要不停的对数据进行确认，这个时候就会造成很大的延迟。</li><li>滑动窗口<br>滑动窗口通俗来讲就是一种流量控制技术。它本质上是描述接收方的TCP数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据，如果发送方收到接收方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接收方发送窗口大小不为0的数据报的到来</li><li>拥塞处理和流量控制</li></ol><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><ul><li><code>轮次n</code>: 第0轮开始,拥塞窗口值为1</li><li><code>拥塞窗口cwnd</code></li><li><code>慢开始门限</code></li></ul><img src="/2024/06/21/ji-suan-ji-wang-luo/拥塞避免_1.png" alt="alt text" style="zoom:67%;"><p><strong>例题</strong>：<br>TCP的拥塞窗口（cwnd）大小与往返时间（RTT）之间的关系如下表所示。请根据表格数据回答以下问题：</p><table><thead><tr><th>RTT（单位：秒）</th><th>cwnd（单位：报文段）</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>4</td><td>4</td></tr><tr><td>8</td><td>8</td></tr><tr><td>16</td><td>16</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><strong>问题</strong>：</p><ol><li><p><strong>试画出拥塞窗口与RTT的关系曲线</strong>：</p><ul><li>曲线将是一个指数增长的曲线，因为TCP在慢开始阶段，每经过一个RTT，cwnd的大小都会翻倍（直到达到慢开始门限ssthresh）。</li></ul></li><li><p><strong>指明TCP工作在慢开始阶段的时间间隔</strong>：</p><ul><li>在这个例子中，假设慢开始门限ssthresh为16（这只是一个假设值，实际值可能根据网络情况有所不同）。那么，在RTT为1到16秒之间，TCP将工作在慢开始阶段，因为在这个时间间隔内，cwnd的大小随RTT的增大而指数增长。</li></ul></li><li><p><strong>在RTT&#x3D;16和RTT&#x3D;22之后发送方是通过收到的三个重复的确认还是通过超时检测到丢失了报文段？</strong></p><ul><li>在RTT&#x3D;16时，TCP可能刚刚进入拥塞避免阶段（如果ssthresh为16）。在这个阶段，如果发送方收到三个重复的确认，它会认为发生了拥塞并触发快速重传机制。但是，在这个例子中，没有给出RTT&#x3D;22时的具体网络状态，所以我们不能确定在RTT&#x3D;22之后发送方是如何检测到报文段丢失的。不过，通常情况下，如果超时发生，发送方会重传所有未被确认的报文段，并可能减小cwnd和ssthresh的值。</li></ul></li><li><p><strong>在RTT&#x3D;1、RTT&#x3D;18和RTT&#x3D;24时，门限ssthresh分别被设置为多大？</strong></p><ul><li>这个问题的具体答案取决于TCP实现的细节和网络状态。在慢开始阶段，ssthresh通常被设置为一个较大的值（例如，初始窗口大小的两倍或更多）。然而，在拥塞避免阶段，如果检测到拥塞（例如，通过收到三个重复的确认或超时），ssthresh可能会被减小到当前cwnd的一半左右。因此，在这个例子中，我们无法准确地知道在RTT&#x3D;1、RTT&#x3D;18和RTT&#x3D;24时ssthresh的具体值，除非给出更多的上下文信息。</li></ul></li></ol><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png" alt="alt text"></p><h3 id="UDP-不可靠"><a href="#UDP-不可靠" class="headerlink" title="UDP(不可靠)"></a>UDP(不可靠)</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>用户数据报协议: UDP</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>UDP是在IP数据报服务之上增加了一些功能，增加了复用和分用的功能以及差错检测的功能，UDP的主要特点是:</p><ol><li>UDP是无连接的</li><li>UDP尽最大努力交付</li><li>UDP面向报文且没有拥塞控制</li><li>UDP开销较小传输效率较高</li></ol><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="应用层的作用"><a href="#应用层的作用" class="headerlink" title="应用层的作用"></a>应用层的作用</h3><p><strong>最贴近于用户的一层</strong><br>通过位于不同主机中的多个应用进程之间的通信应用层的作用和协同工作来完成。应用层的内容就是具体定义是通信规则。 </p><h3 id="复累了-开摆"><a href="#复累了-开摆" class="headerlink" title="复累了 开摆"></a>复累了 <a href="https://blog.csdn.net/NickHan_cs/article/details/118067464">开摆</a></h3><h2 id="超级多之零碎知识点"><a href="#超级多之零碎知识点" class="headerlink" title="超级多之零碎知识点"></a>超级多之零碎知识点</h2><h3 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a><code>MTU</code></h3><ul><li><p><strong>MTU（Maximum Transmission Unit，最大传输单元）</strong>是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。这一参数通常与通信接口有关（如网络接口卡、串口等）。如果IP层有一个数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片（fragmentation），把数据包分成若干片，让每一片都不超过MTU。需要注意的是，MTU限制的是<strong>数据帧</strong>的最大长度，而不是数据包的最大长度。</p></li><li><p>在网络通信中，MTU的大小是有限制的，这是因为不同的网络设备和传输介质具有不同的传输能力和限制。例如，以太网的标准MTU为1500字节</p></li></ul><h3 id="是否为子网的有效地址：主机号是否全为0"><a href="#是否为子网的有效地址：主机号是否全为0" class="headerlink" title="是否为子网的有效地址：主机号是否全为0"></a><code>是否为子网的有效地址：主机号是否全为0</code></h3><ul><li>一个子网的网络地址是其子网掩码与IP地址进行与操作（AND）后得到的结果，此时主机号部分全为0。但这个地址通常不用作主机地址，而是表示整个子网。</li></ul><h3 id="判断是否为同一子网"><a href="#判断是否为同一子网" class="headerlink" title="判断是否为同一子网"></a><code>判断是否为同一子网</code></h3><ul><li>确实是通过将子网掩码与两个IP地址分别进行与操作（AND），然后比较结果是否相同来判断两个IP地址是否在同一子网。</li></ul><h3 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a><code>广播域</code></h3><ul><li>广播域指的是广播帧能到达的网络范围。在交换机连接的局域网中，由于交换机隔离了碰撞域，但广播帧仍然可以转发到所有端口，所以所有连接到同一交换机的设备都处于同一广播域。</li></ul><h3 id="碰撞域"><a href="#碰撞域" class="headerlink" title="碰撞域"></a><code>碰撞域</code></h3><ul><li>碰撞域指的是能够检测到数据帧冲突的范围。在交换机中，每个端口都形成一个独立的碰撞域，因为交换机使用存储转发的方式避免了冲突。</li></ul><h3 id="路由器与广播域"><a href="#路由器与广播域" class="headerlink" title="路由器与广播域"></a><code>路由器与广播域</code></h3><ul><li>路由器通过路由功能将网络划分为不同的广播域。路由器会阻止广播流量的传播，每个连接到路由器接口的网络都有自己的广播域，路由器会阻止广播帧从一个广播域传播到另一个广播域。</li></ul><h3 id="冲突域与广播域"><a href="#冲突域与广播域" class="headerlink" title="冲突域与广播域"></a><code>冲突域与广播域</code></h3><ul><li>广播域：交换机是二层设备，所有连接到交换机的设备仍处于同一个广播域例  </li><li>碰撞域：能够直接通信（既在同一广播域）内的节点集合（交换机为每个端口提供独立的碰撞域）</li></ul><h3 id="主机A向主机B传数据"><a href="#主机A向主机B传数据" class="headerlink" title="主机A向主机B传数据"></a><code>主机A向主机B传数据</code></h3><ul><li>当主机A向主机B传输数据时，离开Router1的Fa0&#x2F;1接口时，将使用B的IP地址作为目的IP地址，并使用Router1的Fa0&#x2F;1接口的MAC地址作为源MAC地址（因为MAC地址在数据链路层，每经过一个网络设备都会改变）。</li></ul><h3 id="IP数据报重组"><a href="#IP数据报重组" class="headerlink" title="IP数据报重组"></a><code>IP数据报重组</code></h3><ul><li>IP数据报在传输过程中可能会被分片，到达目的主机后，由目的主机的IP层负责重新组装成原始的数据报。</li></ul><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a><code>滑动窗口协议</code></h3><ul><li>滑动窗口协议是一种流量控制机制，它允许发送方在接收方确认之前发送多个数据包，而不是等待每个数据包的确认。这提高了传输效率，并减少了延迟。（防止缓冲区溢出）</li></ul><h3 id="TCP的可靠通信"><a href="#TCP的可靠通信" class="headerlink" title="TCP的可靠通信"></a><code>TCP的可靠通信</code></h3><ul><li>TCP通过序列号、<code>确认机制（Ackonwledge）</code>、超时重传、流量控制（滑动窗口协议）等机制来保证其数据传输的可靠性。其中，发送窗口大小（WS）和接收窗口大小（WA）的关系应满足WS ≤ WA，以确保发送方不会发送超过接收方缓冲区大小的数据。</li><li><code>确认机制（Ackonwledge）</code>是保证可靠交付的关键</li></ul><h3 id="TCP不提供的服务"><a href="#TCP不提供的服务" class="headerlink" title="TCP不提供的服务"></a><code>TCP不提供的服务</code></h3><ul><li>TCP不提供广播&#x2F;多播服务，它只提供点到点的通信。TCP是面向连接的、可靠的传输服务，提供拥塞控制和流量控制。</li></ul><h3 id="TCP中的确认机制"><a href="#TCP中的确认机制" class="headerlink" title="TCP中的确认机制"></a><code>TCP中的确认机制</code></h3><ul><li>TCP使用序列号（Seq）和确认号（Ack）来确保数据的可靠传输。</li><li>Seq（序列号）：标识发送方发送的数据段的起始字节的序列号。</li><li>Ack（确认号）：标识接收方期望从发送方接收的下一个字节的序列号，即已成功确认接收的最后一个字节的序列号加1。</li></ul><h3 id="序列号的长度和发送窗口大小"><a href="#序列号的长度和发送窗口大小" class="headerlink" title="序列号的长度和发送窗口大小"></a><code>序列号的长度和发送窗口大小</code></h3><ul><li>如果序列号的长度是4位（bit），那么它可以表示的最大序列号是2^4 - 1 &#x3D; 15（从0到15）。</li><li>但是，这并不意味着发送窗口的大小就是15。发送窗口大小是TCP滑动窗口协议中的一个概念，它决定了发送方在无需等待确认的情况下可以连续发送的数据量。</li><li>发送窗口大小是由接收方在TCP三次握手过程中通过接收窗口（Receive Window，简称RWND）字段来告知发送方的。</li><li>在理论上，如果序列号长度为4位，并且我们假设TCP不使用任何序列号回绕（这在实际中是不可能的，因为序列号空间远大于4位），那么发送方最多只能连续发送15个字节的数据，而无需等待确认。但这并不意味着发送窗口大小就是15。发送窗口大小可以根据网络条件和应用程序需求进行动态调整。</li></ul><h3 id="发送时延和传播时延"><a href="#发送时延和传播时延" class="headerlink" title="发送时延和传播时延"></a><code>发送时延和传播时延</code></h3><ul><li>发送时延 &#x3D; 数据帧长度（bit）&#x2F; 发送速率（bit&#x2F;s）</li><li>传播时延 &#x3D; 信道长度（m）&#x2F; 电磁波在信道上的传播速率（m&#x2F;s）</li></ul><h4 id="其他细节知识点选择记忆"><a href="#其他细节知识点选择记忆" class="headerlink" title="其他细节知识点选择记忆"></a>其他细节知识点选择记忆</h4><ul><li><p><strong>集线器（Hub）</strong>：集线器在网络中作为一个多端口的中继器，它接收到一个端口的信号后，会将该信号转发到所有其他端口。工作在 OSI 模型的第一层（物理层）。</p></li><li><p><strong>交换机（Switch）</strong>：交换机能够根据设备的 MAC 地址存储并传输数据帧到目标设备，减少数据碰撞。工作在 OSI 模型的第二层（数据链路层）。</p></li><li><p><strong>路由器（Router）</strong>：路由器用于连接不同网络，并根据 IP 地址进行数据包转发，处理复杂的网络任务。工作在 OSI 模型的第三层（网络层）。</p></li><li><p><strong>路由器构成与工作原理</strong>：由处理器、内存、输入输出接口和路由处理器等部分组成，根据目标 IP 地址和路由表决定数据包转发。还负责网络地址转换、防火墙、VPN等任务。</p></li><li><p><strong>VPN（Virtual Private Network）</strong>：包括远程访问 VPN 和站点到站点 VPN，通过建立加密通道保证数据安全。用于远程办公、公共 Wi-Fi 的安全访问等场景。</p></li><li><p><strong>NAT（PAT）的应用和原理</strong>：NAT用于将内网 IP 地址转换为公网 IP 地址，PAT是NAT的一种变体，通过端口转换实现多个内网设备共享一个公网 IP 地址。</p></li></ul><h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><ul><li>码分多址</li></ul><p>码分复用（码分多址-CDMA：Code Division Multiple Access）是一种共享信道的方式。用户通过挑选不同的码型在相同的频带，相同时间上通信，这样各用户之间就不会干扰（其频谱类似白噪声）。其优点在于，这样的信号具有很强的干扰性，且因为其类似于白噪声而不易被敌人发现。</p><p>这就好像，从 A 地到 B 地的路线中，三个不同的乘客分别选择飞机，动车和汽车，三个人的行程是不会冲突的。</p><p>在 CDM 中，每一个比特时间再被划分成 m 个短时间（码片）。每一个工作站被指派唯一一个 m bit 的码片序列。</p><p>一个站如果发送比特 1，表示发送自己的 m bit 码片序列<br>一个站如果发送比特 0，表示发送该码片序列的二进制反码</p><p>例如，S 站的码片序列指定为 00011011<br>当 S 站发送比特 1，发送的码片序列是 00011011<br>当 S 站发送比特 0，发送的码片序列是 11100100<br>当 S 站什么都不发送，显示 0</p><p><strong>PS：一般来说，我们默认将 0 写成 -1，1 写成 +1 的形式</strong></p><p>那么在多个站通过同一信道传输数据的时候，如何保证这些数据的独立性呢（不打架），要求数据之间能够内积得零（就是数学上向量内积得零）<br>比如，A，B 站向 C 站发送数据（这里用 4 位来计算）<br>如果 A（1，-1，1，-1），那么 B（-1，-1，-1，-1），这样 A，B 内积除以 4 位就得零，使得数据不会干扰。</p><p>那么在传播的过程中，如何组合这些数据呢，利用线性相加<br>还是上面的数据，那么线性相加，组合的结果就是（0，-2，0，-2）</p><p>那么在终点站如何分离出各自的数据呢，利用源站与终点站数据内积<br>还是上面的数据，分离 A 的数据，(0，-2，0，-2)*（1,-1,1,-1）&#x2F; 4 &#x3D; 1，所以 A 站发送的是 1 比特</p><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E7%A0%81%E5%88%86%E5%A4%9A%E5%9D%80%E8%AE%A1%E7%AE%97%E9%A2%98.png" alt="alt text"></p><ul><li><p>TCP&#x2F;IP网络模型<br><code>问</code>: TCP&#x2F;IP 参考模型中的主机-网络层对应于 0SI中的(D)<br>A.网络层  B.物理层   C.数据链路层  D.物理层与数据链路层</p></li><li><p>码元的概念<br>承载信息量的基本信号单位是 A<br>A.码元  B.比特   C.数据传输速率  D.误码率</p></li><li><p><a href="#crc%E5%86%97%E4%BD%99%E7%A0%81"><code>CRC循环冗余检验码</code></a>  </p></li><li><p>数据报分片</p><img src="/2024/06/21/ji-suan-ji-wang-luo/数据报分片.jpg" alt="alt text" style="zoom:50%;"><img src="/2024/06/21/ji-suan-ji-wang-luo/数据报分片2.png" alt="alt text" style="zoom:67%;"></li><li><p>地址聚合</p><img src="/2024/06/21/ji-suan-ji-wang-luo/地址聚合.png" alt="alt text" style="zoom:67%;"></li><li><p>路由表更新<br>规则:<br>对发来的路由表<br>所有距离+1，下一跳统一为发来的路由器<br>表中不存在的，直接添加<br>存在，下一跳不同，距离小时更新<br>存在，下一跳相同，无条件更新</p><img src="/2024/06/21/ji-suan-ji-wang-luo/路由表更新.jpg" alt="alt text" style="zoom:50%;"></li><li><p>根据路由表求下一跳</p></li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/%E6%B1%82%E4%B8%8B%E4%B8%80%E8%B7%B3.png" alt="下一跳"></p><ul><li><p>网桥转发表<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E7%BD%91%E6%A1%A5%E8%BD%AC%E5%8F%91%E8%A1%A8.png" alt="alt text"></p></li><li><p>子网划分<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86.jpg" alt="alt text"></p></li><li><p>碰撞检测计算<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B%E9%97%AE.png" alt="alt text"><br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B%E8%A7%A3.png" alt="alt text"></p></li><li><p><code>大题</code>: 有两台主机A和B接在800m长的电缆线的两端，并在t&#x3D;0时各自向对方发送一个帧，长度为1500bit(包括首部和前同步码)。假定在A和B之间有4个转发器，在转发帧时会产生20比特的时延。设传输速率为100Mbit&#x2F;s，而CSMA&#x2F;CD的退避时间是随机数r倍的争用期，争用期为512bit，在发生第一次碰撞后，在退避时A选择r&#x3D;0而B选择r&#x3D;1。忽略发生碰撞后的人为干扰信号和帧间最小间隔。</p><ul><li>（1）设信号的传播速率是2x10^8 (m&#x2F;s)。试计算从A到B(包括4个转发器)的传播时延。</li><li>（2）在什么时间(以秒为单位)B完全收到了A发送的帧?</li><li>（3）现在假定只有A发送帧，帧长仍为1500bit，但4个转发器都用交换机来代替。交换机在进行存储转发时还要产生额外的20bit的处理时延。在什么时间(以秒为单位)B完全收到了A发送的帧?</li></ul></li></ul><p><img src="/2024/06/21/ji-suan-ji-wang-luo/800%E7%B1%B3%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E9%A2%98%E7%9B%AE.png" alt="alt text"></p><ul><li><p><code>TCP确认机制</code><br><img src="/2024/06/21/ji-suan-ji-wang-luo/tcp%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%E9%A2%98.png" alt="alt text"></p></li><li><p>样题<br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E6%A0%B7%E9%A2%981.png" alt="alt text"><br><img src="/2024/06/21/ji-suan-ji-wang-luo/%E6%A0%B7%E9%A2%982.png" alt="alt text"></p></li></ul><h2 id="实验题命令"><a href="#实验题命令" class="headerlink" title="实验题命令"></a>实验题命令</h2><h3 id="rip路由配置"><a href="#rip路由配置" class="headerlink" title="rip路由配置"></a>rip路由配置</h3><p>RIP (Routing Information Protocol) 是一种基于距离向量的路由选择协议。<br>其工作原理是：每个路由器都维护一个到所有可能目的地的路由表，包括下一跳路由器和到目的地的跳数。RIP路由器会周期性地或者当网络拓扑变化时向其所有邻接路由器发送自己的路由表。配置示例：</p><ul><li>配置rip路由：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Router<span class="token operator">></span>enableRouter<span class="token comment">#configure terminal</span>Router<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#router rip</span>Router<span class="token punctuation">(</span>config-router<span class="token punctuation">)</span><span class="token comment">#network 192.168.1.0</span>Router<span class="token punctuation">(</span>config-router<span class="token punctuation">)</span><span class="token comment">#exit</span>Router<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><strong>如何构建交换转发表</strong> 交换机使用 MAC 地址表（也被称为转发表或者 CAM 表）进行帧的转发或者过滤。当交换机接收到一个帧，<strong>它会记录源 MAC 地址和接口</strong>，并将其添加到 <strong>MAC 地址表</strong>中。如果目的 MAC 地址在表中，<strong>交换机就可以直接转发帧到对应的接口</strong>。如果没有，交换机将帧发送到所有的接口（除了源接口）。</li></ol><p><code>VLAN</code> 和<strong>配置</strong>VLAN（Virtual Local Area Network）是一种在物理网络中创建独立广播域的技术。同一个 VLAN 中的主机可以相互通信，但是不同 VLAN 中的主机默认是无法相互通信的。配置示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Switch<span class="token operator">></span>enable 从用户执行模式（User EXEC mode）进入到特权执行Switch<span class="token comment">#configure terminal  特权执行模式进入到全局配置模式</span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#vlan 10 #在交换机上创建一个编号为10的VLAN</span>Switch<span class="token punctuation">(</span>config-vlan<span class="token punctuation">)</span><span class="token comment">#name VLAN10 #这个命令为VLAN 10设置一个名字（VLAN10）。</span>Switch<span class="token punctuation">(</span>config-vlan<span class="token punctuation">)</span><span class="token comment">#exit</span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#interface fa0/1</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#switchport mode access #设置FastEthernet0/1接口为接入模式。接入模式意味着这个接口只能属于一个VLAN。</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#switchport access vlan 10 #这个命令将FastEthernet0/1接口分配到VLAN 10。</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#exit </span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>跨 VLAN 转发</strong> 默认情况下，VLAN 是隔离的，也就是说，不同的 VLAN 之间是不能通信的。但是，我们可以通过使用<strong>三层交换机</strong>来实现跨 VLAN 的通信。实际上，这就是在进行路由操作，因为不同的 VLAN 相当于不同的子网。</p></li><li><p><strong>启用三层交换</strong> 三层交换机除了可以执行二层交换（通过 MAC 地址进行转发）之外，还可以执行<strong>三层路由（通过 IP 地址进行转发）</strong>。启用三层交换的命令通常是 ip routing。当启用了三层交换后，三层交换机就可以配置 <code>RIP</code> 或者 <code>OSPF</code> 等路由协议，并且可以进行跨 VLAN 的路由。</p></li></ol><p>启用三层交换实现跨vlan转发实验：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Switch<span class="token operator">></span>enableSwitch<span class="token comment">#configure terminal</span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#ip routing #启用路由功能</span> <span class="token comment">#配置vlan10</span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#vlan 10</span>Switch<span class="token punctuation">(</span>config-vlan<span class="token punctuation">)</span><span class="token comment">#exit</span><span class="token comment">#配置vlan20</span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#vlan 20</span>Switch<span class="token punctuation">(</span>config-vlan<span class="token punctuation">)</span><span class="token comment">#exit</span>  Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#interface vlan 10</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#ip address 192.168.10.1 255.255.255.0  # 为VLAN10配置SVI</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#no shutdown #启动接口</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#exit</span> Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#interface vlan 20</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#ip address 192.168.20.1 255.255.255.0</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#no shutdown</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#exit</span> Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#interface fa0/1</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#switchport mode access</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#switchport access vlan 10</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#exit</span> Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#interface fa0/2</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#switchport mode access</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#switchport access vlan 20</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment">#exit</span> Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">#exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，交换机通过 VLAN 10 和 VLAN 20 分别在 fa0&#x2F;1 和 fa0&#x2F;2 端口上接收到的数据包，会基于数据包的目标 IP 地址，通过配置的 SVI（交换机虚拟接口，即<strong>各 VLAN 的默认网关</strong>）进行路由。</p><p>例如，如果一个数据包在 VLAN 10 （通过 fa0&#x2F;1 端口）进入，目标 IP 是 VLAN 20 中的一个 IP，那么交换机会把这个数据包路由到 VLAN 20（通过 fa0&#x2F;2 端口）去。</p><p>需要注意的是，虽然现在 VLAN 10 和 VLAN 20 可以互相通信，但是这还不意味着 VLAN 内部的主机已经配置好了。主机需要设置正确的 IP 地址、子网掩码、以及<strong>默认网关（对应所在 VLAN 的 默认网关！）</strong>。否则，主机还是无法跨 VLAN 通信。</p>]]></content>
      
      
      <categories>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>configure mysql in VisualStudio</title>
      <link href="/2024/06/21/configure-mysql-in-visualstudio/"/>
      <url>/2024/06/21/configure-mysql-in-visualstudio/</url>
      
        <content type="html"><![CDATA[<h1 id="C-加-MySQL"><a href="#C-加-MySQL" class="headerlink" title="C++ 加 MySQL"></a>C++ 加 MySQL</h1><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">打开cmd输入 mysql输入 mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p打开VisualStudioVC<span class="token operator">/</span>C目录项目属性:点击c<span class="token operator">+</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">></span>常规<span class="token operator">-</span><span class="token operator">></span>附加包含目录<span class="token operator">-</span><span class="token operator">></span><span class="token string">"选择C:\Program Files\MySQL\MySQL Server 8.0\include"</span>包含库文件<span class="token operator">-</span><span class="token operator">></span>链接<span class="token operator">-</span><span class="token operator">></span>常规<span class="token operator">-</span><span class="token operator">></span>附加库目录<span class="token operator">-</span><span class="token operator">></span><span class="token string">"选择C:\Program Files\MySQL\MySQL Server 8.0\lib"</span>写入库文件<span class="token operator">-</span><span class="token operator">></span>链接器<span class="token operator">-</span><span class="token operator">></span>输入<span class="token operator">-</span><span class="token operator">></span>附加依赖项<span class="token operator">-</span><span class="token operator">></span>libmysql<span class="token punctuation">.</span>liblibmysql<span class="token punctuation">.</span>lib复制到c盘windows下system32文件夹下PS C:\Users\<span class="token number">86158</span><span class="token operator">></span> mysql <span class="token operator">-</span>u root <span class="token operator">-</span>pEnter password: <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Welcome <span class="token keyword">to</span> the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MySQL connection id <span class="token operator">is</span> <span class="token number">20</span>Server version: <span class="token number">8.0</span><span class="token number">.33</span> MySQL Community Server <span class="token operator">-</span> GPLCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span>Oracle <span class="token operator">is</span> a registered trademark <span class="token keyword">of</span> Oracle Corporation <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> itsaffiliates<span class="token punctuation">.</span> Other names may be trademarks <span class="token keyword">of</span> their respectiveowners<span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> py_sql             <span class="token operator">|</span><span class="token operator">|</span> sakila             <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">|</span> world              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token number">8</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">databases</span> student_manager<span class="token punctuation">;</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'databases student_manager'</span> at line <span class="token number">1</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> student_manager<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> py_sql             <span class="token operator">|</span><span class="token operator">|</span> sakila             <span class="token operator">|</span><span class="token operator">|</span> student_manager    <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">|</span> world              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token number">9</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> student_manager<span class="token punctuation">;</span><span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> students<span class="token punctuation">(</span>student_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>student_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>student_class <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------------+</span><span class="token operator">|</span> Tables_in_student_manager <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------+</span><span class="token operator">|</span> students                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span>  <span class="token keyword">into</span> students <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">20221003174</span><span class="token punctuation">,</span><span class="token string">'徐彬'</span><span class="token punctuation">,</span><span class="token string">'计科2201'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ERROR <span class="token number">1264</span> <span class="token punctuation">(</span><span class="token number">22003</span><span class="token punctuation">)</span>: <span class="token keyword">Out</span> <span class="token keyword">of</span> range <span class="token keyword">value</span> <span class="token keyword">for</span> <span class="token keyword">column</span> <span class="token string">'student_id'</span> at <span class="token keyword">row</span> <span class="token number">1</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span>  <span class="token keyword">into</span> students <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'徐彬'</span><span class="token punctuation">,</span><span class="token string">'计科2201'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> VisualStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2024/06/21/html/"/>
      <url>/2024/06/21/html/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网页"><a href="#1-网页" class="headerlink" title="1.网页"></a>1.网页</h2><h3 id="1-2-什么是-HTML"><a href="#1-2-什么是-HTML" class="headerlink" title="1.2 什么是 HTML"></a>1.2 什么是 HTML</h3><p>HTML 指的是超文本标记语言(HyperText Markup Language),它是用来描述网页的一种语言。</p><p>HTML不是一种编程语言,而是一种标记语言(markuplanguage),标记语言是一套标记标签(markup tag)。</p><p>所谓超文本,有2 层含义<br>    1.它可以加入图片、声音、动画、多媒体等内容(超越了文本限制)。<br>    2.它还可以从一个文件跳转到另一个文件,与世界各地主机的文件连接(超级链接文本)。</p><h3 id="1-3-网页的形成"><a href="#1-3-网页的形成" class="headerlink" title="1.3 网页的形成"></a>1.3 网页的形成</h3><p>网页是由网页元素组成的,这些元素是利用 html标签描述出来,然后通过浏览器解析来显示给用户的.</p><h2 id="2-常用浏览器"><a href="#2-常用浏览器" class="headerlink" title="2.常用浏览器"></a>2.常用浏览器</h2><h3 id="1-浏览器是网页显示、运行的平台。"><a href="#1-浏览器是网页显示、运行的平台。" class="headerlink" title="1.浏览器是网页显示、运行的平台。"></a>1.浏览器是网页显示、运行的平台。</h3><p>常用的浏览器有IE、火狐(Firefox)、谷歌(Chrome)、Safari和Opera等平时称为五大浏览器。</p><h3 id="2-浏览器内核"><a href="#2-浏览器内核" class="headerlink" title="2.浏览器内核:"></a>2.浏览器内核:</h3><p>浏览器内核(渲染引擎):负责读取网页内容,整理讯息,计算网页的显示方式并显示页面。</p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>chrome&#x2F;Opera</td><td>Blink</td><td>chrome&#x2F;opera浏览器内核。Blink 其实是 WebKit 的分支</td></tr></tbody></table><h2 id="3-Web标准"><a href="#3-Web标准" class="headerlink" title="3.Web标准"></a>3.Web标准</h2><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C(万维网联盟)是国际最著名的标准化组织</p><h3 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成"></a>web标准的构成</h3><p>3.2 Web 标准的构成<br>主要包括结构(Structure)、表现(Presentation)和行为(Behavior)三个方面。</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>结构用于对网页元素进行整理和分类,现阶段主要学的是HTML。</td></tr><tr><td>表现</td><td>表现用于设置网页元素的版式、颜色、大小等外观样式,主要指的是CSS</td></tr><tr><td>行为</td><td>行为是指网页模型的定义及交互的编写,现阶段主要学的是Javascript</td></tr></tbody></table><h3 id="Web-标准提出的最佳体验方案"><a href="#Web-标准提出的最佳体验方案" class="headerlink" title="Web 标准提出的最佳体验方案:"></a>Web 标准提出的最佳体验方案:</h3><h3 id="结构、样式、行为相分离-简单理解-结构写到-HTML-文件中-表现写到-CSS-文件中-行为写到JavaScript文件中"><a href="#结构、样式、行为相分离-简单理解-结构写到-HTML-文件中-表现写到-CSS-文件中-行为写到JavaScript文件中" class="headerlink" title="结构、样式、行为相分离,简单理解:结构写到 HTML 文件中,表现写到 CSS 文件中 ,行为写到JavaScript文件中"></a>结构、样式、行为相分离,简单理解:结构写到 HTML 文件中,表现写到 CSS 文件中 ,行为写到JavaScript文件中</h3><h2 id="4-html标签"><a href="#4-html标签" class="headerlink" title="4.html标签"></a>4.html标签</h2><h3 id="1-1-基本语法概述"><a href="#1-1-基本语法概述" class="headerlink" title="1.1 基本语法概述"></a>1.1 基本语法概述</h3><pre><code>1.HTML标签是由尖括号包围的关键词,例如 `&lt;html&gt;`2.HTML标签通常是成对出现的,例始`&lt;html&gt;`和`&lt;/html&gt;`,我们称为双标签。标签对中的第一个标签是开始标签,第二个标签是结束标签。3.有些特殊的标签必须是单个标签(极少情况),例如`&lt;br/&gt;`我们称为单标签。</code></pre><h3 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h3><p>双标签关系可以分为两类:包含关系和并列关系。</p><h3 id="2-1-文档类型声明标签"><a href="#2-1-文档类型声明标签" class="headerlink" title="2.1 文档类型声明标签"></a>2.1 文档类型声明标签</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>这句代码的意思是: 当前页面采取的是 HTML5 版本来显示网页注意:1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DOCTYPE</span><span class="token punctuation">></span></span>声明位于文档中的最前面的位置,处于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>标签之前。2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DOCTYPE</span><span class="token punctuation">></span></span>不是一个HTML标签,它就是文档类型声明标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-lang-语言种类"><a href="#2-2-lang-语言种类" class="headerlink" title="2.2 lang 语言种类"></a>2.2 lang 语言种类</h3><blockquote><p>用来定义当前文档显示的语言。<br>1.en定义语言为英语<br>2.zh-CN定义语言为中文<br>简单来说,定义为en 就是英文网页,定义为 zh-CN 就是中文网页</p></blockquote><p>其实对于文档显示来说,定义成en的文档也可以显示中文,定义成zh-CN的文档也可以显示英文</p><h3 id="2-3-charset编码"><a href="#2-3-charset编码" class="headerlink" title="2.3 charset编码"></a>2.3 charset编码</h3><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p><h3 id="3-1-html语义标签"><a href="#3-1-html语义标签" class="headerlink" title="3.1 html语义标签"></a>3.1 html语义标签</h3><p>学习标签是有技巧的,重点是记住每个标签的语义。简单理解就是指标签的含义,即这个标签是用来干嘛的</p><h3 id="3-2-标题标签-重要"><a href="#3-2-标题标签-重要" class="headerlink" title="3.2 标题标签&lt;h1&gt;-&lt;h6&gt;(重要 )"></a>3.2 标题标签<code>&lt;h1&gt;-&lt;h6&gt;</code>(重要 )</h3><p>为了使网页更具有语义化,我们经常会在页面中用到标题标签。HTML提供了6个等级的网页标题即<code>&lt;h1&gt;-&lt;h6&gt;</code></p><p>标签语义:作为标题使用,并且依据重要性递减</p><blockquote><p>特点:<br>1.加了标题的文字会变的加粗,字号也会依次变大<br>2.一个标题独占一行</p></blockquote><h3 id="3-3-段落和换行标签-重要"><a href="#3-3-段落和换行标签-重要" class="headerlink" title="3.3 段落和换行标签(重要 )"></a>3.3 段落和换行标签(重要 )</h3><p>在 HTML中,一个段落中的文字会从左到右依次排列,直到浏览器窗口的右端,然后才自动换行。如果希望某段文本强制换行显示,就需要使用换行标签<code>&lt;br/&gt;</code></p><h3 id="3-4-文本格式化标签"><a href="#3-4-文本格式化标签" class="headerlink" title="3.4 文本格式化标签"></a>3.4 文本格式化标签</h3><p>在网页中,有时需要为文字设置粗体、斜体或下划线等效果,这时就需要用到HTML中的文本格式化标签,使文字以特殊的方式显示。<br>标签语义:突出重要性,比普通文字更重要</p><table><thead><tr><th align="center">功能</th><th align="center">HTML标签</th><th align="center">Markdown语法</th><th align="center">说明</th><th align="center">推荐使用</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center"><code>&lt;strong&gt;&lt;/strong&gt;</code> 或 <code>&lt;b&gt;&lt;/b&gt;</code></td><td align="center"><strong>加粗文本</strong></td><td align="center">更推荐使用<code>&lt;strong&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;strong&gt;&lt;/strong&gt;</code></td></tr><tr><td align="center">倾斜</td><td align="center"><code>&lt;em&gt;&lt;/em&gt;</code> 或 <code>&lt;i&gt;&lt;/i&gt;</code></td><td align="center"><em>倾斜文本</em></td><td align="center">更推荐使用<code>&lt;em&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;em&gt;&lt;/em&gt;</code></td></tr><tr><td align="center">删除线</td><td align="center"><code>&lt;del&gt;&lt;/del&gt;</code> 或 <code>&lt;s&gt;&lt;/s&gt;</code></td><td align="center"><del>删除线文本</del></td><td align="center">更推荐使用<code>&lt;del&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;del&gt;&lt;/del&gt;</code></td></tr><tr><td align="center">下划线</td><td align="center"><code>&lt;ins&gt;&lt;/ins&gt;</code> 或 <code>&lt;u&gt;&lt;/u&gt;</code></td><td align="center">++下划线文本++ (注意：Markdown本身不支持下划线,此处仅为示意)</td><td align="center">更推荐使用<code>&lt;ins&gt;</code>标签,因为语义更强烈</td><td align="center"><code>&lt;ins&gt;&lt;/ins&gt;</code></td></tr></tbody></table><h3 id="3-5-容器标签"><a href="#3-5-容器标签" class="headerlink" title="3.5 容器标签"></a>3.5 <div>容器<span>标签</span></div></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>和<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>是没有语义的,它们就是一个盒子,用来装内容的。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>今日价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>div 是 division 的缩写,表示分割、分区。span 意为跨度、跨距特点:1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>标签用来布局,但是现在一行只能放一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>。大盒子2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>标签用来布局,一行能放多个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>。小盒子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-图像标签和路径-重点"><a href="#3-6-图像标签和路径-重点" class="headerlink" title="3.6 图像标签和路径(重点)"></a>3.6 图像标签和路径(重点)</h3><p>1.图像标签</p><p>在 HTML标签中 ,<code>&lt;img&gt;</code>标签用于定义HTML页面中的图像。</p><p><code>&lt;img src=&quot;图像URL&quot;/&gt;</code><br>单词 imae的缩写,意为图像。</p><p>src 是<code>&lt;img&gt;</code>标签的必须属性,它用于指定图像文件的路径和文件名</p><h3 id="4-1-图像标签和路径-重点"><a href="#4-1-图像标签和路径-重点" class="headerlink" title="4.1 图像标签和路径 (重点)"></a>4.1 图像标签和路径 (重点)</h3><h4 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="(1) 图像标签"></a>(1) 图像标签</h4><h5 id="图像标签的其他属性"><a href="#图像标签的其他属性" class="headerlink" title="图像标签的其他属性"></a>图像标签的其他属性</h5><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">图片路径</td><td align="center">必须属性</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td align="center">替换文本。图像不能显示的文字</td></tr><tr><td align="center">title</td><td align="center">文本</td><td align="center">提示文本。鼠标放到图像上,显示的文字</td></tr><tr><td align="center">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="center">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="center">border</td><td align="center">像素</td><td align="center">设置图像的边框粗细</td></tr></tbody></table><h5 id="图像标签属性注意点"><a href="#图像标签属性注意点" class="headerlink" title="图像标签属性注意点"></a>图像标签属性注意点</h5><pre><code>1. 图像标签可以拥有多个属性,必须写在标签名的后面2. 属性之间不分先后顺序,标签名与属性、属性与属性之间均以空格分开3. 属性采取键值对的格式,即key=“value&quot;的格式,属性=“属性值</code></pre><h4 id="2-路径"><a href="#2-路径" class="headerlink" title="(2)路径"></a>(2)路径</h4><h5 id="a-目录文件夹和根目录"><a href="#a-目录文件夹和根目录" class="headerlink" title="(a)目录文件夹和根目录:"></a>(a)目录文件夹和根目录:</h5><pre><code>  1. 目录文件夹:就是普通文件夹,里面只不过存放了我们做页面所需要的相关素材,比如html文件、图片等  2. 根目录:打开目录文件夹的第一层就是根目录</code></pre><h5 id="b-相对路径和绝对路径"><a href="#b-相对路径和绝对路径" class="headerlink" title="(b)相对路径和绝对路径"></a>(b)相对路径和绝对路径</h5><pre><code>1. 相对路径:相对于文件做参考2. 绝对路径:是指目录下的绝对位置,直接到达目标位置,通常是从盘符开始的路径。</code></pre><p>   当然,我可以帮你创建一个.md文件,其中包含你要求的Markdown格式内容。以下是一个简单的.md文件示例,它包含了有关超链接标签的信息以及Markdown格式的链接语法：</p><p>markdown</p><h2 id="5-超链接标签"><a href="#5-超链接标签" class="headerlink" title="5. 超链接标签"></a>5. 超链接标签</h2><h3 id="1-链接的语法格式"><a href="#1-链接的语法格式" class="headerlink" title="(1).链接的语法格式"></a>(1).链接的语法格式</h3><p>在Markdown中,创建超链接的语法格式如下：  </p><p><code>[链接文本](链接地址 &quot;链接标题&quot;)</code><br>如果不需要链接标题,则可以省略该部分,如下所示：</p><p><code>[链接文本](链接地址)</code><br>HTML中的超链接标签<br>虽然Markdown不支持直接插入HTML标签,但你可以了解HTML中的超链接标签<a>的语法：</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里,href属性用于指定链接目标的URL地址,而target属性用于指定链接页面的打开方式。_blank值意味着链接将在新的浏览器窗口中打开。</p><p>示例<br>以下是一个Markdown格式的示例,展示了如何使用Markdown语法创建超链接：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是一个<span class="token url">[<span class="token content">指向示例网站的链接</span>](<span class="token url">https://example.com</span>)</span>。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以选择在新窗口中打开链接,像这样：<code>[在新窗口中打开链接](https://example.com &quot;新窗口打开&quot;)</code><br>请注意,Markdown渲染器需要支持上述链接语法才能正确显示链接。</p><p>如果你希望在Markdown中显示HTML标签而不创建链接,你可以使用代码块,如下所示：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>或者,你可以使用转义字符来显示HTML标签文本,例如：    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\`请记住,在Markdown文件中,上述代码块将显示为HTML标签的文本,而不是实际的超链接。实际使用要在Markdown文件中创建实际的超链接,请使用以下格式：markdown<span class="token url">[<span class="token content">链接文本</span>](<span class="token url">链接地址</span>)</span>例如：markdown<span class="token url">[<span class="token content">访问GitHub</span>](<span class="token url">https://github.com</span>)</span>以上就是在Markdown中创建和管理超链接的基本方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-链接的语法格式"><a href="#2-链接的语法格式" class="headerlink" title="(2).链接的语法格式"></a>(2).链接的语法格式</h3><p><a href="#">文本或图像</a> <code>&lt;a&gt;</code> 单词 anchor[‘ænke(r)]的缩写,意为:锚。两个属性的作用如下:</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址,(必须属性)当为标签应用href属性时,它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式,其中self为默认值,blank为在新窗口中打开方式。</td></tr></tbody></table><h3 id="3-链接分类"><a href="#3-链接分类" class="headerlink" title="(3).链接分类:"></a>(3).链接分类:</h3><ol><li>外部链接: 例如<code>&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_self&quot;&gt;</code>腾讯<code>&lt;/a&gt;</code></li><li>内部链接: 网站内部页面之间的相互链接,直接链接内部页面名称即可,例如<code>&lt;a href=&quot;index.html&quot;&gt;</code>首页<code>&lt;/a&gt;</code></li><li>空链接: 如果当时没有确定链接目标时,<code>&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</code></li><li>下载链接: 地址链接的是.exe或.zip等形式的文件,会下载这个文件</li><li>网页元素链接:在网页中的各种网页元素,如文本、图像、表格、音频、视频等都可以添加超链接</li><li>锚点链接:点我们点击链接,可以快速定位到页面中的某个位置<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1. 在链接文本的 href 属性中,设置属性值为 #名字 的形式,如<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第2集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>2. 找到目标位置标签,里面添加一个id属性 =刚才的名字,如:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第2集介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="6-注释和特殊字符"><a href="#6-注释和特殊字符" class="headerlink" title="6.注释和特殊字符"></a>6.注释和特殊字符</h2><h4 id="6-1-注释"><a href="#6-1-注释" class="headerlink" title="6.1 注释"></a>6.1 注释</h4><p>如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字,就需要使用注释标签<br>HTML中的注释以<code>&quot;&lt;!--&quot;开头</code>,以<code>&quot;--&gt;&quot;</code>结束。</p><h4 id="6-2-特殊字符"><a href="#6-2-特殊字符" class="headerlink" title="6.2 特殊字符"></a>6.2 特殊字符</h4><p>在 HTML 页面中,一些特殊的符号很难或者不方便直接使用,此时我们就可以使用下面的字符来替代。<br><img src="/2024/06/21/html/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png" alt="alt text"></p><h2 id="7-表格标签"><a href="#7-表格标签" class="headerlink" title="7.表格标签"></a>7.表格标签</h2><h3 id="7-1-表格的主要作用"><a href="#7-1-表格的主要作用" class="headerlink" title="7.1 表格的主要作用"></a>7.1 表格的主要作用</h3><p>表格主要用于显示、展示数据,因为它可以让数据显示的非常的规整,可读性非常好。特别是后台展示数据的时候,能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理</p><h3 id="7-2-表格的基本语法"><a href="#7-2-表格的基本语法" class="headerlink" title="7.2 表格的基本语法"></a>7.2 表格的基本语法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>&lt;table&gt;&lt;/table&gt;</code>是用于定义表格的标签。</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>标签用于定义表格中的行,必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>标签中。</li><li><code>&lt;td&gt;&lt;/td&gt;</code>用于定义表格中的单元格,必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</li><li>字母 td 指表格数据(tabledata),即数据单元格的内容</li></ol><h3 id="7-3-表头单元格标签"><a href="#7-3-表头单元格标签" class="headerlink" title="7.3 表头单元格标签"></a>7.3 表头单元格标签</h3><p>一般表头单元格位于表格的第一行或第一列,表头单元格里面的文本内容加粗居中显示。<code>&lt;th&gt;</code>标签表示 HTML表格的表头部分(table head的缩写)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-表格和图片"><a href="#7-4-表格和图片" class="headerlink" title="7.4 表格和图片"></a>7.4 表格和图片</h3><p>表格的基本用法非常简单,只需要使用管状符号「|」和减号「-」来分割单元格和行即可。示例代码：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left, center, right</td><td>设置表格内容的水平对齐方式</td></tr><tr><td>border</td><td>1或””</td><td>设置表格边框的宽度（默认为「0」,即无边框）</td></tr><tr><td>cellpadding</td><td>像素单位</td><td>设置单元格内容与边框的距离,以「像素」计,默认为「1px」</td></tr><tr><td>cellspacing</td><td>像素单位</td><td>设置单元格之间的距离,以「像素」计,默认为「2px」</td></tr><tr><td>width</td><td>像素单位或百分比</td><td>设置表格的宽度</td></tr></tbody></table><h3 id="7-5-表格结构标签"><a href="#7-5-表格结构标签" class="headerlink" title="7.5 表格结构标签"></a>7.5 表格结构标签</h3><p>使用场景:因为表格可能很长,为了更好的表示表格的语义,可以将表格分割成表格头部和表格主体两大部分在表格标签中,分别用:<code>&lt;thead&gt;</code>标签表格的头部区域、<code>&lt;tbody&gt;</code>标签 表格的主体区域,这样可以更好的分清表格结构。</p><p>以上标签都是放在 <code>&lt;table&gt;&lt;/table&gt;</code>标签中。</p><h3 id="7-6-合并单元格"><a href="#7-6-合并单元格" class="headerlink" title="7.6 合并单元格"></a>7.6 合并单元格</h3><ol><li><p>合并单元格的方式</p><ul><li>跨行合并:rowspan&#x3D;”合并单元格的个数</li></ul><ul><li>跨列合并:colspan&#x3D;”合并单元格的个数”</li></ul></li><li><p>目标单元格:(写合并代码)</p><ul><li>跨行:最上侧单元格为目标单元格,写合并代码</li><li>跨列:最左侧单元格为目标单元格,写合并代码</li></ul></li></ol><h3 id="7-7-合并单元格三步曲"><a href="#7-7-合并单元格三步曲" class="headerlink" title="7.7 合并单元格三步曲"></a>7.7 合并单元格三步曲</h3><ol><li>   先确定是跨行还是跨列合并,</li><li>   找到目标单元格.写上合并方式&#x3D;合并的单元格数量。比如:<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>。</li><li>   删除多余的单元格。</li></ol><h2 id="8-列表标签"><a href="#8-列表标签" class="headerlink" title="8.列表标签"></a>8.列表标签</h2><p>表格是用来显示数据的,那么列表就是用来布局的。<br>列表最大的特点就是整齐、整洁、有序,它作为布局会更加自由和方便<br>根据使用情景不同,列表可以分为三大类:无序列表、有序列表和自定义列表</p><h3 id="8-1-无序列表-重点"><a href="#8-1-无序列表-重点" class="headerlink" title="8.1 无序列表(重点)"></a>8.1 无序列表(重点)</h3><p><code>&lt;ul&gt;</code>标签表示 HTML 页面中项目的无序列表,一般会以项目符号呈现列表项,而列表项使用<code>&lt;i&gt;</code>标签定义。</p><h4 id="无序列表的基本语法格式如下"><a href="#无序列表的基本语法格式如下" class="headerlink" title="无序列表的基本语法格式如下:"></a>无序列表的基本语法格式如下:</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>&lt;1i>列表项1&lt;/1i><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2&lt;/1i>&lt;1i>列表项3&lt;/1i><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>无序列表的各个列表项之间没有顺序级别之分,是并列的。</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>,直接在 <code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个容器,可以容纳所有元素</li><li>无序列表会带有自己的样式属性,但在实际使用时,我们会使用 CSS 来设置。</li></ol><h3 id="8-2-有序列表-数字列表"><a href="#8-2-有序列表-数字列表" class="headerlink" title="8.2 有序列表 (数字列表)"></a>8.2 有序列表 (数字列表)</h3><p>在HTML中，有序列表是使用 <code>&lt;ol&gt;</code> 标签创建的，每个列表项都使用 <code>&lt;li&gt;</code> 标签标记。以下是代码示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>&lt;ol&gt;&lt;/ol&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>,直接在 <code>&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个容器,可以容纳所有元素</li><li>无序列表会带有自己的样式属性,但在实际使用时,我们会使用 CSS 来设置。</li></ol><h3 id="8-3-自定义列表"><a href="#8-3-自定义列表" class="headerlink" title="8.3 自定义列表"></a>8.3 自定义列表</h3><h4 id="8-1自定义列表的使用场景"><a href="#8-1自定义列表的使用场景" class="headerlink" title="8.1自定义列表的使用场景:"></a>8.1自定义列表的使用场景:</h4><p><img src="/2024/06/21/html/image.png" alt="图片不见了"><br>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号</p><h4 id="8-3-自定义列表-重点"><a href="#8-3-自定义列表-重点" class="headerlink" title="8.3 自定义列表(重点)"></a>8.3 自定义列表(重点)</h4><p>在 HTML标签中，<code>&lt;dl&gt;</code>标签用于定义描述列表(或定义列表)，该标签会与<code>&lt;dt&gt;</code>(定义项目&#x2F;名字)和<code>&lt;dd&gt;</code>(描述每一个项目&#x2F;名字)一起使用。<br>其基本语法如下:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>&lt;d&gt;&lt;/dl&gt;</code>里面只能包含<code>&lt;dt&gt;和&lt;dd&gt;</code>。</li><li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制,经常是一个<code>&lt;dt&gt;</code>对应多个<code>&lt;dd&gt;</code>。</li></ol><h2 id="9-表单标签"><a href="#9-表单标签" class="headerlink" title="9.表单标签"></a>9.表单标签</h2><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h3><p>在 HTML 中，一个完整的表单通常由表单域、表单控件(也称为表单元素)和 提示信息3个部分构成.<br><img src="/2024/06/21/html/%E8%A1%A8%E5%8D%95.png" alt="alt text"></p><h3 id="9-2-表单域"><a href="#9-2-表单域" class="headerlink" title="9.2 表单域"></a>9.2 表单域</h3><p>表单域是一个包含表单元素的区域。<br>在 HTML标签中,<code>&lt;form&gt;</code>标签用于定义表单域，以实现用户信息的收集和传递。<br><code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单域名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>各种表单元素控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="属性表格"><a href="#属性表格" class="headerlink" title="属性表格"></a>属性表格</h4><table><thead><tr><th>属性名</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于提交表单时提交到的服务器程序的url地址</td></tr><tr><td>method</td><td>get&#x2F;post</td><td>用于提交表单时的方法,其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于提交表单时的名称,以便区分同一个页面的不同表单</td></tr></tbody></table><h3 id="9-表单控件-表单元素"><a href="#9-表单控件-表单元素" class="headerlink" title="9.表单控件(表单元素)"></a>9.表单控件(表单元素)</h3><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件</p><ol><li>input输入表单元素</li><li>select下拉表单元素</li><li>textarea 文本域元素</li></ol><h5 id="9-3-1-表单元素"><a href="#9-3-1-表单元素" class="headerlink" title="9.3.1 &lt;input&gt; 表单元素"></a>9.3.1 <code>&lt;input&gt;</code> 表单元素</h5><p>在英文单词中，input是输入的意思，而在表单元素中<code>&lt;input&gt;</code>标签用于收集用户信息<br>在 <code>&lt;input&gt;</code>标签中，包含一个type属性,根据不同的type属性值,输入字段拥有很多种形式(可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等)。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>&lt;input/&gt;</code>标签为单标签</li><li>type 属性设置不同的属性值用来指定不同的控件类型</li></ul><p><img src="/2024/06/21/html/input_type%E5%B1%9E%E6%80%A7.png" alt="alt text"></p><p>除 type属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，其常用属性如下<br><img src="/2024/06/21/html/input_%E5%B1%9E%E6%80%A7.png" alt="alt text"></p><ol><li>name 和value 是每个表单元素都有的属性值,主要给后台人员使用.</li><li>name 表单元素的名字,要求 单选按钮和复选框要有相同的name值</li><li>checked属性主要针对于单选按钮和复选框,主要作用一打开页面,就要可以默认选中某个表单元素</li><li>maxlength是用户可以在表单元素输入的最大字符数,一般较少使用</li></ol><h5 id="9-3-2-标签"><a href="#9-3-2-标签" class="headerlink" title="9.3.2 &lt;label&gt; 标签"></a>9.3.2 <code>&lt;label&gt;</code> 标签</h5><p><code>&lt;label&gt;</code>标签为input元素定义标注(标签)<br><code>&lt;label&gt;</code>标签用于绑定一个表单元素,当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.<br>语法: 要去往的标签的id属性值和label标签的for属性值一致</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="9-3-3-标签"><a href="#9-3-3-标签" class="headerlink" title="9.3.3 &lt;select&gt; 标签"></a>9.3.3 <code>&lt;select&gt;</code> 标签</h5><p>使用场景:在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用<code>&lt;select&gt;</code>标签控件定义下<br>拉列表。<br>语法:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项1(默认文本)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></li><li>在<code>&lt;option&gt;</code>中定义selected &#x3D; “selected”时，当前项即为默认选中项。</li></ol><h5 id="9-3-4textarea文本域-表单元素"><a href="#9-3-4textarea文本域-表单元素" class="headerlink" title="9.3.4textarea文本域 表单元素"></a>9.3.4textarea文本域 表单元素</h5><p>语法:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;textarearows="3" cols="20">文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>1.通过 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span>标签可以轻松地创建多行文本输入框。2.cols='每行中的字符数"，rows="显示的行数"我们在实际开发中不会使用，都是用 CSS 来改变大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2024/06/21/css/"/>
      <url>/2024/06/21/css/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS 层叠样式表"></a>CSS 层叠样式表</h2><p><a href="https://www.bilibili.com/video/BV14J4114768">B 站教程</a></p><h3 id="1-CSS-简介"><a href="#1-CSS-简介" class="headerlink" title="1. CSS 简介"></a>1. CSS 简介</h3><h4 id="1-1-HTML-的局限性"><a href="#1-1-HTML-的局限性" class="headerlink" title="1.1 HTML 的局限性"></a>1.1 HTML 的局限性</h4><p>说起 HTML，这其实是个非常单纯的家伙，他只关注内容的语义.比如 <code>&lt;h1&gt;</code>表明这是一个大标题，<code>&lt;p&gt;</code>表明这是一个段落，<code>&lt;img&gt;</code>表明这儿有一个图片，<code>&lt;a&gt;</code>表示此处有链接.很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点:丑.</p><h4 id="1-2-CSS-网页的美容师"><a href="#1-2-CSS-网页的美容师" class="headerlink" title="1.2 CSS-网页的美容师"></a>1.2 CSS-网页的美容师</h4><p>CSS 是也是一种标记语言，是层叠样式表(CascadingStyleSheets)的简称，<br>有时我们也会称之为 CSS 样式表或级联样式表.<br>CSS 是也是一种标记语言<br>CSS 主要用于设置 HTML 页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式边距等)以及版面的布局和外观显示样式.<br>CSS 最大价值:由 HTML 专注去做结构呈现，样式交给 CSS，即结构(HTML)与样式(CSS)相分离.</p><h4 id="1-3-CSS-语法规范"><a href="#1-3-CSS-语法规范" class="headerlink" title="1.3 CSS 语法规范"></a>1.3 CSS 语法规范</h4><p>CSS 规则由两个主要的部分构成:选择器以及一条或多条声明.</p><ul><li>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式</li><li>属性与属性值之间用键值对链接</li><li>属性与属性之间用分号(;)分割</li></ul><h4 id="1-4-CSS-代码风格"><a href="#1-4-CSS-代码风格" class="headerlink" title="1.4 CSS 代码风格"></a>1.4 CSS 代码风格</h4><ol><li>样式格式书写<ul><li>紧凑型<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>展开型<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>样式大小写<br>强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外</li><li>空格规范<ul><li>属性值前面，冒号后面，保留一个空格</li><li>选择器(标签)和大括号中间保留空格</li></ul></li></ol><h3 id="2-CSS-基础选择器"><a href="#2-CSS-基础选择器" class="headerlink" title="2.CSS 基础选择器"></a>2.CSS 基础选择器</h3><h4 id="2-1-选择器分类"><a href="#2-1-选择器分类" class="headerlink" title="2.1 选择器分类"></a>2.1 选择器分类</h4><p>选择器分基础选择器和复合选择器两个大类，我们这里先讲解一下基础选择器<br>基础选择器是由单个选择器组成的<br>基础选择器又包括:标签选择器，类选择器，id 选择器和通配符选择器</p><h4 id="2-2-标签选择器"><a href="#2-2-标签选择器" class="headerlink" title="2.2 标签选择器"></a>2.2 标签选择器</h4><p>标签选择器(元素选择器)是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式.</p><h4 id="2-3-类选择器"><a href="#2-3-类选择器" class="headerlink" title="2.3 类选择器"></a>2.3 类选择器</h4><p>如果想要差异化选择不同的标签单独选一个或者某几个标签可以使用类选择器<br>语法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.类名</span> <span class="token punctuation">&#123;</span>  <span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>类选择器使用”.”(英文点号)进行标识后面紧跟类名(自定义我们自己命名的).</li><li>可以理解为给这个标签起了一个名字来表示.</li><li>长名称或词组可以使用中横线来为选择器命名.</li><li>不要使用纯数字、中文等命名尽量使用英文字母来表示</li></ul><h4 id="2-4-类选择器-多类名"><a href="#2-4-类选择器-多类名" class="headerlink" title="2.4 类选择器-多类名"></a>2.4 类选择器-多类名</h4><p>我们可以给一个标签指定多个类名从而达到更多的选择目的.这些类名都可以选出这个标签简单理解就是一个标签有多个名字</p><ol><li>多类名使用方式</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redfont font-size20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>刘德华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>多类名开发中使用场景<br>(1)可以把一些标签元素相同的样式(共同的部分)放到一个类里面<br>(2)这些标签都可以调用这个公共的类，然后再调用自己独有的类<br>(3)从而节省 CSS 代码，统一修改非常方便</li></ol><h4 id="2-5-id-选择器"><a href="#2-5-id-选择器" class="headerlink" title="2.5 id 选择器"></a>2.5 id 选择器</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* id选择器的口诀:样式#定义结构id调用，只能调用一次别人切勿使用 */</span><span class="token selector">##pink</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>id 选择器和类选择器的区别<br>① 类选择器(class)好比人的名字一个人可以有多个名字，同时一个名字也可以被多个人使用.<br>② id 选择器好比人的身份证号码全中国是唯一的不得重复.<br>③ id 选择器和类选择器最大的不同在于使用次数上<br>④ 类选择器在修改样式中用的最多 id 选择器一般用于页面唯一性的元素上经常和 JavaScript 搭配使用.</p><h4 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h4><p><code>*</code>选择页面中全部元素<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span>  ...<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通配符选择器不需要调用自动就给所有的元素使用样式</li><li>在 CSS 中通配符选择器使用<code>*</code>定义它表示选取页面中所有元素(标签).</li></ul><h3 id="3-Font-字体属性"><a href="#3-Font-字体属性" class="headerlink" title="3. Font 字体属性"></a>3. Font 字体属性</h3><h4 id="3-1-Font-family-字体系列"><a href="#3-1-Font-family-字体系列" class="headerlink" title="3.1 Font-family 字体系列"></a>3.1 Font-family 字体系列</h4><p>CSS 使用 font-family 属性定义文本的字体系列.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial， <span class="token string">"Microsoft Yahei"</span> ， <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>  <span class="token comment">/* 多个字体的作用是按从左到右依次查看直到用户电脑中有该字体，则使用该字体显示 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体加引号</li><li>尽量使用系统默认自带字体保证在任何用户的浏览器中都能正确显示</li><li>最常见的几个字体 :body{ font-family:’Microsoft YaHei’，tahoma，arial，’Hiragino Sans GB’; }</li></ul><h4 id="3-2-Font-size-字体大小"><a href="#3-2-Font-size-字体大小" class="headerlink" title="3.2 Font-size 字体大小"></a>3.2 Font-size 字体大小</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS 使用 font-size 属性定义字体大小，单位为 px(像素)</p><ul><li>标题像素比较特殊，需要独特设置</li><li>px(像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为 16px</li><li>不同浏览器可能默认显示的字号大小不一致我们尽量给一个明确值大小不要默认大小</li><li>可以给 body 指定整个页面文字的大小</li></ul><h4 id="3-3-font-weight-字体粗细"><a href="#3-3-font-weight-字体粗细" class="headerlink" title="3.3 font-weight 字体粗细"></a>3.3 font-weight 字体粗细</h4><p>font-weight : normal | bold | bolder | lighter | number<br>参数:</p><ul><li>normal:正常的字体.相当于 number 为 400.声明此值将取消之前任何设置</li><li>bold:粗体.相当于 number 为 700.也相当于 b 对象的作用</li><li>bolder:IE5+ 特粗体</li><li>lighter:IE5+ 细体</li><li>number:IE5+ 100|200|300|400|500|600|700|800|900</li></ul><h4 id="3-4-font-style-文字样式-如斜体"><a href="#3-4-font-style-文字样式-如斜体" class="headerlink" title="3.4 font-style 文字样式(如斜体)"></a>3.4 font-style 文字样式(如斜体)</h4><p>CSS 使用 font-style 属性设置文本的风格.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值浏览器会显示标准的字体样式 font-style: normal;</td></tr><tr><td>italic</td><td>浏览器会显示斜体的字体样式.</td></tr></tbody></table><ul><li>注意:平时我们很少给文字加斜体反而要给斜体标签(em，i)改为不倾斜字体</li></ul><h4 id="3-5-字体复合属性"><a href="#3-5-字体复合属性" class="headerlink" title="3.5 字体复合属性"></a>3.5 字体复合属性</h4><p>字体属性可以把以上文字样式综合来写，这样可以更节约代码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-height font-family<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用 font 属性时必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略(取默认值)但必须保留 font-size 和 font-family 属性否则 font 属性将不起作用</li></ul><h3 id="4-文本属性"><a href="#4-文本属性" class="headerlink" title="4.文本属性"></a>4.文本属性</h3><ul><li>CSS Text(文本)属性可定义文本的外观比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等</li></ul><h4 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h4><p>color 属性用于定义文本的颜色.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-文本对齐"><a href="#4-2-文本对齐" class="headerlink" title="4.2 文本对齐"></a>4.2 文本对齐</h4><p>text-align 属性用于设置元素内文本内容的水平对齐方式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐(默认值)</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h4 id="4-3-装饰文本"><a href="#4-3-装饰文本" class="headerlink" title="4.3 装饰文本"></a>4.3 装饰文本</h4><p>text-decoration 属性规定添加到文本的修饰.可以给文本添加下划线、删除线、上划线等</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认.没有装饰线(最常用)</td></tr><tr><td>underline</td><td>下划线. 链接 a 自带下划线(常用)</td></tr><tr><td>overline</td><td>上划线.(几乎不用)</td></tr><tr><td>line-through</td><td>删除线.(不常用)</td></tr></tbody></table><p>可以设置 css 属性取出超链接标签的默认下划线</p><h4 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h4><p>text-indent 属性用来指定文本的第一行的缩进通常是将段落的首行缩进<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过设置该属性所有元素的第一行都可以缩进一个给定的长度甚至该长度可以是负值.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>em 是一个相对单位就是当前元素(font-size)1 个文字的大小，如果当前元素没有设置大小则会按照父元素的 1 个文字大小</p><h4 id="4-5-行间距"><a href="#4-5-行间距" class="headerlink" title="4.5 行间距"></a>4.5 行间距</h4><p>line-height 属性用于设置行间的距离(行高).可以控制文字行与行之间的距离</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/06/21/css/image.png" alt="alt text"></p><h3 id="5-CSS-的引入方式"><a href="#5-CSS-的引入方式" class="headerlink" title="5. CSS 的引入方式"></a>5. CSS 的引入方式</h3><h4 id="5-1-CSS-的三种样式表"><a href="#5-1-CSS-的三种样式表" class="headerlink" title="5.1 CSS 的三种样式表"></a>5.1 CSS 的三种样式表</h4><p>按照 CSS 样式书写的位置(或者引入的方式)CSS 样式表可以分为三大类</p><ol><li>行内样式表(行内式)</li><li>内部样式表(嵌入式)</li><li>外部样式表(链接式)</li></ol><h4 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h4><p>内部样式表(内嵌样式表)是写到 html 页面内部，是将所有的 CSS 代码抽取出来单独放到一个<code>&lt;style&gt;</code>标签中.<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>   div</span> <span class="token punctuation">&#123;</span>   <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span>12px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;style&gt;</code>标签理论上可以放在 HTML 文档的任何地方但一般会放在文档的<code>&lt;head&gt;</code>标签中</li><li>通过此种方式可以方便控制当前整个页面中的元素样式设置</li><li>代码结构清晰但是并没有实现结构与样式完全分离</li><li>使用内部样式表设定 CSS 通常也被称为嵌入式引入这种方式是我们练习时常用的方式</li></ul><h4 id="5-3-行内样式表"><a href="#5-3-行内样式表" class="headerlink" title="5.3 行内样式表"></a>5.3 行内样式表</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div style=<span class="token string">"color : red; font-size : 12px;"</span>>行内样式表&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>style 其实就是标签的属性</li><li>在双引号中间写法要符合 CSS 规范</li><li>可以控制当前的标签设置样式</li><li>由于书写繁琐并且没有体现出结构与样式相分离的思想所以不推荐大量使用只有对当前元素添加简单样式的时候可以考虑使用</li></ul><h4 id="5-4-外部样式表"><a href="#5-4-外部样式表" class="headerlink" title="5.4 外部样式表"></a>5.4 外部样式表</h4><p>实际开发都是外部样式表，适合于样式比较多的情况.核心是:样式单独写到 CSS 文件中之后把 CSS 文件引入到 HTML 页面中使用.</p><ul><li>引入外部样式表分为两步</li></ul><ol><li>新建一个后缀名为.css 的样式文件把所有 CSS 代码都放入此文件中.</li><li>在 HTML 页面中使用<code>&lt;link&gt;</code>标签引入这个文件.<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></li></ol><h3 id="6-Chrome-调试工具"><a href="#6-Chrome-调试工具" class="headerlink" title="6. Chrome 调试工具"></a>6. Chrome 调试工具</h3><h4 id="6-1-使用调试工具"><a href="#6-1-使用调试工具" class="headerlink" title="6.1 使用调试工具"></a>6.1 使用调试工具</h4><ul><li>Ctrl+滚轮 可以放大开发者工具代码大小.</li><li>左边是 HTML 元素结构右边是 CSS 样式</li><li>右边 CSS 样式可以改动数值(左右箭头或者直接输入)和查看颜色.</li><li>Ctrl +0 复原浏览器大小.</li><li>如果点击元素发现右侧没有样式引入极有可能是类名或者样式引入错误如果有样式但是样式前面有黄色叹号提示则是样式属性书写错误.</li></ul><h3 id="7-Emmet-语法"><a href="#7-Emmet-语法" class="headerlink" title="7. Emmet 语法"></a>7. Emmet 语法</h3><p>Emmet 语法的前身是 Zen coding，它使用缩写，来提高 htm&#x2F;css 的编写速度，Vscode 内部已经集成该语法</p><ol><li>快速生成 HTML 结构语法</li><li>快速生成 CSS 样式语法</li></ol><h4 id="7-1-快速生成-HTML-结构语法"><a href="#7-1-快速生成-HTML-结构语法" class="headerlink" title="7.1 快速生成 HTML 结构语法"></a>7.1 快速生成 HTML 结构语法</h4><ol><li>生成标签 直接输入标签名按 tab 键即可 比如 div 然后 tab 键，就可以生成<code>&lt;div&gt;&lt;/div&gt;</code></li><li>如果想要生成多个相同标签 加上<code>*</code>就可以了比如 div*3 就可以快速生成 3 个 div</li><li>如果有父子级关系的标签，可以用<code>&gt;</code>比如 ul &gt; li 就可以了</li><li>如果有兄弟关系的标签，用 <code>+</code> 就可以了 比如 div + p</li><li>如果生成带有类名或者 id 名字的，直接写<code>.demo</code> 或者 <code>#two</code> 然后 tab 键就可以了</li><li>如果生成的 div 类名是有顺序的，可以用自增符号 <code>$</code>， 如 <code>.demo$*5</code></li><li>想要生成的标签带文字，可以使用<code>&#123;&#125;</code>包含你的文字，如 <code>div&#123;text&#125;</code></li></ol><h4 id="7-2-快速生成-CSS-样式语法"><a href="#7-2-快速生成-CSS-样式语法" class="headerlink" title="7.2 快速生成 CSS 样式语法"></a>7.2 快速生成 CSS 样式语法</h4><ol><li>比如 w200 按 tab 可以生成 width : 200px;</li><li>比如 lh26 按 tab 可以生成 line-height : 26px;</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>       .one</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/* w200 */</span>           <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>           <span class="token comment">/* tac */</span>           <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>           <span class="token comment">/* ti2em */</span>           <span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>           <span class="token comment">/* tdn */</span>           <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   &lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-CSS-的复合选择器"><a href="#8-CSS-的复合选择器" class="headerlink" title="8. CSS 的复合选择器"></a>8. CSS 的复合选择器</h3><h4 id="8-1-什么是复合选择器"><a href="#8-1-什么是复合选择器" class="headerlink" title="8.1 什么是复合选择器"></a>8.1 什么是复合选择器</h4><p>在 CSS 中，可以根据选择器的类型把选择器分为基础选择器和复合选择器，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的.</p><ul><li>复合选择器可以更准确、更高效的选择目标元素(标签)</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括:后代选择器、子选择器、并集选择器、伪类选择器等等</li></ul><h4 id="8-2-后代选择器"><a href="#8-2-后代选择器" class="headerlink" title="8.2 后代选择器"></a>8.2 后代选择器</h4><p><em>后代选择器</em>又称为<em>包含选择器</em>，可以选择父元素里面子元素.其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔.当标签发生嵌套时，内层标签就成为外层标签的后代.<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">元素1 元素2</span><span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语法表示选择<strong>元素 1 里面的所有元素 2(后代元素)</strong><br>例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul li</span> <span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span> /* 选择 u1 里面所有的 1i标签元素/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>元素 1 和 元素 2 中间用<em>空格隔开</em></li><li>元素 1 是父级，元素 2 是子级最终选择的是<em>元素 2</em></li><li>元素 2 可以是儿子，也可以是孙子等，<em>只要是元素 1 的后代即可</em></li><li>元素 1 和 元素 2 可以是<em>任意基础选择器</em>，如<code>.nav li &#123;color: yellow;&#125;</code></li></ul><h4 id="8-3-子选择器-重要"><a href="#8-3-子选择器-重要" class="headerlink" title="8.3 子选择器(重要 )"></a>8.3 子选择器(重要 )</h4><p>**子元素选择器(子选择器)*<em>只能选择作为某元素的最近一级子元素.简单理解就是选</em>亲儿子*元素<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">元素1>元素2</span> <span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语法表示 <em>选择元素 1 里面的所有直接后代(子元素)元素 2.</em><br>例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div > p</span><span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span> <span class="token comment">/* 选择 div 里面所有最近一级 p 标签元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>元素 1 和 元素 2 中间用 <strong>大于号</strong> 隔开</li><li>元素 1 是父级，元素 2 是子级，最终选择的是元素 2</li><li>可以嵌套使用，如<code>.nav&gt;p&gt;a &#123;color: yellow;&#125;</code></li></ul><h4 id="8-4-并集选择器"><a href="#8-4-并集选择器" class="headerlink" title="8.4 并集选择器"></a>8.4 并集选择器</h4><ul><li>并集选择器可以选择多组标签，同时为他们定义相同的样式.通常用于集体声明.</li><li>并集选择器是各选择器通过英文逗号<code>，</code>连接而成，任何形式的选择器都可以作为并集选择器的一部分.<br>语法:</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">元素1，元素2</span><span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语法表示选择<strong>元素 1 和 元素 2</strong>.</p><p>例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul，div</span><span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span>  <span class="token comment">/* 选择 ul和 div标签元素 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>元素 1 和元素 2 中间用<strong>逗号隔开</strong></li><li>逗号可以理解为<strong>和</strong>的意思</li><li>并集选择器通常用于集体声明</li></ul><h4 id="8-5-伪类选择器"><a href="#8-5-伪类选择器" class="headerlink" title="8.5 伪类选择器"></a>8.5 伪类选择器</h4><p><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第 1 个，第 n 个元素.<br>伪类选择器书写最大的特点是<strong>用冒号:<strong>表示，比如:hover、:first-child<br>因为伪类选择器很多，比如有链接伪类、结构伪类等，所以这里先给大家讲解常用的</strong>链接伪类选择器</strong></p><h5 id="8-5-1-链接伪类选择器"><a href="#8-5-1-链接伪类选择器" class="headerlink" title="8.5.1 链接伪类选择器"></a>8.5.1 链接伪类选择器</h5><p>a:link 选择所有未被访问的链接<br>a:visited 选择所有已被访问的链接<br>a:hover 选择鼠标指针位于其上的链接<br>a:active 选择活动链接(鼠标按下未弹起的链接)</p><ul><li>链接伪类选择器注意事项</li></ul><ol><li>为了确保生效，请按照<strong>LVHA</strong>的循顺序声明:<em>link-:visited-:hover-:active</em></li><li>因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li></ol><ul><li>链接伪类选择器实际工作开发中的写法</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*a 是标签选择器 所有的链接 */</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*:hover 是链接伪类选择器 鼠标经过 */</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment">/*鼠标经过的时候，由原来的灰色变成了红色*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-5-2-focus-伪类选择器"><a href="#8-5-2-focus-伪类选择器" class="headerlink" title="8.5.2 :focus 伪类选择器"></a>8.5.2 :focus 伪类选择器</h5><p>:focus 伪类选择器用于选取获得焦点的表单元素<br>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对于表单元素来说.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input:focus</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-6-总结"><a href="#8-6-总结" class="headerlink" title="8.6 总结"></a>8.6 总结</h4><table><thead><tr><th align="center">选择器</th><th align="center">作用</th><th align="center">标签</th><th align="center">语法</th><th align="center">示例代码</th></tr></thead><tbody><tr><td align="center">全局选择器</td><td align="center">选择所有元素</td><td align="center">*</td><td align="center">无</td><td align="center"><code>* &#123;样式&#125;</code></td></tr><tr><td align="center">元素选择器</td><td align="center">选择页面中所有特定的元素</td><td align="center">任意 HTML 标签</td><td align="center">标签名</td><td align="center"><code>元素名 &#123;样式&#125;</code></td></tr><tr><td align="center">类选择器</td><td align="center">选择具有特定 class 的所有元素</td><td align="center">任意带有 class 属性的 HTML 元素</td><td align="center">.类名</td><td align="center"><code>.类名 &#123;样式&#125;</code></td></tr><tr><td align="center">ID 选择器</td><td align="center">选择具有特定 ID 的元素</td><td align="center">任意带有 ID 属性的 HTML 元素</td><td align="center">#ID 名</td><td align="center"><code>#ID名 &#123;样式&#125;</code></td></tr><tr><td align="center">属性选择器</td><td align="center">根据属性选择元素</td><td align="center">任意带有特定属性的 HTML 元素</td><td align="center">[属性名]</td><td align="center"><code>[属性名] &#123;样式&#125;</code></td></tr><tr><td align="center">子选择器</td><td align="center">选择指定元素的直接子元素</td><td align="center">任意 HTML 元素</td><td align="center">父级 &gt; 子级</td><td align="center"><code>父级 &gt; 子级 &#123;样式&#125;</code></td></tr><tr><td align="center">后代选择器</td><td align="center">选择指定元素的所有后代（嵌套的子元素）</td><td align="center">任意 HTML 元素</td><td align="center">父级 子级</td><td align="center"><code>父级 子级 &#123;样式&#125;</code></td></tr><tr><td align="center">相邻兄弟选择器</td><td align="center">选择紧接在指定元素之后的元素</td><td align="center">任意 HTML 元素</td><td align="center">元素 1 + 元素 2</td><td align="center"><code>元素1 + 元素2 &#123;样式&#125;</code></td></tr><tr><td align="center">通用兄弟选择器</td><td align="center">选择指定元素之后的所有兄弟元素</td><td align="center">任意 HTML 元素</td><td align="center">元素 1 ~ 元素 2</td><td align="center"><code>元素1 ~ 元素2 &#123;样式&#125;</code></td></tr><tr><td align="center">群组选择器</td><td align="center">同时选择多个选择器</td><td align="center">任意 HTML 元素</td><td align="center">选择器 1，选择器 2</td><td align="center"><code>选择器1， 选择器2 &#123;样式&#125;</code></td></tr><tr><td align="center">focus 选择器</td><td align="center">选择获得焦点的 input 元素</td><td align="center">input 标签</td><td align="center">无</td><td align="center"><code>input:focus &#123;样式&#125;</code></td></tr><tr><td align="center">:hover 选择器</td><td align="center">选择鼠标悬浮的元素</td><td align="center">任意 HTML 标签</td><td align="center">选择器:hover</td><td align="center"><code>选择器:hover &#123;样式&#125;</code></td></tr><tr><td align="center">子串属性选择器</td><td align="center">选择属性中包含特定子串的元素</td><td align="center">任意带有属性的 HTML 标签</td><td align="center">[属性名*&#x3D;值]</td><td align="center"><code>[属性名*=值] &#123;样式&#125;</code></td></tr><tr><td align="center">开始子串属性选择器</td><td align="center">选择属性值以特定子串开始的元素</td><td align="center">任意带有属性的 HTML 标签</td><td align="center">[属性名^&#x3D;值]</td><td align="center"><code>[属性名^=值] &#123;样式&#125;</code></td></tr><tr><td align="center">结束子串属性选择器</td><td align="center">选择属性值以特定子串结束的元素</td><td align="center">任意带有属性的 HTML 标签</td><td align="center">[属性名$&#x3D;值]</td><td align="center"><code>[属性名$=值] &#123;样式&#125;</code></td></tr><tr><td align="center">伪类选择器</td><td align="center">选择元素的特定状态</td><td align="center">任意 HTML 标签</td><td align="center">选择器:伪类</td><td align="center"><code>选择器:伪类 &#123;样式&#125;</code></td></tr><tr><td align="center">伪元素选择器</td><td align="center">选择元素指定的部分</td><td align="center">任意 HTML 标签</td><td align="center">选择器::伪元素</td><td align="center"><code>选择器::伪元素 &#123;样式&#125;</code></td></tr></tbody></table><h3 id="9-CSS-的元素选择模式"><a href="#9-CSS-的元素选择模式" class="headerlink" title="9.CSS 的元素选择模式"></a>9.CSS 的元素选择模式</h3><h4 id="9-1-什么是元素显示模式"><a href="#9-1-什么是元素显示模式" class="headerlink" title="9.1 什么是元素显示模式"></a>9.1 什么是元素显示模式</h4><p>作用:网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点<strong>可以更好的布局我们的网页</strong><br>元素显示模式就是<strong>元素(标签)以什么方式进行显示</strong>，比如<code>&lt;div&gt;</code>自己占一行，比如一行可以放多个<code>&lt;span&gt;</code>.</p><ul><li>HTML 元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型</li></ul><h4 id="9-2-块元素"><a href="#9-2-块元素" class="headerlink" title="9.2 块元素"></a>9.2 块元素</h4><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素</p><ul><li>块级元素的特点:<br>① 比较霸道，自己独占一行.<br>② 高度，宽度、外边距以及内边距都可以控制.<br>③ 宽度默认是容器(父级宽度)的 100%.<br>④ 是一个容器及盒子，里面可以放行内或者块级元素.</li><li>注意:</li></ul><ol><li>文字类的元素内不能使用块级元素</li><li><code>&lt;p&gt;</code>标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li><li>同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其他块级元素</li></ol><h4 id="9-3-行内元素"><a href="#9-3-行内元素" class="headerlink" title="9.3 行内元素"></a>9.3 行内元素</h4><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><ul><li>行内元素的特点:<br>① 相邻行内元素在一行上，一行可以显示多个，<br>② 高、宽直接设置是无效的。<br>③ 默认宽度就是它本身内容的宽度<br>④ 行内元素只能容纳文本或其他行内元素<br><strong>注意</strong></li></ul><ol><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</li></ol><h4 id="9-4-行内块元素"><a href="#9-4-行内块元素" class="headerlink" title="9.4 行内块元素"></a>9.4 行内块元素</h4><p>在行内元素中有几个特殊的标签，—–<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>—-，它们<strong>同时具有块元素和行内元素的特点</strong>.有些资料称它们为行内块元素</p><ul><li>行内块元素的特点:<br>① 和相邻行内元素(行内块)在一行上，但是他们之间会有<strong>空白缝隙</strong>。一行可以显示多个(行内元素特点)。<br>② 默认宽度就是它本身内容的宽度(行内元素特点)。<br>③ 高度，行高、外边距以及内边距都可以控制(块级元素特点)。</li></ul><h4 id="9-5-元素显示模式总结"><a href="#9-5-元素显示模式总结" class="headerlink" title="9.5 元素显示模式总结"></a>9.5 元素显示模式总结</h4><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的 100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h4 id="9-6-元素显示模式转换"><a href="#9-6-元素显示模式转换" class="headerlink" title="9.6 元素显示模式转换"></a>9.6 元素显示模式转换</h4><p>特殊情况下，我们需要元素模式的转换，简单理解:一个模式的元素需要另外一种模式的特性比如想要增加链接<code>&lt;a&gt;</code>的触发范围。</p><ul><li>转换为块元素:display: block</li><li>转换为行内块元素:display: inline-block;</li><li>转换成行内元素:display: inline</li><li>转变成可伸缩的盒子:display: flex;</li><li>转变成网格盒子:display: grid;</li></ul><h4 id="9-7-一个小技巧-单行文字垂直居中的代码"><a href="#9-7-一个小技巧-单行文字垂直居中的代码" class="headerlink" title="9.7 一个小技巧 单行文字垂直居中的代码"></a>9.7 一个小技巧 单行文字垂直居中的代码</h4><p>CSS 没有给我们提供文字垂直居中的代码.这里我们可以使用一个小技巧来实现解决方案: 让文字的行高等于盒子的高度 就可以让文字在当前盒子内垂直居中<br>例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>        div</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    &lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><img src="/2024/06/21/css/line-height.png" alt="alt text"></p><p>其实原理是<br><img src="/2024/06/21/css/%E5%8E%9F%E7%90%86.png" alt="alt text"></p><h3 id="10-CSS-的背景样式"><a href="#10-CSS-的背景样式" class="headerlink" title="10 CSS 的背景样式"></a>10 CSS 的背景样式</h3><p>通过 CSS 背最属性，可以给页面元素添加背景样式。背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等</p><h4 id="10-1-背景颜色"><a href="#10-1-背景颜色" class="headerlink" title="10.1 背景颜色"></a>10.1 背景颜色</h4><p>background-color 属性定义了背景的颜色值</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> 颜色值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认是 transparent 即透明</p><h4 id="10-2-背景图片"><a href="#10-2-背景图片" class="headerlink" title="10.2 背景图片"></a>10.2 背景图片</h4><p><strong>background-image</strong>属性描述了元素的背景图像。实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片，<br>优点是非常便于控制位置.(精灵图也是一种运用场景)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> none|<span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-3-背景平铺"><a href="#10-3-背景平铺" class="headerlink" title="10.3 背景平铺"></a>10.3 背景平铺</h4><p>如果需要在 HTML 页面上对背景图像进行平铺，可以使用<strong>background-repeat</strong>属性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat|no-repeat|repeat-x|repeat-y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数值</th><th>描述</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像会在垂直方向和水平方向重复（默认值）</td></tr><tr><td>no-repeat</td><td>背景图像不会重复</td></tr><tr><td>repeat-x</td><td>背景图像仅在水平方向重复</td></tr><tr><td>repeat-y</td><td>背景图像仅在垂直方向重复</td></tr></tbody></table><h4 id="10-4-背景图片位置"><a href="#10-4-背景图片位置" class="headerlink" title="10.4 背景图片位置"></a>10.4 背景图片位置</h4><p>利用 <strong>background-position</strong>属性可以改变图片在背景中的位置。</p><ol><li>参数是方位名词</li></ol><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<strong>left top</strong> 和 <strong>top left</strong> 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul><ol start="2"><li>参数是精确单位</li></ol><ul><li>如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</li></ul><ol start="3"><li>混合坐标</li></ol><ul><li><em>形参</em>x，y 轴顺序不变，如<strong>20px center</strong>为<strong>水平距左边界 20px，垂直居中</strong></li></ul><h4 id="10-5-背景附着-背景图像固定"><a href="#10-5-背景附着-背景图像固定" class="headerlink" title="10.5 背景附着(背景图像固定)"></a>10.5 背景附着(背景图像固定)</h4><p><strong>background-attachment</strong>属性设置背景图像是否固定或者随着页面的其余部分滚动。<br>background-attachment 后期可以制作视差滚动的效果</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-attachment</span><span class="token punctuation">:</span> scroll|fixed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h4 id="10-6-背景复合写法"><a href="#10-6-背景复合写法" class="headerlink" title="10.6 背景复合写法"></a>10.6 背景复合写法</h4><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性<strong>background</strong>中，从而节约代码量<br>当使用简写属性时，没有特定的书写顺序，一般习惯约定顺序为:<strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong></p><h4 id="10-7-背景色半透明"><a href="#10-7-背景色半透明" class="headerlink" title="10.7 背景色半透明"></a>10.7 背景色半透明</h4><p>CSS3 为我们提供了背最颜色半透明的效，</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0，0，0，0.3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最后一个参数是 alpha 透明度，取值范围在 0~1 之间</li><li>我们习惯把 0.3 的 0 省略掉，写为 background:rgba(0，0，0，.3);</li><li>注意:背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3 新增属性，是 IE9+版本浏览器才支持的</li><li>但是现在实际开发，我们不太关注兼容性写法了，可以放心使用</li></ul><table><thead><tr><th>属性</th><th>描述</th><th>示例&#x2F;相关</th></tr></thead><tbody><tr><td>background</td><td>背景属性</td><td>$background: #fff url(‘bg.png’) no-repeat top left;</td></tr><tr><td>background-color</td><td>背景颜色</td><td>$background-color: #f00;</td></tr><tr><td>background-image</td><td>背景图像</td><td>$background-image: url(‘bg.png’);</td></tr><tr><td>background-repeat</td><td>背景图像的重复方式</td><td>$background-repeat: no-repeat;</td></tr><tr><td>background-attachment</td><td>背景图像的定位方式</td><td>$background-attachment: fixed;</td></tr><tr><td>background-position</td><td>背景图像的位置</td><td>$background-position: top right;</td></tr><tr><td>background-size</td><td>背景图像的尺寸</td><td>$background-size: cover;</td></tr><tr><td>background-origin</td><td>背景图片的定位区域</td><td>$background-origin: content-box;</td></tr><tr><td>background-clip</td><td>背景绘制区域</td><td>$background-clip: padding-box;</td></tr><tr><td>background-blend-mode</td><td>背景混合模式</td><td>$background-blend-mode: multiply;</td></tr></tbody></table><h4 id="10-8-背景总结"><a href="#10-8-背景总结" class="headerlink" title="10.8 背景总结"></a>10.8 背景总结</h4><p><img src="/2024/06/21/css/bg-tt.png" alt="alt text"></p><h3 id="11-CSS-三大特性"><a href="#11-CSS-三大特性" class="headerlink" title="11 CSS 三大特性"></a>11 CSS 三大特性</h3><p>CSS 有三个非常重要的三个特性:层善性、继承性、优先级。</p><h4 id="11-1-层叠性"><a href="#11-1-层叠性" class="headerlink" title="11.1 层叠性"></a>11.1 层叠性</h4><p>相同选择器给设置相同的样式，此时一个样式就会**覆盖(层叠)**另一个冲突的样式。层叠性主要解决样式冲突的问题</p><ul><li>层叠性原则:</li></ul><ol><li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ol><h4 id="11-2-继承性"><a href="#11-2-继承性" class="headerlink" title="11.2 继承性"></a>11.2 继承性</h4><p>CSS 中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。简单的理解就是:子承父业</p><h4 id="11-3-优先级"><a href="#11-3-优先级" class="headerlink" title="11.3 优先级"></a>11.3 优先级</h4><p><img src="/2024/06/21/css/%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="alt text"><br>优先级注意点:</p><ol><li>权重是有 4 组数字组成,但是不会有进位。</li><li>可以理解为类选择器永远大于元素选择器, id 选择器永远大于类选择器,以此类推.</li><li>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</li><li>可以简单记忆法: 通配符和继承权重为 0,标签选择器为 1,类(伪类)选择器为 10,id 选择器 100,行内样式表为 1000,!important 无穷大</li><li>继承的权重是 0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</li></ol><ul><li>权重叠加:如果是复合选择器，则会有权重叠加，需要计算权重，</li></ul><h2 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h2><p>页面布局要学习三大核心,<strong>盒子模型</strong>,浮动和定位,学习好<strong>盒子模型</strong>能非常好的帮助我们布局页面.<br>网页布局过程:</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子 BOX</li><li>利用 CSS 设置好盒子样式，然后摆放到相应位置</li><li>往盒子里面装内容网页布局的核心本质:就是利用 CSS 摆盒子</li></ol><h3 id="1-盒子模型-Box-Model"><a href="#1-盒子模型-Box-Model" class="headerlink" title="1. 盒子模型(Box Model)"></a>1. 盒子模型(Box Model)</h3><h4 id="1-1-组成"><a href="#1-1-组成" class="headerlink" title="1.1 组成"></a>1.1 组成</h4><p>所谓盒子模型:就是把 HTML 页面中的布局元素看作是一个矩形的盒子,也就是一个盛装内容的容器。<br>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括:边框、外边距、内边距、和实际内容<br><img src="/2024/06/21/css/boxmodel.png" alt="alt text"></p><h4 id="1-2-边框-border"><a href="#1-2-边框-border" class="headerlink" title="1.2 边框 border"></a>1.2 边框 border</h4><p>border 可以设置元素的边框。边框有三部分组成:边框宽度(粗细),边框样式,边框颜色<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  <span class="token comment">/* border-width边框的粗细,一般都用px */</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>  <span class="token comment">/* border-style 边框的样式 solid 实线边框  dashed虚线 dotted点状*/</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>  <span class="token comment">/* 颜色边框 */</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>边框简写: <strong>border : pink 2px dashed;</strong> 无顺序<br>边框分开写法: <strong>border-top:1pxsolid red;</strong> &#x2F;_只设定上边框，其余同理 _&#x2F;</p><h4 id="1-3-表格的细线边框"><a href="#1-3-表格的细线边框" class="headerlink" title="1.3 表格的细线边框"></a>1.3 表格的细线边框</h4><p><strong>border-collapse</strong> 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>collapse</strong>单词是合并的意思</li><li><strong>border-collapse:collapse;</strong> 表示相邻边框合并在一起</li></ul><h4 id="1-5-边框会影响盒子实际大小"><a href="#1-5-边框会影响盒子实际大小" class="headerlink" title="1.5 边框会影响盒子实际大小"></a>1.5 边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决:</p><ol><li>测量盒子大小的时候,不量边框!</li><li>如果测量的时候包含了边框,则需要 width&#x2F;height 减去边框宽度</li><li></li></ol><h4 id="1-4-内边距-padding"><a href="#1-4-内边距-padding" class="headerlink" title="1.4 内边距(padding)"></a>1.4 内边距(padding)</h4><p><strong>padding</strong> 属性用于设置内边距，即边框与内容之间的距离。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 内边距简写(复合)方法: */</span><span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding: 5px;</td><td>1 个值，代表上下左右都有 5 像素内边距;</td></tr><tr><td>padding: 5px 10px;</td><td>2 个值，代表上下内边距是 5 像素 左右内边距是 10 像素;</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3 个值，代表上内边距 5 像素 左右内边距 10 像素 下内边距 20 像素;</td></tr><tr><td>padding: 5px 10px 20px 30px;</td><td>4 个值，上是 5 像素右 10 像素下 20 像素左是 30 像素 顺时针</td></tr></tbody></table><p>小技巧:如果遇到盒子里面的字数不一样多,设置宽高会不合适,可以使用<strong>padding 撑开盒子,不设置宽高</strong></p><h4 id="1-5-外边距-margin"><a href="#1-5-外边距-margin" class="headerlink" title="1.5 外边距 margin"></a>1.5 外边距 margin</h4><p><strong>margin</strong> 属性用于设置外边距，即控制盒子和盒子之间的距离</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p><strong>margin</strong>简写方式和<strong>padding</strong>意义一样</p><h4 id="1-6-外边距典型应用"><a href="#1-6-外边距典型应用" class="headerlink" title="1.6 外边距典型应用"></a>1.6 外边距典型应用</h4><p>外边距可以让块级盒子水平居中，但是必须满足两个条件:</p><ol><li>盒子必须指定了宽度(width)</li><li>盒子左右的外边距都设置为 auto</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的写法,以下三种都可以:</p><ul><li>margin-left: auto; margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;<br>注意:以上方法是让块级元素水平居中 <strong>行内元素或者行内块元素水平居中给其父元素添加 text-align:center</strong> 即可。</li></ul><h4 id="1-7-嵌套块元素垂直外边距的塌陷"><a href="#1-7-嵌套块元素垂直外边距的塌陷" class="headerlink" title="1.7 嵌套块元素垂直外边距的塌陷"></a>1.7 嵌套块元素垂直外边距的塌陷</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。<br>对于两个嵌套关系(父子关系)的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><ul><li>解决方案：</li><li>为父元素添加上边框</li><li>为父元素设定上内边距</li><li>为父元素添加属性 overflow: hidden;推荐</li></ul><h4 id="1-8-网页元素内外边距的清除"><a href="#1-8-网页元素内外边距的清除" class="headerlink" title="1.8 网页元素内外边距的清除"></a>1.8 网页元素内外边距的清除</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意:行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p><h4 id="1-9-圆角边框-border-radius"><a href="#1-9-圆角边框-border-radius" class="headerlink" title="1.9 圆角边框 border_radius"></a>1.9 圆角边框 border_radius</h4><p>在 CSS3 中,新增了圆角边框样式，这样我们的盒子就可以变圆角了<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>radius 半径(圆的半径) 原理:(椭)圆与边框的交集形成圆角效果<br><img src="/2024/06/21/css/%E5%9C%86%E8%A7%92%E5%8E%9F%E7%90%86.png" alt="alt text"></p><ul><li>参数值可以为数值或百分比的形式</li><li>如果是<code>正方形</code>，想要设置为一个圆，把数值修改为高度或者宽度的<code>一半</code>即可，或者直接写为<code>50%</code></li><li>如果是个<code>矩形</code>,设置为高度的一半就可以做<code>圆角矩线</code><br>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开写 border-top-left-radius,border-bottom-left-radius, border-top-right-radius 和 border-bottom-right-radius</li></ul><h4 id="1-10-盒子阴影-box-shadow"><a href="#1-10-盒子阴影-box-shadow" class="headerlink" title="1.10 盒子阴影 box-shadow"></a>1.10 盒子阴影 box-shadow</h4><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td></tr><tr><td>blur</td><td>可选。模糊距离。</td></tr><tr><td>spread</td><td>可选。阴影的尺寸。</td></tr><tr><td>color</td><td>可选。阴影的颜色。可使用 CSS 颜色值。</td></tr><tr><td>inset</td><td>可选。将外阴影（outset）改为内阴影。</td></tr></tbody></table><h4 id="1-11-文字阴影"><a href="#1-11-文字阴影" class="headerlink" title="1.11 文字阴影"></a>1.11 文字阴影</h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选,模糊的距离</td></tr><tr><td>color</td><td>参阅 CSS 颜色值可选.阴影的颜色</td></tr></tbody></table><h3 id="2-CSS-浮动"><a href="#2-CSS-浮动" class="headerlink" title="2.CSS 浮动"></a>2.CSS 浮动</h3><h4 id="2-1-浮动-float"><a href="#2-1-浮动-float" class="headerlink" title="2.1 浮动(float)"></a>2.1 浮动(float)</h4><h5 id="a-传统网页布局的三种方式"><a href="#a-传统网页布局的三种方式" class="headerlink" title="a.传统网页布局的三种方式"></a>a.传统网页布局的三种方式</h5><p>网页布局的本质–用 CSS 来摆放盒子.把盒子摆放到相应位置<br>CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)</p><ul><li>普通流(标准流&#x2F;文档流)<br>所谓的标准流:就是标签按照规定好默认方式排列<ol><li>块级元素会独占一行，从上向下顺序排列。常用元素:div、hr、p、h1~h6、ul、ol、dl、form、table</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素:span、a、i、em 等</li></ol></li><li>浮动<ul><li>总结:有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式.</li><li>浮动最典型的应用:可以让多个块级元素一行内排列显示网页布局第一准则:多个块级元素纵向排列找标准流，多个块级元素向排列找浮动，</li></ul></li><li>定位</li></ul><h5 id="b-什么是浮动"><a href="#b-什么是浮动" class="headerlink" title="b.什么是浮动?"></a>b.什么是浮动?</h5><p><code>float</code>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="c-浮动特性"><a href="#c-浮动特性" class="headerlink" title="c.浮动特性"></a>c.浮动特性</h5><ul><li>浮动元素会脱离标准流(脱标)(浮动元素飘在标准流的上面,不占位置，脱标)</li><li>浮动的盒子不再保留原先的位置</li><li>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。</li><li>注意:浮动的元素是互相贴靠在一起的(不会有缝隙),如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li><li>浮动元素会具有行内块元素特性。<ol><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li>行内元素同理</li></ol></li></ul><h5 id="浮动元素经常搭配标准父级搭配使用"><a href="#浮动元素经常搭配标准父级搭配使用" class="headerlink" title="浮动元素经常搭配标准父级搭配使用"></a>浮动元素经常搭配标准父级搭配使用</h5><ul><li>案例: 小米布局示例<br>**网页布局第二标准:**先设置盒子大小,之后设置盒子的位置</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">    &lt;title>浮动布局练习3&lt;/title>    &lt;style>        .box</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 1226px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 615px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.left</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 234px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 615px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.right</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 615px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.right>div</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 234px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 150<span class="token punctuation">,</span> 60<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div class=<span class="token string">"box"</span>>        &lt;div class=<span class="token string">"left"</span>>左青龙&lt;/div>        &lt;div class=<span class="token string">"right"</span>>            &lt;div>1&lt;/div>            &lt;div>2&lt;/div>            &lt;div>3&lt;/div>            &lt;div>4&lt;/div>            &lt;div>5&lt;/div>            &lt;div>6&lt;/div>            &lt;div>7&lt;/div>            &lt;div>8&lt;/div>        &lt;/div>    &lt;/div>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="常见网页布局"><a href="#常见网页布局" class="headerlink" title="常见网页布局"></a>常见网页布局</h5><img src="/2024/06/21/css/常见网页布局.png" alt="alt text" style="zoom:50%;"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">    &lt;title>常见网页布局 &lt;/title>    &lt;style>        *</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">li</span> <span class="token punctuation">&#123;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.top</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.banner</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 980px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 980px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box li</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 237px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box ul .last</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* 只要是通栏的盒子,不需要指定宽度 */</span>            <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>206<span class="token punctuation">,</span> 115<span class="token punctuation">,</span> 115<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div class=<span class="token string">"top"</span>>top&lt;/div>    &lt;div class=<span class="token string">"banner"</span>>banner&lt;/div>    &lt;div class=<span class="token string">"box"</span>>        &lt;ul>            &lt;li>1&lt;/li>            &lt;li>2&lt;/li>            &lt;li>3&lt;/li>            &lt;li class=<span class="token string">"last"</span>>4&lt;/li>        &lt;/ul>    &lt;/div>    &lt;div class=<span class="token string">"footer"</span>>footer&lt;/div>&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h5><ol><li>浮动和标准流的父盒子搭配。</li></ol><p>先用标准流的父元素排列上下位置,之后内部子元素采取浮动排列左右位置</p><ol start="2"><li>一个元素浮动了，理论上其余的兄弟元素也要浮动。</li></ol><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题</p><p><strong>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</strong></p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><h5 id="为什么需要清除浮动"><a href="#为什么需要清除浮动" class="headerlink" title="为什么需要清除浮动?"></a>为什么需要清除浮动?</h5><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置,最后父级盒子高度为 0 时，就会影响下面的标准</p><p>流盒子。</p><p><img src="/2024/06/21/css/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png" alt="image-20240804203559187"></p><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li></ul><h5 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h5><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度,就不会影响下面的标准流了</li></ul><h5 id="清除浮动代码"><a href="#清除浮动代码" class="headerlink" title="清除浮动代码"></a>清除浮动代码</h5><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>我们实际工作中 ，几乎只用<strong>clear: both;</strong></p><p><strong>清除浮动的策略是: 闭合浮动</strong>,只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子</p><h5 id="清除浮动方法"><a href="#清除浮动方法" class="headerlink" title="清除浮动方法"></a>清除浮动方法</h5><ol><li><p><strong>额外标签法</strong>也称为隔墙法，是<strong>W3C</strong>推荐的做法。</p><ul><li><p>清除浮动 – 额外标签法</p><p>额外标签法会在浮动元素末尾添加一个空的标签。例如<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签</p><p>(如<code>&lt;br/&gt;</code>等,<strong>但只能是块级元素,不能是行内元素</strong>)。</p><ul><li>优点:通俗易懂，书写方便</li><li>缺点:添加许多无意义的标签，结构化较差</li></ul></li></ul></li><li><p>父级添加 <code>overflow</code> 属性</p><ul><li>可以给父级添加 <strong>overflow</strong> 属性，将其属性值设置为<code>hidden</code>、<code>auto</code> 或 <code>scroll</code>.<ul><li>优点:代码简洁</li><li>缺点:无法显示溢出的部分</li></ul></li></ul></li><li><p>父级添加 <code>after</code> 伪元素</p></li></ol><ul><li><code>:after</code>方式是额外标签法的升级版。也是给父元素添加<code>clearfix</code>类属性后,在 css 中添加下面代码</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*IE6、7专有*/</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点:没有增加标签，结构更简单,结构语义化正确</li><li>缺点:照顾低版本浏览器</li></ul><ol start="3"><li>父级添加双伪元素,也是给父元素添加<code>clearfix</code>类属性后</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Ps-切图"><a href="#Ps-切图" class="headerlink" title="Ps 切图"></a>Ps 切图</h3><ul><li><p>常见的图片格式</p><ul><li><p>jpg 图像格式:JPEG(JPG)对色彩的信息保留较好，高清，颜色较多，<strong>我们产品类的图片经常用 jpg 格式的</strong></p></li><li><p>gif 图像格式:GIF 格式最多只能储存 256 色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果,<strong>实际经常用于一些图片小动画效果.</strong></p></li><li><p>png 图像格式是一种新兴的网络图形格式，结合了 GIF 和 JPEG 的优点，具有存储形式丰富的特点，能够保 3 持透明背景.<strong>如果想要切成背景透明的图片,请选择 png 格式</strong></p></li><li><p>PSD 图像格式 PSD 格格式是 Photoshop 的专用格式，里面可以存放图层、通道、遮罩等多种设计稿,<strong>对我们前端</strong></p><p><strong>人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离.</strong></p></li></ul></li></ul><h3 id="综合案例-学成在线"><a href="#综合案例-学成在线" class="headerlink" title="综合案例(学成在线)"></a>综合案例(学成在线)</h3><p>新建首页文件<code>index.html</code>(以后我们的网站首页统一规定为<strong>index.html</strong>)。</p><p>新建外链 css 文件,引用</p><h4 id="CSS-属性书写顺序-重点"><a href="#CSS-属性书写顺序-重点" class="headerlink" title="CSS 属性书写顺序(重点)"></a>CSS 属性书写顺序(重点)</h4><p>编程中如何衡量一个人的代码能力?</p><p>建议遵循以下顺序:</p><ol><li><p>布局定位属性: display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow(建议 display 第一个写,毕竟关系到模式 )</p></li><li><p>自身属性: width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</p></li><li><p>文本属性 : color&#x2F;font &#x2F;text-decoration&#x2F;text-align&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</p></li><li><p>其他属性(CSS3): content &#x2F;cursor &#x2F; border-radius&#x2F; box-shadow &#x2F;text-</p><p>shadow&#x2F;background:linear-gradient..</p></li></ol><h4 id="分析布局"><a href="#分析布局" class="headerlink" title="分析布局"></a>分析布局</h4><p>为了提高网页制作的效率，布局时通常有以下的整体思路</p><ol><li>必须确定页面的**版心(可视区)**，我们测量可得知。</li><li>分析页面中的行模块，以及每个行模块中的列模块。其实页面布局<strong>第一准则</strong>.</li><li>一行中的列模块经常浮动布局,先确定每个列的大小,之后确定列的位置,页面布局第二准则</li><li>制作 HTML 结构。我们还是遵循,先有结构,后有样式的原则。结构永远最重要所以以, 先理清楚布局结构,再写代码尤为重要,这需要我们多写多积累.</li></ol><h4 id="确定版心"><a href="#确定版心" class="headerlink" title="确定版心"></a>确定版心</h4><p>这个页面的版心是 1200 像素，每个版心都要水平居中对齐，可以定义版心为公共类:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.w</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="头部制作"><a href="#头部制作" class="headerlink" title="头部制作"></a>头部制作</h4><p><img src="/2024/06/21/css/%E5%A4%B4%E9%83%A8%E5%88%B6%E4%BD%9C.png" alt="image-20240805191422199"></p><ul><li>1 号是版心盒子 header 1200*42 的盒子水平居中对齐，上下给一个 margin 值就可以</li><li>版心盒子里面包含 2 号盒子<strong>logo</strong></li><li>版心盒子里面包含 3 号盒子<strong>nav</strong>导航栏</li><li>版心盒子里面包含 4 号盒子<strong>search</strong>搜索框</li><li>版心盒子里面包含 5 号盒子<strong>user</strong>个人信息</li><li>注意:要求里面的 4 个盒子必须都是浮动</li></ul><p>导航栏注意点:</p><p>实际开发中，我们不会直接用链接<code>a</code>而是用<code>li</code>包含链接**(li+a)**的做法。</p><ul><li><code>li+a</code>语义更清晰，一看这就是有条理的列表型内容。</li><li>如果直接用<code>a</code>，搜索引擎容易辨别为有堆砌关键字嫌疑(故意堆砌关键字容易被搜索引擎有降权的风险)从而影响网站排名</li></ul><p><strong>注意:</strong></p><ol><li>让导航栏一行显示,给 li 加浮动,因为 li 是块级元素, 需要一行显示</li><li>这个 nav 导航栏可以不给宽度,将来可以继续添加其余文字</li><li>因为导航栏里面文字不一样多,所以最好给链接<code>a</code><strong>左右 padding</strong>撑开盒子,而不是指定宽度</li></ol><h5 id="阶段代码"><a href="#阶段代码" class="headerlink" title="阶段代码"></a>阶段代码</h5><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header w<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- logo部分 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 导航栏部分 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>职业规划<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 搜索模块 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入关键字<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 用户模块 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/user.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usrname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xubin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>style.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.w</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li</span> <span class="token punctuation">&#123;</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f3f5f7<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.header</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 30px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* logo模块 */</span><span class="token selector">.logo</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 198px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav li</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav ul li a</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0px 10px<span class="token punctuation">;</span>  <span class="token comment">/* 居中显示 */</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #050505<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.nav ul li a:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid #1384c1<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #1384c1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 搜索模块 */</span><span class="token selector">.search</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 412px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.search input</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 345px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #00a4ff<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #bfbfbf<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.search button</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/btn.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token comment">/* 按钮button默认有个边框需要我们手动去掉 */</span>  <span class="token property">border</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  用户模块  */</span><span class="token selector">.usr</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.usr .img-div</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.usr div</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="banner-制作"><a href="#banner-制作" class="headerlink" title="banner 制作"></a>banner 制作</h4><p><img src="/2024/06/21/css/banner%E7%BB%93%E6%9E%84.png" alt="image-20240805214126418"></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- banner区域 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 版心 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subnav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端开发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我的课程表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>继续学习 程序语言设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>正在学习-使用对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>继续学习 程序语言设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>正在学习-使用对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>继续学习 程序语言设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>正在学习-使用对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>style.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.banner .course</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token comment">/* 浮动的盒子不会有外边距合并的问题 */</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.banner .course h2</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>148<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 233<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #f3f5f7<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bd</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bd li</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 14px 0<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> 600<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #1384c1<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #776c6c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bd li span</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>165<span class="token punctuation">,</span> 165<span class="token punctuation">,</span> 165<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bd .more</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 38px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #00a4ff<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 38px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #00a4ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="精品推荐"><a href="#精品推荐" class="headerlink" title="精品推荐"></a>精品推荐</h4><p><img src="/2024/06/21/css/%E7%B2%BE%E5%93%81%E6%8E%A8%E8%8D%90.png" alt="image-20240806092724717"></p><ul><li>大盒子水平居中 goods 精品，注意此处有个盒子阴影</li><li>1 号盒子是标题 H3 左侧浮动</li><li>2 号盒子里面放链接左侧浮动，goods-item 距离可以控制链接的左右内边距(注意行内元素只给左右内外边距)</li><li>3 号盒子右浮动 mod 修改</li></ul><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 金牌推荐 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>goods w<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>精品推荐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MySQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MySQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改兴趣<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>style.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 精品推荐 */</span><span class="token selector">.goods</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 3px 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*行高会继承给三个孩子*/</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.goods h3</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #00a4ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.goods ul</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.goods ul li</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.goods ul a</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 35px<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> 1px solid #776c6c<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #050505<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.goods .mod</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #00a4ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h4><p>在 css 中把<code>img</code>标签设置为**{ width:100% }**能够实现图片缩放,自适应父盒子大小</p><h4 id="底部模块"><a href="#底部模块" class="headerlink" title="底部模块"></a>底部模块</h4><p><img src="/2024/06/21/css/%E5%BA%95%E9%83%A8%E6%A8%A1%E5%9D%97.png" alt="image-20240807135610524"></p><ul><li>1 号盒子是通栏大盒子，底部 <strong>footer</strong> 给高度，底色是白色</li><li>2 号盒子版心水平居中</li><li>3 号盒子版权 <strong>copyright</strong> 左对齐</li><li>4 号盒子链接组 links 右对齐</li></ul><h2 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h2><h3 id="1-1-为什么需要定位"><a href="#1-1-为什么需要定位" class="headerlink" title="1.1 为什么需要定位?"></a>1.1 为什么需要定位?</h3><ul><li><p>提问:以下情况使用标准流或者浮动能实现吗?</p><ol><li>某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子</li><li>当我们滚动窗口的时候，盒子是固定屏幕某个位置的。(京东购物车)</li></ol></li><li><p>以上效果，标准流或浮动都无法快速实现，<strong>此时需要定位来实现</strong>。所以:</p><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于向排列盒子</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</li></ol></li></ul><h3 id="1-2-定位的由来"><a href="#1-2-定位的由来" class="headerlink" title="1.2 定位的由来"></a>1.2 定位的由来</h3><p>定位: 将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子</p><p><strong>定位 &#x3D; 定位模式 + 边偏移。</strong></p><p><strong>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</strong></p><h4 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h4><p>1.定位模式<br>定位模式决定元素的定位方式，它通过 CSS 的<strong>position</strong>属性来设置，其值可以分为四个:</p><table><thead><tr><th align="left">值</th><th>语义</th></tr></thead><tbody><tr><td align="left">static</td><td><strong>静态</strong>定位</td></tr><tr><td align="left">relative</td><td><strong>相对</strong>定位</td></tr><tr><td align="left">absolute</td><td><strong>绝对</strong>定位</td></tr><tr><td align="left">fixed</td><td><strong>固定</strong>定位</td></tr></tbody></table><h4 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h4><p>边偏移就是定位的盒子移动到最终位置。有 top、bottom、left 和 right4 个属性。</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离。</td></tr><tr><td>bottom</td><td>bottom: 80px</td><td>底部偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td>left</td><td>left: 80px</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td>right</td><td>right: 80px</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离。</td></tr></tbody></table><h3 id="1-3-静态偏移-定位"><a href="#1-3-静态偏移-定位" class="headerlink" title="1.3 静态偏移(定位)"></a>1.3 静态偏移(定位)</h3><p>静态定位是元素的默认定位方式，无定位的意思。<br>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>静态定位按照标准流特性摆放位置，它没有边偏移<br>静态定位在布局时很少用到</p><h3 id="1-4-相对定位-relative-重要"><a href="#1-4-相对定位-relative-重要" class="headerlink" title="1.4 相对定位 relative(重要)"></a>1.4 相对定位 relative(重要)</h3><p><strong>相对定位是元素在移动位置的时候</strong>，是相对于它<strong>原来的位置</strong>来说的(自恋型)。</p><p>语法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>相对定位的特点:(务必记住)<ol><li>它是相对于自己原来的位置来移动的**(移动位置的时候参照点是自己原来的位置)。**</li><li><strong>原来</strong>在标准流的位置继续<strong>占有</strong>，后面的盒子仍然以标准流的方式对待它。(不脱标，继续保留原来位置)</li></ol></li></ul><h3 id="1-5-绝对定位-absolute-重要"><a href="#1-5-绝对定位-absolute-重要" class="headerlink" title="1.5 绝对定位 absolute(重要)"></a>1.5 绝对定位 absolute(重要)</h3><p>绝对定位是元素在移动位置的时候，是相对于<strong>它祖先元素</strong>来说的(拼爹型)</p><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绝对定位的特点:(务必记住)</p><ol><li><strong>如果没有祖先元素或者祖先元素没有定位</strong>，则以浏览器为准定位(Document 文档)</li><li>如果祖先元素<strong>有定位(相对、绝对、固定定位)<strong>则以</strong>最近一级</strong>的<strong>有定位</strong>祖先元素为参考点移动位置</li><li>绝对定位不再占有原先的位置。**(脱标)**</li></ol><h3 id="子绝父相口诀"><a href="#子绝父相口诀" class="headerlink" title="子绝父相口诀"></a>子绝父相口诀</h3><ol><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</li><li>父盒子需要加定位限制,子盒子在父盒子内显示</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</li></ol><p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级。</strong></p><p>总结:<strong>因为父级需要占有位置,因此是相对定位，子盒子不需要占有位置，则是绝对定位</strong></p><h3 id="1-6-固定定位-fixed"><a href="#1-6-固定定位-fixed" class="headerlink" title="1.6 固定定位 fixed"></a>1.6 固定定位 fixed</h3><p>固定定位是元素<strong>固定于浏览器可视区</strong>的位置。主要使用场景:可以在<strong>浏览器页面滚动时</strong>元素的位置不会改变。</p><p><strong>语法</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>固定定位的特点:(务必记住)</p><ol><li><p>以浏览器的可视窗口为参照点移动元素。</p><ol><li>跟父元素没有任何关系</li><li>不随着滚动条的滚动而滚动</li></ol></li><li><p>固定定位<strong>不在占有</strong>原先的位置。</p><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p></li></ol><p><strong>固定定位小技巧: 固定在版心右侧位置</strong></p><p><img src="/2024/06/21/css/fixed%E5%9B%BA%E5%AE%9A%E7%89%88%E5%BF%83%E5%8F%B3%E4%BE%A7.png" alt="image-20240815185551145"></p><ol><li>让固定定位的盒子<code>left:50%</code>走到浏览器可视区(也可以看做版心)的一半位置。</li><li>让固定定位的盒子<code>margin-left:版心宽度的一半距离</code>。多走<strong>版心宽度的一半位置</strong></li></ol><h3 id="1-7-粘性定位-sticky-了解"><a href="#1-7-粘性定位-sticky-了解" class="headerlink" title="1.7 粘性定位 sticky(了解)"></a>1.7 粘性定位 sticky(了解)</h3><p>粘性定位可以被认为是相对定位和固定定位的混合。</p><p><code>Sticky</code>:粘性的</p><p><strong>语法</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>粘性定位的特点</strong></p><ol><li>以浏览器的可视窗口为参照点移动元素(固定定位特点)</li><li>粘性定位占有原先的位置(相对定位特点)</li><li>必须添加<code>top、left、right、bottom</code>其中一个才有效</li></ol><p>跟页面滚动搭配使用。兼容性较差，IE 不支持。</p><h3 id="1-9-总结"><a href="#1-9-总结" class="headerlink" title="1.9 总结"></a>1.9 总结</h3><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static 静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td>relative 相对定位</td><td>否 (占有位置)</td><td>相对自身位置移动</td><td>常用</td></tr><tr><td>absolute 绝对定位</td><td>是 (不占有位置)</td><td>带有定位的父级</td><td>常用</td></tr><tr><td>fixed 固定定位</td><td>是 (不占有位置)</td><td>浏览器可视区</td><td>常用</td></tr><tr><td>sticky 粘性定位</td><td>否 (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><h3 id="1-9-定位叠放次序-z-index"><a href="#1-9-定位叠放次序-z-index" class="headerlink" title="1.9 定位叠放次序 z-index"></a>1.9 定位叠放次序 z-index</h3><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序(z 轴)</p><p><strong>语法:</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>数值可以是正整数、负整数或 0,默认是 <strong>auto</strong>，数值越大，盒子越靠上</p></li><li><p>如果属性值相同，则按照<strong>书写顺序</strong>，后来居上</p></li><li><p>数字后面<strong>不能加单位</strong></p></li><li><p>只有定位的盒子才有<code>z-index</code>属性</p></li></ul><h3 id="1-10-定位的拓展"><a href="#1-10-定位的拓展" class="headerlink" title="1.10 定位的拓展"></a>1.10 定位的拓展</h3><ul><li><p><strong>绝对定位的盒子居中</strong></p><p>加了绝对定位的盒子不能通过<code>margin:0 auto</code>水平居中，但是可以通过以下计算方法实现水平和垂直居中</p><p><strong>父容器宽度的一半减去自身盒子的 width 的一半</strong></p></li><li><p><strong>定位特殊特性</strong></p><p>绝对定位和固定定位也和浮动类似。</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度，</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li></ol></li><li><p><strong>脱标的盒子不会触发外边距塌陷</strong></p><p>浮动元素、绝对定位(固定定位)元素的都不会触发外边距合并的问题。</p></li><li><p><strong>绝对定位(固定定位)会完全压住盒子</strong></p><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字(图片),但是绝对定位(固定定位)会压住下面标准流所有的内容。</p><p><img src="/2024/06/21/css/%E6%96%87%E5%AD%97%E7%8E%AF%E7%BB%95float.png" alt="image-20240815195024951"></p></li></ul><h3 id="综合案例-淘宝焦点图"><a href="#综合案例-淘宝焦点图" class="headerlink" title="综合案例(淘宝焦点图)"></a>综合案例(淘宝焦点图)</h3><p>1.大盒子我们类名为:<strong>tb-promo</strong>淘宝广告</p><p>2.里面先放一张图片</p><p>3.左右两个按钮用链接就好了。左箭头<strong>prev</strong>右箭头<strong>next</strong></p><p>4.底侧小圆点 u 继续做。类名为<strong>promo-nav</strong></p><p>如果一个盒子<strong>既有 left 属性也有 right 属性</strong>，则默认会执行<strong>left</strong>属性(left 和 top 优先级高)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, user-scalable=no, initial-scale=1.0<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>淘宝焦点轮播图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">a</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 消除默认的a标签样式 */</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">li</span> <span class="token punctuation">&#123;</span>        <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">*</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.tb-promo</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 520px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.tb-promo img</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.prev,      .next</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token comment">/* 绝对定位的盒子垂直居中 */</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> -15px<span class="token punctuation">;</span>        <span class="token comment">/*加了绝对定位的盒子可以直接设置高度和宽度 */</span>        <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 11<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.prev</span> <span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token comment">/* 设置成圆形 */</span>        <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.next</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 如果一个盒子既有left属性也有right属性，则默认会执行left属性(left和top优先级高) */</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.promo-nav</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -35px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 13px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 圆角 */</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>13px / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.promo-nav li</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* 不要忘记选择器权重，否则会设置失败 */</span>      <span class="token selector">.promo-nav .selected</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tb-promo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../综合案例/学成在线/images/banner2.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token comment">&lt;!-- 左侧按钮箭头 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.jd.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 右侧按钮箭头 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.jd.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- /*小圆点*/ --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>promo-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><p>类似网站广告，当我们点击关闭就不见了，但是我们重新<strong>刷新页面</strong>，会重新出现!</p><p>本质:让一个元素在页面中<strong>隐藏或者显示</strong>出来。</p><ul><li><p><strong>display 显示隐藏</strong>: display 属性用于设置一个元素应如何显示。</p><ul><li><code>display:none;</code>隐藏对象,<strong>display 隐藏元素后，不再占有原来的位置</strong>,后面应用及其广泛，搭配 JavaScript 可以做很多的网页特效。</li><li><code>display:block;</code>除了转换为块级元素之外，同时还有显示元素的意思</li></ul></li><li><p><strong>visibility 可见性</strong>: visibility 属性用于指定一个元素应<strong>可见还是隐藏</strong>,visibility 隐藏元素后，<strong>继续占有原来的位置</strong></p><ul><li><code>visibility:visible;</code> 元素可视</li><li><code>visibility:hidden;</code> 元素隐藏</li></ul></li><li><p>overflow 溢出显示隐藏</p></li></ul><h3 id="综合案例-土豆网鼠标经过显示遮罩"><a href="#综合案例-土豆网鼠标经过显示遮罩" class="headerlink" title="综合案例(土豆网鼠标经过显示遮罩)"></a>综合案例(土豆网鼠标经过显示遮罩)</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>土豆网鼠标经过遮罩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">.tudou</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 444px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 332px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* 遮罩层 */</span>      <span class="token selector">.mask</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../综合案例/品优购/favicon.png<span class="token punctuation">)</span></span> no-repeat          center<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>        <span class="token comment">/* 遮罩层先隐藏 */</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* 鼠标经过tudou这个盒子 让里面的mask显示遮罩 */</span>      <span class="token selector">.tudou:hover .mask</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tudou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示</p><p><img src="/2024/06/21/css/%E5%9C%9F%E8%B1%86hover_mask.png" alt="image-20240815230032051"></p><h2 id="CSS-高级技巧"><a href="#CSS-高级技巧" class="headerlink" title="CSS 高级技巧"></a>CSS 高级技巧</h2><h3 id="1-精灵图"><a href="#1-精灵图" class="headerlink" title="1. 精灵图"></a>1. 精灵图</h3><p><strong>学习目标：</strong></p><p>能够使用精灵图</p><p>能够使用字体图标</p><p>能够写出 CSS 三角</p><p>能够写出常见的 CSS 用户界面样式</p><p>能够说出常见的布局技巧</p><h4 id="1-1-为什么需要精灵图"><a href="#1-1-为什么需要精灵图" class="headerlink" title="1.1 为什么需要精灵图?"></a>1.1 为什么需要精灵图?</h4><p><img src="/2024/06/21/css/%E7%B2%BE%E7%81%B5%E5%9B%BE.png" alt="image-20240816113711526"></p><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度</p><p>因此，为了<strong>有效地减少服务器接收和发送请求的次数，提高页面的加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>(也称 CSS Sprites、CSS 雪碧)。</p><h4 id="1-2-精灵图的使用"><a href="#1-2-精灵图的使用" class="headerlink" title="1.2 精灵图的使用"></a>1.2 精灵图的使用</h4><p><strong>使用精灵图核心</strong></p><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>移动背景图片位置，此时可以使用<strong>background-position</strong>。</li><li>移动的距离就是这个目标图片的<strong>x 和 y 坐标</strong>。注意网页中的坐标有所不同</li><li>因为一般情况下都是**(图片)<strong>往上往左移动，所以数值是</strong>负值**。</li><li>使用精灵图的时候需要<strong>精确测量，每个小背景图片的大小和位置</strong></li></ol><h4 id="1-3-案例：拼出自己名字"><a href="#1-3-案例：拼出自己名字" class="headerlink" title="1.3 案例：拼出自己名字"></a>1.3 案例：拼出自己名字</h4><h5 id="1-3-1-案例效果"><a href="#1-3-1-案例效果" class="headerlink" title="1.3.1 案例效果"></a>1.3.1 案例效果</h5><p><img src="/2024/06/21/css/1571519368229.png" alt="1571519368229"></p><h5 id="1-3-2-代码参考"><a href="#1-3-2-代码参考" class="headerlink" title="1.3.2 代码参考"></a>1.3.2 代码参考</h5><p>结构</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>abcd.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.p</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 112px<span class="token punctuation">;</span>  <span class="token comment">/* background-color: pink; */</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> -493px -276px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.i</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 108px<span class="token punctuation">;</span>  <span class="token comment">/* background-color: pink; */</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> -327px -142px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.n</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 108px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 109px<span class="token punctuation">;</span>  <span class="token comment">/* background-color: pink; */</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> -215px -141px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.k</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 105px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 114px<span class="token punctuation">;</span>  <span class="token comment">/* background-color: pink; */</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> -495px -142px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字体图标"><a href="#2-字体图标" class="headerlink" title="2. 字体图标"></a>2. 字体图标</h3><h4 id="2-1-字体图标的产生"><a href="#2-1-字体图标的产生" class="headerlink" title="2.1 字体图标的产生"></a>2.1 字体图标的产生</h4><p>字体图标使用场景： 主要用于显示网页中通用、常用的一些小图标。</p><p>精灵图是有诸多优点的，但是缺点很明显。</p><ol><li><p>图片文件还是比较大的。</p></li><li><p>图片本身放大和缩小会失真。</p></li><li><p>一旦图片制作完毕想要更换非常复杂。</p></li></ol><p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p><p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p><h4 id="2-2-字体图标的优点"><a href="#2-2-字体图标的优点" class="headerlink" title="2.2 字体图标的优点"></a>2.2 字体图标的优点</h4><ul><li><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p></li><li><p>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</p></li><li><p>兼容性：几乎支持所有的浏览器，请放心使用</p></li><li><p>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p></li></ul><p><strong>总结：</strong></p><p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。<img src="/2024/06/21/css/1571519724473.png" alt="1571519724473"></p><p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p><p><img src="/2024/06/21/css/1571519739775.png" alt="1571519739775"></p><p><strong>使用步骤</strong></p><p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p><p>1.字体图标的下载</p><p>2.字体图标的引入 （引入到我们<strong>html</strong>页面中）</p><p>3.字体图标的追加 （以后添加新的小图标）</p><h4 id="2-3-字体图标的下载"><a href="#2-3-字体图标的下载" class="headerlink" title="2.3 字体图标的下载"></a><strong>2.3</strong> <strong>字体图标的下载</strong></h4><p><strong>推荐下载网站：</strong></p><ul><li><strong>icomoon</strong> <strong>字库</strong> <a href="http://icomoon.io/">http://icomoon.io</a> 推荐指数 <strong>★★★★★</strong></li></ul><p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><ul><li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong> <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a> 推荐指数 <strong>★★★★★</strong></li></ul><p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 重点是，免费！</p><h4 id="2-4-字体图标的引入"><a href="#2-4-字体图标的引入" class="headerlink" title="2.4 字体图标的引入"></a><strong>2.4</strong> <strong>字体图标的引入</strong></h4><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p><ol><li>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</li></ol><p><img src="/2024/06/21/css/1571520092646.png" alt="1571520092646"></p><ul><li><strong>字体文件格式</strong></li></ul><p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p><p>1). TureType(<strong>.ttf</strong>)格式.ttf 字体是 Windows 和 Mac 的最常见的字体，支持这种字体的浏览器有 IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p><p>2). Web Open Font Format(<strong>.woff</strong>)格式 woff 字体，支持这种字体的浏览器有 IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p><p>3). Embedded Open Type(<strong>.eot</strong>)格式.eot 字体是 IE 专用字体，支持这种字体的浏览器有 IE4+；</p><p>4). SVG(.<strong>svg</strong>)格式.svg 字体是基于 SVG 字体渲染的一种格式，支持这种字体的浏览器有 Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p><p>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过 css 引入到我们页面中。</p><p>一定注意字体文件路径的问题</p><pre class="line-numbers language-none"><code class="language-none">@font-face &#123;  font-family: &#39;icomoon&#39;;  src:  url(&#39;fonts&#x2F;icomoon.eot?7kkyc2&#39;);  src:  url(&#39;fonts&#x2F;icomoon.eot?7kkyc2#iefix&#39;) format(&#39;embedded-opentype&#39;),    url(&#39;fonts&#x2F;icomoon.ttf?7kkyc2&#39;) format(&#39;truetype&#39;),    url(&#39;fonts&#x2F;icomoon.woff?7kkyc2&#39;) format(&#39;woff&#39;),    url(&#39;fonts&#x2F;icomoon.svg?7kkyc2#icomoon&#39;) format(&#39;svg&#39;);  font-weight: normal;  font-style: normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>html 标签内添加小图标。</li></ol><p><img src="/2024/06/21/css/1571520411345.png" alt="1571520411345"></p><ol start="4"><li>给标签定义字体。</li></ol><pre class="line-numbers language-none"><code class="language-none">span &#123;  font-family: &quot;icomoon&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：务必保证 这个字体和上面<code>@font-face</code>里面的字体保持一致</p><p><img src="/2024/06/21/css/1571520485350.png" alt="1571520485350"></p><h4 id="2-5-字体图标的追加"><a href="#2-5-字体图标的追加" class="headerlink" title="2.5 字体图标的追加"></a>2.5 字体图标的追加</h4><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p><p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p><p><img src="/2024/06/21/css/1571520554317.png" alt="1571520554317"></p><h4 id="2-6-字体图标加载的原理："><a href="#2-6-字体图标加载的原理：" class="headerlink" title="2.6 字体图标加载的原理："></a>2.6 字体图标加载的原理：</h4><p><img src="/2024/06/21/css/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86.gif" alt="1571520617270"></p><h3 id="3-CSS-三角"><a href="#3-CSS-三角" class="headerlink" title="3. CSS 三角"></a>3. CSS 三角</h3><h4 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h4><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p><p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p><p><img src="/2024/06/21/css/1571520965966.png" alt="1571520965966"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> red green blue black<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>我们用 css 边框可以模拟三角效果</li><li>宽度高度为 0</li><li>我们 4 个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0; line-height: 0;</li></ol><h4 id="3-2-案例：京东三角"><a href="#3-2-案例：京东三角" class="headerlink" title="3.2 案例：京东三角"></a>3.2 案例：京东三角</h4><h5 id="3-2-1-效果图"><a href="#3-2-1-效果图" class="headerlink" title="3.2.1 效果图"></a>3.2.1 效果图</h5><p><img src="/2024/06/21/css/1571521183026.png" alt="1571521183026"></p><h5 id="3-2-2-代码参考"><a href="#3-2-2-代码参考" class="headerlink" title="3.2.2 代码参考"></a>3.2.2 代码参考</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS 三角制作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token comment">/* border: 10px solid pink; */</span>        <span class="token property">border-top</span><span class="token punctuation">:</span> 10px solid pink<span class="token punctuation">;</span>        <span class="token property">border-right</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 10px solid blue<span class="token punctuation">;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> 10px solid green<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-left-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.jd</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 249px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.jd span</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token comment">/* 为了照顾兼容性 */</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-CSS-用户界面样式"><a href="#4-CSS-用户界面样式" class="headerlink" title="4. CSS 用户界面样式"></a>4. CSS 用户界面样式</h3><p><strong>什么是界面样式</strong></p><p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p><ul><li>更改用户的鼠标样式</li><li>表单轮廓</li><li>防止表单域拖拽</li></ul><h4 id="4-1-鼠标样式-cursor"><a href="#4-1-鼠标样式-cursor" class="headerlink" title="4.1 鼠标样式 cursor"></a>4.1 鼠标样式 cursor</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li</span> <span class="token punctuation">&#123;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><p><img src="/2024/06/21/css/1571521805183.png" alt="1571521805183"></p><h4 id="4-2-轮廓线-outline"><a href="#4-2-轮廓线-outline" class="headerlink" title="4.2 轮廓线 outline"></a>4.2 轮廓线 outline</h4><p>给表单添加 outline: 0; 或者 outline: none; 样式之后，就可以去掉默认的蓝色边框。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-3-防止拖拽文本域-resize"><a href="#4-3-防止拖拽文本域-resize" class="headerlink" title="4.3 防止拖拽文本域 resize"></a>4.3 防止拖拽文本域 resize</h4><p>实际开发中，我们文本域右下角是不可以拖拽的。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">textarea</span> <span class="token punctuation">&#123;</span>  <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>vertical-align 属性应用</p><h3 id="5-vertical-align-属性应用"><a href="#5-vertical-align-属性应用" class="headerlink" title="5. vertical-align 属性应用"></a>5. vertical-align 属性应用</h3><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p><p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p><p>语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline | top | middle | bottom<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/06/21/css/1571522023413.png" alt="1571522023413"></p><p><img src="/2024/06/21/css/1571522040645.png" alt="1571522040645"></p><h4 id="5-1-图片、表单和文字对齐"><a href="#5-1-图片、表单和文字对齐" class="headerlink" title="5.1 图片、表单和文字对齐"></a><strong>5.1</strong> <strong>图片、表单和文字对齐</strong></h4><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p><p><img src="/2024/06/21/css/1571522093729.png" alt="1571522093729"></p><p>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p><h4 id="5-2-解决图片底部默认空白缝隙问题"><a href="#5-2-解决图片底部默认空白缝隙问题" class="headerlink" title="5.2 解决图片底部默认空白缝隙问题"></a>5.2 解决图片底部默认空白缝隙问题</h4><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p><p>主要解决方法有两种：</p><p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p><p>2.把图片转换为块级元素 <strong>display: block</strong>;</p><p><img src="/2024/06/21/css/1571522162225.png" alt="1571522162225"></p><h3 id="6-溢出的文字省略号显示"><a href="#6-溢出的文字省略号显示" class="headerlink" title="6. 溢出的文字省略号显示"></a>6. 溢出的文字省略号显示</h3><h4 id="6-1-单行文本溢出显示省略号"><a href="#6-1-单行文本溢出显示省略号" class="headerlink" title="6.1 单行文本溢出显示省略号"></a>6.1 单行文本溢出显示省略号</h4><p><img src="/2024/06/21/css/1571522317809.png" alt="1571522317809"></p><p>单行文本溢出显示省略号–必须满足三个条件：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*1. 先强制一行内显示文本*/</span> <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  （ 默认 normal 自动换行）<span class="token comment">/*2. 超出的部分隐藏*/</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/*3. 文字用省略号替代超出的部分*/</span> <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-多行文本溢出显示省略号（了解）"><a href="#6-2-多行文本溢出显示省略号（了解）" class="headerlink" title="6.2 多行文本溢出显示省略号（了解）"></a>6.2 多行文本溢出显示省略号（了解）</h4><p><img src="/2024/06/21/css/1571522334591.png" alt="1571522334591"></p><p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于 webKit 浏览器或移动端（移动端大部分是 webkit 内核）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*1. 超出的部分隐藏 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/*2. 文字用省略号替代超出的部分 */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment">/* 3. 弹性伸缩盒子模型显示 */</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment">/* 4. 限制在一个块元素显示的文本的行数 */</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p><h3 id="7-常见布局技巧"><a href="#7-常见布局技巧" class="headerlink" title="7. 常见布局技巧"></a>7. 常见布局技巧</h3><p><strong>巧妙利用一个技术更快更好的布局：</strong></p><ol><li>margin 负值的运用</li><li>文字围绕浮动元素</li><li>行内块的巧妙运用</li><li>CSS 三角强化</li></ol><h4 id="7-1-margin-负值运用"><a href="#7-1-margin-负值运用" class="headerlink" title="7.1. margin 负值运用"></a>7.1. margin 负值运用</h4><p><img src="/2024/06/21/css/1571522666082.png" alt="1571522666082"></p><p><img src="/2024/06/21/css/1571522683897.png" alt="1571522683897"></p><p>1.让每个盒子 margin 往左侧移动 -1px 正好压住相邻盒子边框</p><p>2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加 z-index）</p><h4 id="7-2-文字围绕浮动元素"><a href="#7-2-文字围绕浮动元素" class="headerlink" title="7.2 文字围绕浮动元素"></a>7.2 文字围绕浮动元素</h4><p><strong>效果</strong></p><p><img src="/2024/06/21/css/1571522777745.png" alt="1571522777745"></p><p><strong>布局示意图</strong></p><p><img src="/2024/06/21/css/1571522761996.png" alt="1571522761996"></p><p><strong>巧妙运用浮动元素不会压住文字的特性</strong></p><h4 id="7-3-行内块巧妙运用"><a href="#7-3-行内块巧妙运用" class="headerlink" title="7.3 行内块巧妙运用"></a>7.3 行内块巧妙运用</h4><p><img src="/2024/06/21/css/1571522898744.png" alt="1571522898744"></p><p>页码在页面中间显示:</p><ol><li>把这些链接盒子转换为行内块， 之后给父级指定 text-align:center;</li><li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li></ol><p><img src="/2024/06/21/css/1571522910580.png" alt="1571522910580"></p><h4 id="7-4-CSS-三角强化-案例"><a href="#7-4-CSS-三角强化-案例" class="headerlink" title="7.4. CSS 三角强化 案例"></a>7.4. CSS 三角强化 案例</h4><h5 id="7-4-1-原理"><a href="#7-4-1-原理" class="headerlink" title="7.4.1 原理"></a><strong>7.4.1 原理</strong></h5><p><img src="/2024/06/21/css/1571550959181.png" alt="1571550959181"></p><p><img src="/2024/06/21/css/1571551000391.png" alt="1571551000391"></p><p><img src="/2024/06/21/css/1571548058053.png" alt="1571548058053"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token comment">/* 把上边框宽度调大 */</span>        <span class="token comment">/* border-top: 100px solid transparent;        border-right: 50px solid skyblue; */</span>        <span class="token comment">/* 左边和下边的边框宽度设置为0 */</span>        <span class="token comment">/* border-bottom: 0 solid blue;        border-left: 0 solid green; */</span>        <span class="token comment">/* 1.只保留右边的边框有颜色 */</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> transparent red transparent transparent<span class="token punctuation">;</span>        <span class="token comment">/* 2. 样式都是solid */</span>        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>        <span class="token comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> 100px 50px 0 0 <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-4-2-案例效果"><a href="#7-4-2-案例效果" class="headerlink" title="7.4.2 案例效果"></a>7.4.2 案例效果</h5><p><img src="/2024/06/21/css/1571548099631.png" alt="1571548099631"></p><h5 id="7-4-3-代码参考"><a href="#7-4-3-代码参考" class="headerlink" title="7.4.3 代码参考"></a><strong>7.4.3 代码参考</strong></h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS三角强化的巧妙运用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">.price</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 160px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.miaosha</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.miaosha i</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> transparent #fff transparent transparent<span class="token punctuation">;</span>        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> 24px 10px 0 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.origin</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>miaosha<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ¥1650        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>origin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>¥5650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-CSS-初始化"><a href="#8-CSS-初始化" class="headerlink" title="8. CSS 初始化"></a>8. CSS 初始化</h3><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对 HTML 文本呈现的差异，照顾浏览器的兼容，我们需要对 CSS 初始化</p><p>简单理解： CSS 初始化是指重设浏览器的样式。 (也称为 CSS reset）</p><p>每个网页都必须首先进行 CSS 初始化。</p><p>这里我们以 京东 CSS 初始化代码为例。</p><p><strong>Unicode 编码字体：</strong></p><p>把中文字体的名称用相应的 Unicode 编码来代替，这样就可以有效的避免浏览器解释 CSS 代码时候出现乱码的问题。</p><p>比如：</p><p>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p><h2 id="名词解析概念"><a href="#名词解析概念" class="headerlink" title="名词解析概念"></a>名词解析概念</h2><h3 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h3><p><strong>包含块（containing block）</strong>是指一个元素生成它的子元素的区域。</p><p>包含块的位置和大小由以下因素决定：</p><ol><li>元素的 position 值</li><li>元素的 float 值</li><li>元素的 display 值</li><li>元素的 direction 值</li><li>元素的 overflow 值</li></ol><p>包含块是一个矩形区域，通常由以下几种情况决定：</p><p>静态位置和相对定位的元素： 对于静态位置（static）和相对定位（relative）的元素，其包含块通常是最近的块级祖先元素的内容框（content box）。</p><p>绝对定位的元素： 对于绝对定位（absolute）的元素，其包含块是最近的定位（position 属性值不是 static）祖先元素的 padding box。如果没有这样的祖先元素，则包含块是初始包含块（通常是视口）。</p><p>固定定位的元素： 对于固定定位（fixed）的元素，其包含块是视口（viewport）。</p><h3 id="width-100-属性"><a href="#width-100-属性" class="headerlink" title="width:100%;属性"></a>width:100%;属性</h3><p>在CSS中，<code>width: 100%;</code>确实是指元素的宽度为其包含块（containing block）宽度的100%</p><p>包括其他可以设置百分比的属性,例如<code>height</code>,<code>margin</code>,<code>padding</code></p><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><p>视口是什么?</p><p><code>视口（Viewport）</code>是指用户在浏览器中可以看到的网页区域。它决定了网页内容在屏幕上的显示范围和大小。视口的概念在不同的上下文中有不同的含义，主要包括以下几种：</p><h4 id="1-浏览器视口"><a href="#1-浏览器视口" class="headerlink" title="1. 浏览器视口"></a>1. 浏览器视口</h4><p>浏览器视口通常指的是浏览器窗口中显示网页内容的区域，不包括浏览器的地址栏、工具栏和滚动条等部分。浏览器视口的大小可以通过JavaScript的<code>window.innerWidth</code>和<code>window.innerHeight</code>属性获取。</p><h4 id="2-布局视口"><a href="#2-布局视口" class="headerlink" title="2. 布局视口"></a>2. 布局视口</h4><p>布局视口（Layout Viewport）是指网页布局所基于的区域。在桌面浏览器中，布局视口通常与浏览器视口一致。但在移动设备上，布局视口可能会比实际的浏览器视口大，以便在较小的屏幕上显示整个网页内容。布局视口的大小可以通过CSS的<code>width</code>和<code>height</code>属性来控制。</p><h4 id="3-视觉视口"><a href="#3-视觉视口" class="headerlink" title="3. 视觉视口"></a>3. 视觉视口</h4><p>视觉视口（Visual Viewport）是指用户当前可见的网页区域。在移动设备上，当用户缩放页面时，视觉视口的大小会发生变化，但布局视口的大小保持不变。视觉视口的大小可以通过JavaScript的<code>window.visualViewport</code>对象获取。</p><h4 id="4-初始包含块"><a href="#4-初始包含块" class="headerlink" title="4. 初始包含块"></a>4. 初始包含块</h4><p>在CSS中，初始包含块（Initial Containing Block）是指根元素（<code>&lt;html&gt;</code>）的包含块。初始包含块的大小通常与视口一致，但在某些情况下（如使用<code>@viewport</code>规则），初始包含块的大小可能会发生变化。</p><h3 id="视口元标签"><a href="#视口元标签" class="headerlink" title="视口元标签"></a>视口元标签</h3><p>为了优化移动设备上的网页显示效果，可以使用视口元标签（Viewport Meta Tag）来控制视口的大小和缩放行为。例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个元标签的含义是：</p><ul><li><code>width=device-width</code>：将布局视口的宽度设置为设备的宽度。</li><li><code>initial-scale=1.0</code>：设置初始缩放比例为1.0，即不进行缩放。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>以下是一个简单的示例，展示了如何使用视口元标签来优化移动设备上的网页显示效果：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>视口示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        这个div的宽度是视口宽度的100%    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>&lt;div&gt;</code>元素的宽度将始终等于视口的宽度，无论是在桌面浏览器还是在移动设备上。</p><p>总结来说，视口是指用户在浏览器中可以看到的网页区域，包括浏览器视口、布局视口和视觉视口等概念。理解视口的概念有助于优化网页在不同设备上的显示效果。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2024/06/21/suan-fa/"/>
      <url>/2024/06/21/suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="算法第一章-动态规划"><a href="#算法第一章-动态规划" class="headerlink" title="算法第一章 动态规划"></a>算法第一章 动态规划</h2><h3 id="一、动态规划的思想"><a href="#一、动态规划的思想" class="headerlink" title="一、动态规划的思想"></a>一、动态规划的思想</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">动态规划的核心思想是通过寻找子问题的最优解来构造原问题的最优解。在应用动态规划的过程中，需要找到问题的状态转移方程，并利用储存中间结果的方法来避免重复计算。总的来说，动态规划的思想包括：分析问题具有的重叠子问题性质、定义子问题的递推关系、储存中间结果以避免重复计算、推导出问题的最优解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、动态规划五要素"><a href="#二、动态规划五要素" class="headerlink" title="二、动态规划五要素"></a>二、动态规划五要素</h3><ul><li>最优子结构</li><li>重叠子问题</li><li>状态转移方程</li><li>边界条件</li><li>填表法</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里以<a href="https://www.douyin.com/?modal_id=7390330952771177766&recommend=1">抖音-最短编辑距离</a>为例题,讲解动态规划的思路</p><img src="/2024/06/21/suan-fa/动态规划构建问题.png" alt="image-20240803212145012" style="zoom: 50%;"><ol><li><p>构建问题: 输入两个字符串,返回最小编辑距离,用函数<code>Question(word1,word2) = minEditDist</code>来抽象</p></li><li><p>分解子问题: 一个大的问题可以拆成若干子问题,例如<code>Qusetion(word,word)</code>就是一个更小的子问题,<code>Qusetion(&quot;&quot;,&quot;&quot;)</code>就是最小的子问题,把所有的子问题列出来,形成二维矩阵,状态(i,j)表示 word1 前 i 个字符变成<br>word2 前 j 个字符的最小操作</p></li></ol><img src="/2024/06/21/suan-fa/分解子问题.png" alt="image-20240803215658973" style="zoom:50%;"><ol start="3"><li>求解简单子问题,最基本的子问题一般可以直接推导<ol><li><code>dp(&quot;&quot;,&quot;&quot;) = 0</code>,两个空串不用编辑,直接相等</li><li><code>dp(0,j) = j</code>, 将空串变成字符串 j,显然添加 j 个字符后相等</li><li><code>dp(i,0) = i</code>, 将字符串 i 变成空串,显然删除 i 个字符后相等</li></ol></li></ol><img src="/2024/06/21/suan-fa/求解简单子问题.png" alt="image-20240803220016620" style="zoom:50%;"><ol start="4"><li>通过已知问题求解,现在通过<strong>填表法</strong>,<code>dp(i-1,j-1)和dp(i,j-1)和dp(i-1,j)</code>已经算出,例如图中的<strong>Question(c,h)</strong>,所以可以采用从左到右,从上到下的填表法</li></ol><p>所以,<code>dp[i][j]</code>等于<code>dp(i-1,j-1)和dp(i,j-1)和dp(i-1,j)</code>的<strong>最小值+1</strong></p><img src="/2024/06/21/suan-fa/image-20240803220545638.png" alt="image-20240803220545638" style="zoom: 50%;"><img src="/2024/06/21/suan-fa/状态转移方程.png" alt="image-20240803222800847" style="zoom:80%;"><ol start="5"><li>计算时间复杂度</li></ol><p><img src="/2024/06/21/suan-fa/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="image-20240803223039984"></p><h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 72. 编辑距离中等给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。你可以对一个单词进行如下三种操作：插入一个字符删除一个字符替换一个字符示例 1：输入：word1 = "horse", word2 = "ros"输出：3解释：horse -> rorse (将 'h' 替换为 'r')rorse -> rose (删除 'r')rose -> ros (删除 'e')示例 2：输入：word1 = "intention", word2 = "execution"输出：5解释：intention -> inention (删除 't')inention -> enention (将 'i' 替换为 'e')enention -> exention (将 'n' 替换为 'x')exention -> exection (将 'n' 替换为 'c')exection -> execution (插入 'u')提示：0 &lt;= word1.length, word2.length &lt;= 500word1 和 word2 由小写英文字母组成 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">minEditDist</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len_a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token char">'#'</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token char">'@'</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token comment">// int dp[len_a + 1][len_b + 1];</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len_b<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len_a<span class="token punctuation">]</span><span class="token punctuation">[</span>len_b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结果是"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">minEditDist</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、例题"><a href="#三、例题" class="headerlink" title="三、例题"></a>三、例题</h3><h4 id="矩阵相乘问题"><a href="#矩阵相乘问题" class="headerlink" title="矩阵相乘问题"></a>矩阵相乘问题</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">矩阵相乘问题这道题的关键在于矩阵乘法的次数和举证的行列数有关,2行3列的矩阵乘3行4列的矩阵要乘2*4次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">解法<span class="token number">1</span><span class="token operator">:</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span> <span class="token comment">// 输入矩阵个数</span><span class="token keyword">int</span> m<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 定义子问题数组 m[i][j] 表示第 i 个矩阵到第 j 个矩阵的最少乘次数</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// n 个矩阵乘法要有 n+1 个行列数据</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初始化对角线元素为 0</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">解法<span class="token number">2</span><span class="token operator">:</span><span class="token comment">//状态转移方程 : dp[i][j] = min(dp[i][k] + dp[k+1][j] + p[i-1] * p[k] * p[j]) (i &lt; k &lt; j)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//矩阵的个数</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配n+1个指向整数数组的指针,dp数组表示从第i个矩阵乘到第j个矩阵</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 为每个指针分配整数数组</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//行列数据</span><span class="token comment">// 对数组进行赋值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//边界条件或初始化</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//自身不用乘,把对角线置为0</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从下往上,自左而右的填表   dp[i][j]必须要知道左侧的和下方的dp解</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span> <span class="token comment">//初始化为一个最大的值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dp["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]["</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 释放每个数组</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">;</span> <span class="token comment">// 释放指针数组</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最大子段和问题"><a href="#最大子段和问题" class="headerlink" title="最大子段和问题"></a>最大子段和问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">最大子段和问题<span class="token comment">/*给定n个整数（可能为负数）组成的序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的子段和的最大值。当所给整数均为负数时，定义子段和为0。要求算法的时间复杂度为O(n)。输入格式:输入有两行：第一行是n值（1&lt;=n&lt;=10000)；第二行是n个整数。输出格式:输出最大子段和。输入样例:在这里给出一组输入。例如：6-2 11 -4 13 -5 -2输出样例:在这里给出相应的输出。例如：20*/</span><span class="token comment">//状态转移方程dp[i] = max(dp[i-1] + nums[i],nums[i]); //字段的定义是连续的,所以dp[i]只可能接着上一段或者当前数字开头做新一段</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> MaxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getMaxSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MaxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MaxSum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>MaxSum<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> MaxSum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从第个数到第n个数的最大子段和</span><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">getMaxSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span>背包问题 <span class="token comment">/*7-20 0-1背包给定n(n&lt;=100)种物品和一个背包。物品i的重量是wi(wi&lt;=100)，价值为vi(vi&lt;=100)，背包的容量为C(C&lt;=1000)。应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有两个选择：装入或装入。不能将物品i装入多次，也不能只装入部分物品i。输入格式:共有n+1行输入：第一行为n值和c值，表示n件物品和背包容量c；接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。输出格式:输出装入背包中物品的最大总价值。输入样例:在这里给出一组输入。例如： 5 10 2 6 2 3 6 5 5 4 4 6 输出样例: 在这里给出相应的输出。例如： 15 */</span> <span class="token comment">//状态转移方程: if (j >= weights[i]) &#123;</span> <span class="token comment">//dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i]] + values[i]);</span> <span class="token comment">//&#125;</span> <span class="token comment">// else &#123;</span> <span class="token comment">// dp[i][j] = dp[i - 1][j];</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span>  <span class="token keyword">int</span> weights<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> values<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//多定义一个空间,让第i件物品价值对应</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cin <span class="token operator">>></span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>     <span class="token comment">//输出最优解</span>     <span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">;</span>     <span class="token keyword">int</span> y <span class="token operator">=</span> c<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> y<span class="token operator">-=</span>weights<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>x<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子集和"><a href="#子集和" class="headerlink" title="子集和"></a>子集和</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">子集和<span class="token comment">/*7-2 子集和给定n个不同的整数的集合，求有多少个子集的和为m输入格式:第一行两个数字n（0&lt;n&lt;=100）和m(0&lt;m&lt;=5000)，以空格分隔第二行n个不同的整数，以空格分隔输出格式:和为m的子集的个数输入样例:5 61 2 3 4 5 输出样例: 3 */</span> <span class="token comment">/* 状态转移方程: dp[i][j] = dp[i + 1][j]; if (j >= nums[i - 1]) &#123;  dp[i][j] += dp[i + 1][j - nums[i - 1]]; &#125; */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">5000</span></span></span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dp[i][j]表示第i个数开始到结尾,剩余和为j的最优解</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//第n个数开始到结尾即第i个数和为任何数的子集数为0</span> <span class="token punctuation">&#125;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cin <span class="token operator">>></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">最长公共子序列问题<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//表示长度为i和j的最长公共子序列长度</span>string A<span class="token punctuation">,</span> B<span class="token punctuation">;</span><span class="token keyword">int</span> alen<span class="token punctuation">;</span><span class="token keyword">int</span> blen<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">LCSlength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 0, A == 0 || B == 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> alen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> blen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> alen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> blen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> B<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// previously incorrect line: A[i] -> A[i-1]</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>alen<span class="token punctuation">]</span><span class="token punctuation">[</span>blen<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printLCS</span><span class="token punctuation">(</span><span class="token keyword">int</span> alen<span class="token punctuation">,</span> <span class="token keyword">int</span> blen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>alen <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> blen <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>alen <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">[</span>blen <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printLCS</span><span class="token punctuation">(</span>alen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>blne<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">[</span>alen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>alen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>blne<span class="token punctuation">]</span> <span class="token operator">></span> c<span class="token punctuation">[</span>alne<span class="token punctuation">]</span><span class="token punctuation">[</span>blen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printLCS</span><span class="token punctuation">(</span>alne<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>blen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printLCS</span><span class="token punctuation">(</span>alen<span class="token punctuation">,</span>blen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> A <span class="token operator">>></span> B<span class="token punctuation">;</span>    alen <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blen <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">LCSlength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// previously incorrect line: &lt;&lt; result &lt;&lt; endl -> &lt;&lt; endl.</span><span class="token function">printLCS</span><span class="token punctuation">(</span>alen<span class="token punctuation">,</span>blen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// main function should return a value</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法第二章-分治法"><a href="#算法第二章-分治法" class="headerlink" title="算法第二章 分治法"></a>算法第二章 分治法</h2><h3 id="一、分治法的思想"><a href="#一、分治法的思想" class="headerlink" title="一、分治法的思想"></a>一、分治法的思想</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">分治法就是不断的划分子问题,直到子问题的规模足够小到可以直接求解,再通过合并子问题求得原来的子问题的解<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、分治法的时间复杂度"><a href="#二、分治法的时间复杂度" class="headerlink" title="二、分治法的时间复杂度"></a>二、分治法的时间复杂度</h3><p><img src="/2024/06/21/suan-fa/%E4%B8%BB%E5%AE%9A%E7%90%86%E6%B1%82%E5%88%86%E6%B2%BB%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="img"></p><h3 id="三、分治法之排序问题"><a href="#三、分治法之排序问题" class="headerlink" title="三、分治法之排序问题"></a>三、分治法之排序问题</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">快速排序<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the size of the array: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Invalid array size."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the elements of the array: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sorted array: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">归并排序<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> num<span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、分治法之查找问题"><a href="#四、分治法之查找问题" class="headerlink" title="四、分治法之查找问题"></a>四、分治法之查找问题</h3><h4 id="二分查找-递归"><a href="#二分查找-递归" class="headerlink" title="二分查找(递归)"></a>二分查找(递归)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">二分搜索<span class="token comment">/*给定已按降序排好的n个元素a[0:n-1]，在这n个元素中找出一特定元素x。输入格式:第一行为n值(n&lt;=10^6)和查询次数m(m&lt;=10^3)；第二行为n个整数。接下来m个数，代表要查询的x输出格式:对于每一个查询的x，如果找到，输出x的下标；否则输出-1。输入样例:5 25 4 3 2 136输出样例:2-1*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//参数传入搜索范围就不用每次while循环更改mid值</span>    <span class="token comment">/*否则如果这样回传搜索范围就要更新    int left = 0;    int right = n;    int mid = left + (right - left) / 2;    */</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 未找到</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arrs<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">// 找到目标元素，返回索引</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">&lt;</span> arrs<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arrs<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归搜索左半部分</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">></span> arrs<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arrs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归搜索右半部分</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span> <span class="token keyword">int</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     cin <span class="token operator">>></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> tags<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     cin <span class="token operator">>></span> tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> result<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 使用二分查找前，先保证数组是排好序的</span> <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//升序排列</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二分查找基础版-迭代"><a href="#二分查找基础版-迭代" class="headerlink" title="二分查找基础版(迭代)"></a>二分查找基础版(迭代)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//注意数组的范围</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//注意查找的范围,既然不等,就不用把mid包含进去</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二分搜索返回数组-指针"><a href="#二分搜索返回数组-指针" class="headerlink" title="二分搜索返回数组(指针)"></a>二分搜索返回数组(指针)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//在 C++ 中，函数不能直接返回数组。你可以使用指针或者容器来表示数组。在你的情况下，你可以返回一个 `int*` 指针来表示数组。这个指针指向动态分配的内存，可以在函数外部进行释放。</span><span class="token comment">//另外，C++17 引入了 `std::array` 和 `std::vector` 这样的标准库容器，它们可以更方便地表示数组，并且具有更好的安全性和易用性。你可以考虑使用它们来代替裸指针。</span><span class="token comment">//下面是使用 `int*` 指针表示数组的代码：</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> middle<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>            result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        middle <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 目标值未找到</span>    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> middle<span class="token punctuation">;</span><span class="token comment">//result[0] = right;</span>    result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> middle<span class="token punctuation">;</span><span class="token comment">//result[1] = left;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> data<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> num <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//希望这可以帮助你理解如何在 C++ 中返回数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法第三章-贪心算法"><a href="#算法第三章-贪心算法" class="headerlink" title="算法第三章 贪心算法"></a>算法第三章 贪心算法</h2><h3 id="一、贪心算法的思想"><a href="#一、贪心算法的思想" class="headerlink" title="一、贪心算法的思想"></a>一、贪心算法的思想</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">贪心算法:在每一次选择中选择当前情况的最优解,达到整体问题的最优解 值得注意的是,贪心问题必须满足 1.贪心选择性质 贪心选择性质指的是，通过贪心策略所做出的每一个局部最优的选择，都能够组合成一个全局最优解。换句话说 就是贪心算法每次选择的都是当前状态下最优的策略，而这些最优的策略组合在一起，可以形成最终的最优解。 2.最优子问题 最优子结构指的是，问题的最优解可以通过子问题的最优解构建出来，换句话说，问题可以被分解成更小的子问题，子问题的最优解可以构成原问题的最优解。这个性质是动态规划和贪心算法设计的前提之一。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、例题"><a href="#二、例题" class="headerlink" title="二、例题"></a>二、例题</h3><h4 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">完全背包问题<span class="token comment">/*7-35 背包问题分数 25作者 郑琪单位 广东外语外贸大学给定n(n&lt;=100)种物品和一个背包。物品i的重量是wi，价值为vi，背包的容量为C(C&lt;=1000)。问:应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 装入背包的物品可以只装入部分物品。输入格式:共有n+1行输入： 第一行为n值和c值，表示n件物品和背包容量c； 接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。输出格式:输出装入背包中物品的最大总价值。输入样例:5 102 62 36 55 44 6输出样例:16.67*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Goods</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>goods<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Goods a<span class="token punctuation">,</span> Goods b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>value <span class="token operator">/</span> a<span class="token punctuation">.</span>weight <span class="token operator">></span> b<span class="token punctuation">.</span>value <span class="token operator">/</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> c<span class="token punctuation">;</span> <span class="token comment">//背包容量</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">>></span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>goods<span class="token punctuation">,</span> goods <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> VALUE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       VALUE <span class="token operator">+=</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        c <span class="token operator">-=</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        VALUE <span class="token operator">+=</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">/</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f\n"</span><span class="token punctuation">,</span> VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">11</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵 表示一个地点到另一个地点花费的时间</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//经过点的集合 赋值为1则在集合中 赋值为0则不在集合中</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//特定地点到各个点的最短时间</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> D<span class="token punctuation">;</span><span class="token comment">//D代表有向无向</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> M <span class="token operator">>></span> D<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0x3f3f3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给每个邻接矩阵赋很大的值</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">;</span>cin <span class="token operator">>></span> v <span class="token operator">>></span> u <span class="token operator">>></span> w<span class="token punctuation">;</span>t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>D<span class="token punctuation">)</span><span class="token comment">//如果是无向图，返过来也要赋值</span>   t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//集合置为空</span><span class="token keyword">int</span> sourse<span class="token punctuation">;</span><span class="token comment">//原点</span>cin <span class="token operator">>></span> sourse<span class="token punctuation">;</span>s<span class="token punctuation">[</span>sourse<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//memset(dist, 0x3f, sizeof s);</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>sourse<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>dist<span class="token punctuation">[</span>sourse<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token number">0x3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mini<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//不在集合中</span>    mini <span class="token operator">=</span> i<span class="token punctuation">;</span>    minv <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    s<span class="token punctuation">[</span>mini<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>mini<span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>mini<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> sourse <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0x3f3f3f</span><span class="token punctuation">)</span>       cout <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no path"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法第五章-回溯法-深度优先"><a href="#算法第五章-回溯法-深度优先" class="headerlink" title="算法第五章 回溯法(深度优先)"></a>算法第五章 回溯法(深度优先)</h2><h3 id="1-回溯法的思想"><a href="#1-回溯法的思想" class="headerlink" title="1.回溯法的思想"></a>1.回溯法的思想</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">有许多问题，当需要找出它的解集或者要求回答什么解是满足某些约束条件的最佳解时，往往要使用回溯法。回溯法的基本做法是搜索，或是一种组织得井井有条的，能避免不必要搜索的穷举式搜索法。这种方法适用于解一些组合数相当大的问题。回溯法在问题的解空间树中，按深度优先策略，从根结点出发搜索解空间树。算法搜索至解空间树的任意一点时，先判断该结点是否包含问题的解。如果肯定不包含，则跳过对该结点为根子树的搜索，逐层向其祖先结点回溯；否则，进入该子树，继续按深度优先策略搜索。若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。 而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>解空间</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">1、问题的解空间    复杂问题常常有很多的可能解，这些可能解构成了问题的解空间。解空间也就是进行穷举的搜索空间，所以，解空间中应该包括所有的可能解。确定正确的解空间很重要，如果没有确定正确的解空间就开始搜索，可能会增加很多重复解，或者根本就搜索不到正确的解。    例如，对于有n个物品的0/1背包问题，当n=3时，其解空间是：&#123;(0, 0, 0), (0, 0, 1), (0, 1, 0), (1, 0, 0), (0, 1, 1), (1, 0, 1), (1, 1, 0), (1, 1, 1) &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基本步骤</p></li><li><p>剪枝函数</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">常用剪枝函数：用约束函数在扩展结点处剪去不满足约束的子树；用限界函数剪去得不到最优解的子树;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2024/06/21/suan-fa/image-20231119155509899.png" alt="img"></p><h4 id="子集树和排列树"><a href="#子集树和排列树" class="headerlink" title="子集树和排列树"></a>子集树和排列树</h4><ul><li>子集树：当所给的问题是从 n 个元素的集合 S 中找出满足某种性质的子集时，相应的解空间树成为子集树。例：0－1 背包问题。</li><li>排列树：当所给问题是确定 n 个元素的满足排列树：当所给问题是确定 n 个元素的满足某种性质的排列时，相应的解空间树称为排列树。例：旅行售货员问题。</li></ul><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h4><p>迷宫问题:给你一个而且只有一个出口的迷宫，你需要从入口出发，穿过迷宫，走到出口。要求找到最短路径。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 给你二维矩阵，零代表可以走，一代表不可以走，从起点到终点，计算一下最短路径</span><span class="token comment">// 思路：DFS</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> path <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> min_path <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">>></span> directions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'D'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'L'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'U'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> end_x<span class="token punctuation">,</span> end_y<span class="token punctuation">;</span><span class="token keyword">int</span> min_length <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token comment">// 检查坐标是否在矩阵内,是返回true,否则返回false</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> w <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> h<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最短路径："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> min_path<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> current_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 不能走到边界或者已经访问过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> end_x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> end_y<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current_length <span class="token operator">&lt;</span> min_length<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            min_length <span class="token operator">=</span> current_length<span class="token punctuation">;</span>            min_path <span class="token operator">=</span> path<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 标记为已访问</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> direction<span class="token punctuation">]</span> <span class="token operator">:</span> directions<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">,</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> current_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 回溯，标记为未访问</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> h<span class="token punctuation">;</span>    cin <span class="token operator">>></span> w <span class="token operator">>></span> h<span class="token punctuation">;</span>    <span class="token comment">// 读入矩阵</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">matrix</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cin <span class="token operator">>></span> start_x <span class="token operator">>></span> start_y <span class="token operator">>></span> end_x <span class="token operator">>></span> end_y<span class="token punctuation">;</span>    <span class="token comment">// 开始DFS</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min_length <span class="token operator">!=</span> INT_MAX<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"找到终点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最短路径长度为："</span> <span class="token operator">&lt;&lt;</span> min_length <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到终点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0-1-背包"><a href="#0-1-背包" class="headerlink" title="0-1 背包"></a>0-1 背包</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//最优解</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前节点的路径</span><span class="token keyword">double</span> maxV<span class="token punctuation">;</span><span class="token comment">//最优解值</span><span class="token keyword">double</span> cr<span class="token punctuation">;</span><span class="token comment">//剩余容量</span><span class="token keyword">double</span> cv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前价值</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token comment">//n个物品, 背包容量c</span><span class="token keyword">struct</span> <span class="token class-name">Good</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>goods<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Good a<span class="token punctuation">,</span>Good b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>value <span class="token operator">/</span> a<span class="token punctuation">.</span>weight <span class="token operator">></span> b<span class="token punctuation">.</span>value <span class="token operator">/</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*int bound(int t) &#123;double temp = cv;for (int i = t + 1; i &lt;= n; i++) &#123;cv += goods[i].value;&#125;cv = temp;return cv;&#125;*/</span><span class="token comment">//限界函数</span><span class="token keyword">double</span> <span class="token function">bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> cleft <span class="token operator">=</span> cr<span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> cv<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> cleft<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>b <span class="token operator">+=</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>cleft <span class="token operator">-=</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>b <span class="token operator">+=</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">*</span> cleft <span class="token operator">/</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//以深度优先的方式遍历第t层中的某棵子树(第t层就是选第t个物品)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//遍历到叶子节点了</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">></span> maxV<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>maxV <span class="token operator">=</span> cv<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cr <span class="token operator">>=</span> goods<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token comment">//该点选择物品时</span><span class="token punctuation">&#123;</span>cr <span class="token operator">-=</span> goods<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>cv <span class="token operator">+=</span> goods<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">Backtrack</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历完当前节点子树,回到父节点状态</span>cr <span class="token operator">+=</span> goods<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>cv <span class="token operator">-=</span> goods<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果满足限界条件进入右子树</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bound</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> maxV<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Backtrack</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">>></span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cr <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>goods <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> goods <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左不选0 右选1</span><span class="token function">Backtrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> maxV <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个物品%d\n"</span><span class="token punctuation">,</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//二叉树</span><span class="token comment">//叶子节点有2n个, 节点有2^n-1个</span><span class="token comment">//算法时间复杂度为O(2^n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子集和-子集树"><a href="#子集和-子集树" class="headerlink" title="子集和(子集树)"></a>子集和(子集树)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> 子集和问题<span class="token punctuation">(</span>找到序列中子集和为v并输出<span class="token punctuation">)</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> MAX  <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>v<span class="token punctuation">;</span> <span class="token comment">//数目 子集和</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数据数组</span> <span class="token keyword">int</span> ans<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//解集</span> <span class="token keyword">int</span> cv<span class="token punctuation">;</span> <span class="token comment">//剩余价值</span> <span class="token keyword">bool</span> flag<span class="token punctuation">;</span><span class="token comment">//找到解标志记1</span> <span class="token keyword">void</span> <span class="token function">Backsearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cv <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//剩余价值为0</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">></span>n <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//遍历到叶子节点或者找到解就结束这次回溯</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> cv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//未找到解且能装下当前带选择数</span> cv <span class="token operator">-=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> ans<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">Backsearch</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向下遍历,没找到解才回归父节点状态</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cv <span class="token operator">+=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 装不下,遍历右子树</span> <span class="token function">Backsearch</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cin <span class="token operator">>></span> n <span class="token operator">>></span> v<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cv <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment">//初始化剩余价值</span><span class="token function">Backsearch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//输出解</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No Solution!"</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="居民部落问题"><a href="#居民部落问题" class="headerlink" title="居民部落问题"></a>居民部落问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> R<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//关系矩阵</span> <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> cx<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//x[i]=1表示居民在卫队中，反之不在</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment">//n是人数，m是仇敌关系数量</span> <span class="token keyword">int</span> max_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//卫队中居民人数</span> <span class="token keyword">bool</span> <span class="token function">Bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> t1<span class="token punctuation">)</span> <span class="token comment">//约束函数：当前的居民在卫队中中是否有仇敌关系</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>t1<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>t1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">Back</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">></span>n<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>max_num <span class="token operator">&lt;</span> cmax<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          max_num <span class="token operator">=</span> cmax<span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Bound</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//当前居民在卫队中没有找到仇人</span>  <span class="token punctuation">&#123;</span>      cx<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      cmax<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token function">Back</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cmax<span class="token operator">--</span><span class="token punctuation">;</span>      cx<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmax<span class="token operator">+</span>n<span class="token operator">-</span>t <span class="token operator">>=</span> max_num<span class="token punctuation">)</span> <span class="token comment">//剪枝：再往下找，考虑理想情况，卫队居民人数也不可能比当前最大的多了</span>  <span class="token punctuation">&#123;</span>      <span class="token function">Back</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>      R<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> R<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//对称矩阵</span>  <span class="token punctuation">&#125;</span>  <span class="token function">Back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> max_num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//编号从1开始</span>  <span class="token punctuation">&#123;</span>      cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="旅行售货员问题"><a href="#旅行售货员问题" class="headerlink" title="旅行售货员问题"></a>旅行售货员问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token comment">/* 7-1 旅行售货员 某售货员要到若干城市去推销商品，已知各城市之间的路程(或旅费)。他要选定一条从驻地出发，经过每个城市一遍，最后回到驻地的路线，使总的路程（或总旅费）最小。 输入格式: 第一行为城市数n 下面n行n列给出一个完全有向图，如 i 行 j 列表示第 i 个城市到第 j 个城市的距离。 输出格式: 一个数字，表示最短路程长度。 输入样例: 3 0 2 1 1 0 2 2 1 0 输出样例: 3 */</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span> <span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span> <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//第t层表示已经到了第t - 1个城市</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//叶子节点,此时在第n个城市</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> g<span class="token punctuation">[</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          ans <span class="token operator">=</span> now <span class="token operator">+</span> g<span class="token punctuation">[</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//回到驻点</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">+</span> g<span class="token punctuation">[</span>x<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             now <span class="token operator">+=</span> g<span class="token punctuation">[</span>x<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token function">backtrack</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              now <span class="token operator">-=</span> g<span class="token punctuation">[</span>x<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          cin <span class="token operator">>></span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//初始化为1 2 3 4</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从第二层开始遍历,第一层就是从驻地到其他城市</span>  cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//不剪枝时间复杂度为O(n!)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="n-后问题"><a href="#n-后问题" class="headerlink" title="n 后问题"></a>n 后问题</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">在n×n格的棋盘上放置彼此不受攻击的n个皇后。按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n×n格的棋盘上放置n个皇后，任何个皇后不放在同一行或同一列或同一斜线上输入格式:一个数字n输出格式:按照深度优先输出所有可行的解输入样例:4输出样例:2 4 1 33 1 4 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">解法一<span class="token operator">:</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">fuc</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">abs</span><span class="token punctuation">(</span>t <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fuc</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">backtrack</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>解法二<span class="token operator">:</span><span class="token comment">/*在n×n格的棋盘上放置彼此不受攻击的n个皇后。按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n×n格的棋盘上放置n个皇后，任何2个皇后不放在同一行或同一列或同一斜线上输入格式:一个数字n输出格式:按照深度优先输出所有可行的解输入样例:4输出样例:2 4 1 33 1 4 2*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> chosen<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>t <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">abs</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> result<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chosen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            chosen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">backtrack</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            chosen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最小机器重量问题"><a href="#最小机器重量问题" class="headerlink" title="最小机器重量问题"></a>最小机器重量问题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*7-2 最小重量机器设计问题设某一机器由n个部件组成，每一种部件都可以从m个不同的供应商处购得。设wij是从供应商j 处购得的部件i的重量，cij是相应的价格。试设计一个算法，给出总价格不超过d的最小重量机器设计。输入格式:第一行有3 个正整数n ，m和d， 0&lt;n&lt;30, 0&lt;m&lt;30, 接下来的2n 行，每行m个数。前n行是c，后n行是w。输出格式:输出计算出的最小重量，以及每个部件的供应商输入样例:3 3 41 2 33 2 12 2 21 2 33 2 12 2 2输出样例:在这里给出相应的输出。例如：41 3 1*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cost<span class="token punctuation">;</span> <span class="token comment">//限定价格 部件数 供应商数</span><span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//w[i][j]为第i个零件在第j个供应商的重量</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//c[i][j]为第i个零件在第j个供应商的价格</span><span class="token keyword">int</span> bestx<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//bestx[i]用来存放第i个零件的最后选择供应商</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x[i]临时存放第i个零件的供应商</span><span class="token keyword">int</span> cw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bestw <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span>  <span class="token comment">// t对应 部件t</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token comment">//搜索到叶子结点，一个搜索结束，所有零件已经找完</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cw <span class="token operator">&lt;</span> bestw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bestw <span class="token operator">=</span> cw<span class="token punctuation">;</span> <span class="token comment">//当前最小重量</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                bestx<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//return; // 有else就不需要 return，两个选一个</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 遍历所有供应商</span>        <span class="token punctuation">&#123;</span>            cc <span class="token operator">+=</span> c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cw <span class="token operator">+=</span> w<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cc <span class="token operator">&lt;=</span> cost <span class="token operator">&amp;&amp;</span> cw <span class="token operator">&lt;=</span> bestw<span class="token punctuation">)</span> <span class="token comment">// 剪枝操作</span>                <span class="token function">Backtrack</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cc <span class="token operator">-=</span> c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cw <span class="token operator">-=</span> w<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> cost<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//各部件在不同供应商的重量 cij:物品i在供应商j的价格</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//各部件在不同供应商的价格 wij:物品i在供应商j的重量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Backtrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> bestw <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 最低的重量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 输出各个部件的供应商</span>        cout <span class="token operator">&lt;&lt;</span> bestx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法第六章、分支限界法-广度优先或者最小生成树"><a href="#算法第六章、分支限界法-广度优先或者最小生成树" class="headerlink" title="算法第六章、分支限界法(广度优先或者最小生成树)"></a>算法第六章、分支限界法(广度优先或者最小生成树)</h2><h3 id="分支限界法的基本思想"><a href="#分支限界法的基本思想" class="headerlink" title="分支限界法的基本思想:"></a>分支限界法的基本思想:</h3><p>不断的广度优先遍历所有的层次</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">从下一扩展结点的不同方式导致不同的分支限界法。  1、FIFO分支限界法    将活结点表组织成为一个队列，按先进先出原则选择下一个结点。2、优先队列分支限界法    按照优先队列中规定的优先级选取优先级最高的节点成为当前扩展节点。- 最大优先队列：使用最大堆，体现最大效益优先- 最小优先队列：使用最小堆，体现最小费用优先<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>广度优先搜索（BFS）和深度优先搜索（DFS）是图和树的两种基本遍历算法。它们的主要区别在于搜索节点的顺序和方式。</p><h3 id="DFS-与-BFS-的区别"><a href="#DFS-与-BFS-的区别" class="headerlink" title="DFS 与 BFS 的区别"></a>DFS 与 BFS 的区别</h3><h4 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h4><p><strong>广度优先搜索</strong>是一种分层遍历的算法，从起始节点开始，逐层扩展节点，直到找到目标节点或遍历完所有节点。BFS 通常使用队列（queue）来实现。</p><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ol><li>将起始节点放入队列。</li><li>从队列中取出一个节点，访问它。</li><li>将该节点的所有未访问过的邻居节点放入队列。</li><li>重复步骤 2 和 3，直到队列为空。</li></ol><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li><strong>逐层扩展</strong>：BFS 先访问离起始节点最近的节点，然后逐渐扩展到更远的节点。</li><li><strong>最短路径</strong>：在无权图中，BFS 可以找到从起始节点到目标节点的最短路径。</li><li><strong>空间复杂度高</strong>：由于需要存储所有节点的邻居，BFS 可能会占用较多的内存。</li></ul><h4 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h4><p><strong>深度优先搜索</strong>是一种沿着树或图的深度遍历的算法，尽可能深地搜索每个分支，直到无法继续，然后回溯到上一个节点，继续搜索其他分支。DFS 通常使用栈（stack）或递归来实现。</p><h5 id="步骤（使用栈）："><a href="#步骤（使用栈）：" class="headerlink" title="步骤（使用栈）："></a>步骤（使用栈）：</h5><ol><li>将起始节点放入栈。</li><li>从栈中取出一个节点，访问它。</li><li>将该节点的所有未访问过的邻居节点放入栈。</li><li>重复步骤 2 和 3，直到栈为空。</li></ol><h5 id="步骤（使用递归）："><a href="#步骤（使用递归）：" class="headerlink" title="步骤（使用递归）："></a>步骤（使用递归）：</h5><ol><li>访问当前节点。</li><li>递归地访问当前节点的每个未访问过的邻居节点。</li></ol><h5 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h5><ul><li><strong>深度优先</strong>：DFS 会尽可能深地搜索每个分支，直到无法继续，然后回溯。</li><li><strong>路径不一定最短</strong>：在无权图中，DFS 找到的路径不一定是最短路径。</li><li><strong>空间复杂度低</strong>：由于 DFS 只需要存储当前路径上的节点，空间复杂度通常较低。</li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><h5 id="BFS-示例（使用队列）："><a href="#BFS-示例（使用队列）：" class="headerlink" title="BFS 示例（使用队列）："></a>BFS 示例（使用队列）：</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">visited</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> node <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> node <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> graph <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="DFS-示例（使用递归）："><a href="#DFS-示例（使用递归）：" class="headerlink" title="DFS 示例（使用递归）："></a>DFS 示例（使用递归）：</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> graph <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">visited</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上示例代码，可以直观地理解 BFS 和 DFS 的实现方式和区别。BFS 逐层扩展，适合寻找最短路径；DFS 深度优先，适合遍历所有路径。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="0-1-背包问题-FIFO"><a href="#0-1-背包问题-FIFO" class="headerlink" title="0-1 背包问题(FIFO)"></a>0-1 背包问题(FIFO)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> level<span class="token punctuation">;</span> <span class="token comment">//该节点所在解空间树中的层次</span><span class="token keyword">int</span> cw<span class="token punctuation">;</span> <span class="token comment">//该节点的当前载重量</span><span class="token keyword">int</span> cp<span class="token punctuation">;</span> <span class="token comment">// 该节点的当前价值</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>queue <span class="token operator">&lt;</span>Node<span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment">// 定义队列</span><span class="token keyword">struct</span> <span class="token class-name">Obj</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//每件物品的重量及价值</span>Obj objs<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//定义存储n件物品的数组，方便调用sort函数</span><span class="token keyword">int</span> bestv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">double</span> cleft<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> cleft<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token operator">+=</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>cleft<span class="token operator">=</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>v<span class="token operator">+=</span> cleft<span class="token operator">*</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">/</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Node node<span class="token punctuation">;</span>node<span class="token punctuation">.</span>cp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>cw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Node node <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>level <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>cp <span class="token operator">></span> bestv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bestv <span class="token operator">=</span> node<span class="token punctuation">.</span>cp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>cw <span class="token operator">+</span> objs<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断左分支是否入队</span>Node nextnode<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>level <span class="token operator">=</span> node<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cw <span class="token operator">=</span> node<span class="token punctuation">.</span>cw <span class="token operator">+</span> objs<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cp <span class="token operator">=</span> node<span class="token punctuation">.</span>cp <span class="token operator">+</span> objs<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> nextnode <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> bestv <span class="token operator">&lt;</span> nextnode<span class="token punctuation">.</span>cp <span class="token punctuation">)</span>bestv <span class="token operator">=</span> nextnode<span class="token punctuation">.</span>cp<span class="token punctuation">;</span><span class="token comment">//及时刷新暂时最优值，提高效率</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>cp <span class="token operator">+</span> <span class="token function">bound</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c <span class="token operator">-</span> node<span class="token punctuation">.</span>cw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> bestv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断右分支是否入队</span>Node nextnode<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>level <span class="token operator">=</span> node<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cw <span class="token operator">=</span> node<span class="token punctuation">.</span>cw<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cp <span class="token operator">=</span> node<span class="token punctuation">.</span>cp<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Obj a<span class="token punctuation">,</span> Obj b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>value<span class="token operator">/</span>a<span class="token punctuation">.</span>weight <span class="token operator">></span> b<span class="token punctuation">.</span>value<span class="token operator">/</span>b<span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token operator">>></span> c<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">>></span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>objs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> objs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> bestv <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0-1-背包-最小堆"><a href="#0-1-背包-最小堆" class="headerlink" title="0-1 背包(最小堆)"></a>0-1 背包(最小堆)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> level<span class="token punctuation">;</span> <span class="token comment">//该节点所在解空间树中的层次</span><span class="token keyword">double</span> cw<span class="token punctuation">;</span> <span class="token comment">//该节点的当前载重量</span><span class="token keyword">double</span> cv<span class="token punctuation">;</span> <span class="token comment">// 该节点的当前价值</span><span class="token keyword">double</span> uvalue<span class="token punctuation">;</span> <span class="token comment">//该节点的上界 = 当前载重量 + 剩余容量的最大价值（采用背包问题的计算方法）</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>uvalue <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>uvalue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Obj</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">int</span> preindex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//每件物品的重量及价值</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> bestc<span class="token punctuation">;</span><span class="token keyword">int</span> bestx<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>Obj objs<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>priority_queue <span class="token operator">&lt;</span> Node <span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment">// 定义队列</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Obj a<span class="token punctuation">,</span> Obj b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//用于sort排序时以单位重量价值降序排序</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>value <span class="token operator">/</span> a<span class="token punctuation">.</span>weight <span class="token operator">></span> b<span class="token punctuation">.</span>value <span class="token operator">/</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">double</span> left<span class="token punctuation">)</span><span class="token comment">//利用背包问题（贪心算法）计算剩余容量为left，可选物品为第t~n件时可装入的最大价值</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> maxv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> t <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> left <span class="token operator">>=</span> objs<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>maxv <span class="token operator">+=</span> objs<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>left <span class="token operator">-=</span> objs<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> t <span class="token operator">&lt;=</span> n <span class="token punctuation">)</span> maxv <span class="token operator">+=</span>  left <span class="token operator">*</span> objs<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">/</span> objs<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token keyword">return</span> maxv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化根节点，加入队列</span>Node node<span class="token punctuation">;</span>node<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>cw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>cv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>uvalue <span class="token operator">=</span> <span class="token function">bound</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Node node <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//上界最大者出堆</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//采用优先级队列，如果优先访问叶子节点，说明该叶子节点的上界值要高于其他所有待扩展节点的上界，</span><span class="token comment">//由于该叶子节点的值与上界值相等，所以该叶子节点代表最优解，直接退出循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span> node<span class="token punctuation">.</span>level <span class="token operator">></span> n <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bestc <span class="token operator">=</span> node<span class="token punctuation">.</span>cv<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>bestx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//约束函数，如果第level个物品可以装入背包，则左分支节点进入优先队列</span><span class="token keyword">if</span> <span class="token punctuation">(</span> node<span class="token punctuation">.</span>cw <span class="token operator">+</span> objs<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;=</span> c <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Node nextnode<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>level <span class="token operator">=</span> node<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cw <span class="token operator">=</span> node<span class="token punctuation">.</span>cw <span class="token operator">+</span> objs<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cv <span class="token operator">=</span> node<span class="token punctuation">.</span>cv <span class="token operator">+</span> objs<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>uvalue <span class="token operator">=</span> node<span class="token punctuation">.</span>uvalue<span class="token punctuation">;</span><span class="token comment">//复制父节点到根的路径</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>nextnode<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>x<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//左孩子，路径为1</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点加入队列</span><span class="token punctuation">&#125;</span><span class="token comment">//限界函数，如果右分支上界大于最优的中间结果，则进入优先队列</span><span class="token keyword">double</span> uvalue <span class="token operator">=</span> <span class="token function">bound</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">-</span> node<span class="token punctuation">.</span>cw<span class="token punctuation">)</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>cv<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> uvalue <span class="token operator">></span> bestc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Node nextnode<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>level <span class="token operator">=</span> node<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cw <span class="token operator">=</span> node<span class="token punctuation">.</span>cw<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>cv <span class="token operator">=</span> node<span class="token punctuation">.</span>cv<span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>uvalue <span class="token operator">=</span> uvalue<span class="token punctuation">;</span><span class="token comment">//复制父节点的到根的路径</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>nextnode<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>nextnode<span class="token punctuation">.</span>x<span class="token punctuation">[</span>node<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//右孩子，路径为0</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//节点加入队列</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> bestc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">>></span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>preindex <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//按单位重量价值一次性降序排序，便于后续贪心法计算上界</span><span class="token function">sort</span><span class="token punctuation">(</span> objs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> objs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最优值</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"best value:"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出最优解，所选物品的重量和价值</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"best plan:\nweight\tvalue"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bestx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"选择了第"</span> <span class="token operator">&lt;&lt;</span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>preindex <span class="token operator">&lt;&lt;</span> <span class="token string">"个物品"</span> <span class="token operator">&lt;&lt;</span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="期中考试例题"><a href="#期中考试例题" class="headerlink" title="期中考试例题"></a>期中考试例题</h2><p><img src="/2024/06/21/suan-fa/image-20231116211149281.png" alt="image-20231116211149281"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Course</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> difc<span class="token punctuation">;</span>string name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Search</span><span class="token punctuation">(</span>Course courses<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>       <span class="token comment">//a[n]是搜索数组，m为要搜索的元素，n是数组的长度</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> detection <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//标志位</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>middle <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> top<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">//先计算该数组中间值下标</span><span class="token keyword">if</span> <span class="token punctuation">(</span>courses<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">.</span>difc <span class="token operator">==</span> target<span class="token punctuation">)</span>          <span class="token comment">//如果中间值等于要搜索的元素，则将标志位标记为中间值下标</span>detection<span class="token operator">=</span>middle<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>courses<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">.</span>difc <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>      <span class="token comment">//如果中间值小于要搜索的元素，即要查询元素在中间值右边，则将要查询数据左边界改成中间值之后一个的数据</span><span class="token punctuation">&#123;</span>low<span class="token operator">=</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>  <span class="token comment">//如果中间值大于要搜索的元素，即要查询元素在中间值左边，则将要查询数据左边界改成中间值之前一个的数据</span><span class="token punctuation">&#123;</span>top<span class="token operator">=</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>detection <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment">//如果m没有在其中，则执行完，top为底，low为顶，m在中间。</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> top<span class="token punctuation">;</span>j <span class="token operator">=</span> low<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> detection<span class="token punctuation">;</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//cout &lt;&lt; "i的值为：" &lt;&lt;i&lt;&lt;endl&lt;&lt; "j的值为："&lt;&lt;j&lt;&lt; endl;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>Course courses<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> courses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>difc <span class="token operator">>></span> courses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span>cin <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> target<span class="token punctuation">;</span>cin <span class="token operator">>></span> target<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> courses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>difc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"none"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>             m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">Search</span><span class="token punctuation">(</span>courses<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> courses<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/06/21/suan-fa/image-20231122204922714.png" alt="image-20231122204922714"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">这是一个典型的逆序对或者顺序对问题有多种解法<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">5000</span></span></span><span class="token keyword">int</span> nums<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//解法1:改成>=原来的逆序对数目变顺序对</span>        sum <span class="token operator">+=</span> right <span class="token operator">-</span> j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span> mid <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 统计逆序对的数量</span>            temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 把临时数组复制回原数组</span>        arr<span class="token punctuation">[</span>left <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//解法2: nums[i] = - nums[i];</span>    <span class="token punctuation">&#125;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"逆序对的数量："</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"顺序对的数量: "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/06/21/suan-fa/image-20231122205142990.png" alt="image-20231122205142990"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">最长公共子序列问题<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1000</span></span></span>string course<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>string myc<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 输出选择的课程名字</span><span class="token keyword">void</span> <span class="token function">printLCS</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 递归终止条件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//因为下标选择从1开始</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果当前课程相同，表示选择了这门课程</span><span class="token keyword">if</span> <span class="token punctuation">(</span>course<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> myc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printLCS</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> course<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果dp[i-1][j]大于dp[i][j-1]，表示选择了当前课程的前一个课程</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printLCS</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果dp[i-1][j]小于dp[i][j-1]，表示选择了当前课程的后一个课程</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printLCS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果dp[i-1][j]等于dp[i][j-1]，表示有多种选择，优先选择开课时间靠前的方案，选择了当前课程的前一个课程</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//因为要选开课方案前的,所以优先淘汰开课时间后的方案</span><span class="token function">printLCS</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> course<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> myc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>course<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> myc<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出选择的课程数量</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 输出选择的课程名称</span><span class="token function">printLCS</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt做一个表白小程序</title>
      <link href="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/"/>
      <url>/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt实战01"><a href="#Qt实战01" class="headerlink" title="Qt实战01"></a>Qt实战01</h1><ul><li><p>刷视频看到大家学了图形化界面编程后的第一件事,一定是写出一个表白小程序用来对自己心爱的人用来表白,而且一定要让他接受,所以我写了一个qt小程序,能够把窗口置于顶层,让她一直烂到你的爱意,而且怎么关也关不掉,正好适合对不怎么会使用电脑的人使用</p></li><li><p>当然,关掉的方法还是有很多的,包括但不限于调出任务管理器kill掉等方法</p></li></ul><h3 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h3><p>这是点击不接受的窗口,右侧是马里奥的gif动画</p><p>若是不接受,会一直置于顶层</p><p><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128090249459.png" alt="image-20240128090249459"></p><p>这是接受后弹出的窗口,可以拖拽</p><p><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128090322689.png" alt="image-20240128090322689"></p><h3 id="关键部分讲解"><a href="#关键部分讲解" class="headerlink" title="关键部分讲解"></a>关键部分讲解</h3><h4 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h4><p>使用了qt写好的qmovie类,创建时指定动画资源,设置好播放速度,窗口创建就会开始播放,默认循环播放</p><blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;添加马里奥动画QMovie * mario &#x3D; new QMovie(&quot;:&#x2F;mario.gif&quot;);ui-&gt;marioLabel-&gt;setMovie(mario);ui-&gt;marioLabel-&gt;setScaledContents(true); &#x2F;&#x2F; 将内容缩放以适应控件大小&#x2F;&#x2F;设置播放速度mario-&gt;setSpeed(150);mario-&gt;start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="循环逻辑"><a href="#循环逻辑" class="headerlink" title="循环逻辑"></a>循环逻辑</h4><p>这里使用connect链接按钮的点击事件,若是接受了,会弹出一个自定义的yes_next窗口,里面是我写好的从多处收集来的情诗和句子,背景我使用了爱心图片填充</p><p>如果用户点击了不接受,就会创建一个循环对话框,一直监听信号,直到用户点击yes,在弹出yes_next对话框</p><blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 连接按钮的点击事件 QObject::connect(ui-&gt;pushButton_Yes, &amp;QPushButton::clicked, [&#x3D;]()&#123;     Yes_Next *y &#x3D; new Yes_Next;     y-&gt;setVisible(true);     y-&gt;setWindowFlag(Qt::WindowStaysOnTopHint);     &#x2F;&#x2F;y-&gt;setGeometry(100, 100, 400, 400); &#x2F;&#x2F; 设置窗口位置和大小     y-&gt;setGeometry(600,150,400,600);     y-&gt;show();     y-&gt;raise();     this-&gt;close();     &#x2F;&#x2F;exit(0); &#125;); QObject::connect(ui-&gt;pushButton_No, &amp;QPushButton::clicked, [&#x3D;]()&#123;     &#x2F;&#x2F; 用户点击了 &quot;No&quot; 按钮，继续循环     while (true) &#123;         QDialog loopDialog;         loopDialog.setWindowTitle(&quot;循环对话框&quot;);         loopDialog.setWindowFlag(Qt::WindowStaysOnTopHint);         loopDialog.setModal(true);         loopDialog.setFixedSize(350, 100); &#x2F;&#x2F; 设置固定大小         QLabel *label &#x3D; new QLabel(&amp;loopDialog);         label-&gt;setText(&quot;你在考虑下,接不接受&quot;); &#x2F;&#x2F; 确保文本正确设置         label-&gt;show();         label-&gt;setGeometry(120, 10, 150, 35); &#x2F;&#x2F; 设置位置和大小         &#x2F;&#x2F;label-&gt;setStyleSheet(&quot;border: 1px solid black&quot;); &#x2F;&#x2F; 添加边框以显示位置         QPalette palette &#x3D; label-&gt;palette();         palette.setColor(QPalette::Text, QColor(0, 0, 255)); &#x2F;&#x2F; 设置文本颜色为蓝色         label-&gt;setPalette(palette);         QPushButton *btnYesLoop &#x3D; new QPushButton(&quot;Yes&quot;, &amp;loopDialog);         QPushButton *btnNoLoop &#x3D; new QPushButton(&quot;No&quot;, &amp;loopDialog);         btnYesLoop-&gt;setGeometry(50, 50, 100, 30);         btnNoLoop-&gt;setGeometry(200, 50, 100, 30);         &#x2F;&#x2F; 设置父子关系         btnYesLoop-&gt;setParent(&amp;loopDialog);         btnNoLoop-&gt;setParent(&amp;loopDialog);         &#x2F;&#x2F; 连接按钮的点击事件         QObject::connect(btnYesLoop, &amp;QPushButton::clicked, &amp;loopDialog, &amp;QDialog::accept);         QObject::connect(btnNoLoop, &amp;QPushButton::clicked, &amp;loopDialog, &amp;QDialog::reject);         &#x2F;&#x2F; 显示循环对话框         if (loopDialog.exec() &#x3D;&#x3D; QDialog::Accepted) &#123;             &#x2F;&#x2F; 用户点击了 &quot;Yes&quot; 按钮，退出循环             Yes_Next *y &#x3D; new Yes_Next;             y-&gt;setGeometry(600, 150, 400, 400); &#x2F;&#x2F; 设置窗口位置和大小             y-&gt;show();             y-&gt;raise();             this-&gt;close();             &#x2F;&#x2F;exit(0);             break;         &#125;     &#125; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="yes-next窗口"><a href="#yes-next窗口" class="headerlink" title="yes_next窗口"></a>yes_next窗口</h4><blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;yes_next.h&quot;#include &quot;ui_yes_next.h&quot;Yes_Next::Yes_Next(QWidget *parent) : QWidget(parent) , ui(new Ui::Yes_Next)&#123; ui-&gt;setupUi(this); this-&gt;setWindowTitle(&quot;poems&quot;); &#x2F;*使用HTML标记：你可以使用HTML标记来在QLabel中显示换行文字。例如，你可以使用&lt;br&gt;标记来表示换行。示例代码如下：     ui-&gt;label-&gt;setText(&quot;第一行文字&lt;br&gt;第二行文字&quot;); 使用QLabel的setWordWrap方法：你可以使用setWordWrap方法来启用QLabel的自动换行功能。示例代码如下：     ui-&gt;label-&gt;setText(&quot;这是一段很长的文字，当文字超出label的大小时会自动换行&quot;);     ui-&gt;label-&gt;setWordWrap(true); 这两种方法都可以用来在QLabel中显示换行文字。你可以根据你的需求选择其中一种方法*&#x2F; QString poem &#x3D; &quot;&lt;br&gt;莎士比亚的《十四行诗》：&lt;br&gt;“我能否将你比作夏日？&lt;br&gt;但你比夏日更可爱也更温柔。”&lt;br&gt;&quot;                &quot;&lt;br&gt;杰拉尔德的《未与你共度一切》：&lt;br&gt;“我曾遇到过无数生灵，曾看过无数美景，&lt;br&gt;这一切却未与你共度，&lt;br&gt;这都会是我的损失；&lt;br&gt;这些事情我都想与你共度，&quot;                &quot;&lt;br&gt;这一切才会是我的收获。”&lt;br&gt;&lt;br&gt;波伏娃的《越洋情书》：&lt;br&gt;“唯有你也想见我的时候，我们的见面才有意义。”&lt;br&gt;&lt;br&gt;“犹如飞蛾扑向星星，又如黑夜追求黎明。”&lt;br&gt;&lt;br&gt;“见你第一眼我就沦陷了。”&lt;br&gt;&lt;br&gt;“他是我的南北，&quot;                &quot;我的西东，我的工作日，我的礼拜天，我的正午，我的深夜，我的言语，我的歌声。我认为爱可以不朽。”&quot;; ui-&gt;label-&gt;setText(poem); ui-&gt;label-&gt;setStyleSheet(&quot;background-color: pink; font-style: italic; font-family: 华文楷体;&quot;); QFont font &#x3D; ui-&gt;label-&gt;font(); &#x2F;&#x2F; 获取label的当前字体 font.setPointSize(16); &#x2F;&#x2F; 设置字体大小为16 ui-&gt;label-&gt;setFont(font); &#x2F;&#x2F; 应用新的字体 ui-&gt;label-&gt;setWordWrap(true); &#x2F;&#x2F; 设置背景图片 QString imagePath &#x3D; &quot;url(:&#x2F;loveheart.jfif)&quot;; &#x2F;&#x2F; 替换成你的图片路径 this-&gt;setStyleSheet(&quot;background-image: &quot;+ imagePath + &quot;; background-position: center; background-attachment: fixed;&quot;); &#x2F;*使用background-size属性来指定背景图片的大小和填充方式。例如，你可以设置为background-size: cover;     * 来让背景图片覆盖整个窗口，或者设置为background-size: contain;来让背景图片完整显示在窗口内，不进行裁剪。*&#x2F;    &#x2F;&#x2F;background-repeat: no-repeat不重复&#125;Yes_Next::~Yes_Next()&#123;    delete ui;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这个窗口里面有使用到一些html和qss之类的知识,我都在注释中写了,看注释就可以</p><h4 id="Qt打包成品"><a href="#Qt打包成品" class="headerlink" title="Qt打包成品"></a>Qt打包成品</h4><p>如果不打包的话,这个程序只能在qt框架中使用,到别人的电脑上不一定能用(缺少依赖环境),所以最好把成品打包,再发给别人</p><h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><p><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128091709599.png" alt="image-20240128091709599"></p><ol><li><p>箭头处切换成release版本在编译运行</p></li><li><p>找到release的生成文件夹,一般就在项目的同级目录下</p></li></ol><p>  <img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128091957364.png" alt="image-20240128091957364"></p><ol start="3"><li><p>找到.exe文件,复制到任意一个空文件夹</p></li><li><p>右键在终端中打开<br> <img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128092221532.png" alt="image-20240128092221532"></p></li><li><p>输入windeployqt “你的exe程序名字”,就会帮你自动打包需要的资源文件,最后放在此文件夹中,然后你就可以把这个文件夹发给别人开心的玩耍了!</p><p> <img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128092456774.png" alt="image-20240128092456774"></p></li></ol><img src="/2024/06/21/qt-zuo-yi-ge-biao-bai-xiao-cheng-xu/image-20240128092516992.png" alt="image-20240128092516992" style="zoom:80%;"><h3 id="获取成品"><a href="#获取成品" class="headerlink" title="获取成品"></a>获取成品</h3><p>链接：<a href="https://pan.baidu.com/s/1dNQ9S1uWGD7fw-RxlXoIRA?pwd=1234">https://pan.baidu.com/s/1dNQ9S1uWGD7fw-RxlXoIRA?pwd=1234</a><br>提取码：1234</p>]]></content>
      
      
      <categories>
          
          <category> GUI程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取番茄小说</title>
      <link href="/2024/06/21/pa-qu-fan-qie-xiao-shuo/"/>
      <url>/2024/06/21/pa-qu-fan-qie-xiao-shuo/</url>
      
        <content type="html"><![CDATA[<h2 id="本文用于纪录爬取番茄小说过程中遇到的困难和解决措施"><a href="#本文用于纪录爬取番茄小说过程中遇到的困难和解决措施" class="headerlink" title="本文用于纪录爬取番茄小说过程中遇到的困难和解决措施"></a>本文用于纪录爬取番茄小说过程中遇到的困难和解决措施</h2><p>首先找到我想要的小说第一章</p><h4 id="1-找网络接口"><a href="#1-找网络接口" class="headerlink" title="1.找网络接口"></a>1.找网络接口</h4><p>右键检查,清空网络日志,刷新,找到6893843740742386183document类型请求标头URL确实是<a href="https://fanqienovel.com/reader/6893843740742386183,%E6%B2%A1%E6%9C%89%E5%81%9A%E5%85%B6%E4%BB%96%E6%8E%AA%E6%96%BD,%E6%89%80%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%94%A8requests%E5%BA%93%E4%BC%AA%E8%A3%85%E8%AE%BF%E9%97%AE,%E8%BF%99%E4%B8%80%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B">https://fanqienovel.com/reader/6893843740742386183,没有做其他措施,所以直接用requests库伪装访问,这一部分代码如下</a></p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126232926232-1706330347599-1.png"></p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># cap01_url = 'https://fanqienovel.com/reader/6893843740742386183?enter_from=reader'</span><span class="token comment"># cap02_url = 'https://fanqienovel.com/reader/6893843740834660878?enter_from=reader'</span><span class="token comment"># cap03_url = 'https://fanqienovel.com/reader/6893843740910158344?enter_from=reader'</span>观察发现<span class="token punctuation">,</span>网页之间并没有直接关联<span class="token keyword">import</span> requestscap01_url <span class="token operator">=</span> <span class="token string">'https://fanqienovel.com/reader/6893843740742386183?enter_from=reader'</span><span class="token comment"># cap02_url = 'https://fanqienovel.com/reader/6893843740834660878?enter_from=reader'</span><span class="token comment"># cap03_url = 'https://fanqienovel.com/reader/6893843740910158344?enter_from=reader'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>            <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0'</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>cap01_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-接下来就使用xpath提取数据了"><a href="#2-接下来就使用xpath提取数据了" class="headerlink" title="2.接下来就使用xpath提取数据了"></a>2.接下来就使用xpath提取数据了</h4><p>“””先不要管乱码问题待会解决”””</p><p>通过观察层级结构,我们使用xpath语法  &#x2F;&#x2F;div[@class&#x3D;”muye-reader-content noselect”]&#x2F;div&#x2F;&#x2F;p   获得文章内容,</p><p>同时保存了章节标题  &#x2F;&#x2F;h1[@class &#x3D; “muye-reader-title”],先把这一部分内容获取到</p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>title <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1[@class = "muye-reader-title"]/text()'</span><span class="token punctuation">)</span>content_tags <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="muye-reader-content noselect"]/div//p/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content_tags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> content_tag <span class="token keyword">in</span> content_tags<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>content_tag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126220945788.png" alt="image-20240126220945788"></p><p>获取内容如图,具有乱码</p><p>通过对网页结构分析,发现文字有一些超出了编码范围,于是可以推断出,字体暗藏玄机,找到网页字体文件后,下载到本地,用Fontforge打开,发现只从e3e8到e55b有文字,所以可以得出番茄使用了两套字体加载文本内容,当字符超出一定范围,就使用另一种</p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126221219344.png" alt="image-20240126221219344"></p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126221529195.png" alt="image-20240126221529195"></p><p>于是这一段代码为:</p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">CODE_ST <span class="token operator">=</span> <span class="token number">58344</span>  <span class="token comment"># 十六进制e3e8的十进制</span>CODE_ED <span class="token operator">=</span> <span class="token number">58715</span>  <span class="token comment"># 十六进制e55b的十进制</span>charset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'在'</span><span class="token punctuation">,</span> <span class="token string">'主'</span><span class="token punctuation">,</span> <span class="token string">'特'</span><span class="token punctuation">,</span> <span class="token string">'家'</span><span class="token punctuation">,</span> <span class="token string">'军'</span><span class="token punctuation">,</span> <span class="token string">'然'</span><span class="token punctuation">,</span> <span class="token string">'表'</span><span class="token punctuation">,</span> <span class="token string">'场'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'要'</span><span class="token punctuation">,</span> <span class="token string">'只'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'别'</span><span class="token punctuation">,</span> <span class="token string">'还'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span>        <span class="token string">'现'</span><span class="token punctuation">,</span> <span class="token string">'儿'</span><span class="token punctuation">,</span> <span class="token string">'岁'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'此'</span><span class="token punctuation">,</span> <span class="token string">'象'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'出'</span><span class="token punctuation">,</span> <span class="token string">'战'</span><span class="token punctuation">,</span> <span class="token string">'工'</span><span class="token punctuation">,</span> <span class="token string">'相'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'首'</span><span class="token punctuation">,</span> <span class="token string">'失'</span><span class="token punctuation">,</span> <span class="token string">'世'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span>        <span class="token string">'都'</span><span class="token punctuation">,</span> <span class="token string">'平'</span><span class="token punctuation">,</span> <span class="token string">'文'</span><span class="token punctuation">,</span> <span class="token string">'什'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'将'</span><span class="token punctuation">,</span> <span class="token string">'真'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'那'</span><span class="token punctuation">,</span> <span class="token string">'当'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'会'</span><span class="token punctuation">,</span> <span class="token string">'立'</span><span class="token punctuation">,</span> <span class="token string">'些'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'十'</span><span class="token punctuation">,</span> <span class="token string">'张'</span><span class="token punctuation">,</span>        <span class="token string">'学'</span><span class="token punctuation">,</span> <span class="token string">'气'</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'两'</span><span class="token punctuation">,</span> <span class="token string">'命'</span><span class="token punctuation">,</span> <span class="token string">'全'</span><span class="token punctuation">,</span> <span class="token string">'后'</span><span class="token punctuation">,</span> <span class="token string">'东'</span><span class="token punctuation">,</span> <span class="token string">'性'</span><span class="token punctuation">,</span> <span class="token string">'通'</span><span class="token punctuation">,</span> <span class="token string">'被'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'它'</span><span class="token punctuation">,</span> <span class="token string">'乐'</span><span class="token punctuation">,</span> <span class="token string">'接'</span><span class="token punctuation">,</span> <span class="token string">'而'</span><span class="token punctuation">,</span> <span class="token string">'感'</span><span class="token punctuation">,</span>        <span class="token string">'车'</span><span class="token punctuation">,</span> <span class="token string">'山'</span><span class="token punctuation">,</span> <span class="token string">'公'</span><span class="token punctuation">,</span> <span class="token string">'了'</span><span class="token punctuation">,</span> <span class="token string">'常'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'何'</span><span class="token punctuation">,</span> <span class="token string">'可'</span><span class="token punctuation">,</span> <span class="token string">'话'</span><span class="token punctuation">,</span> <span class="token string">'先'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'叫'</span><span class="token punctuation">,</span> <span class="token string">'轻'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'士'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'着'</span><span class="token punctuation">,</span> <span class="token string">'变'</span><span class="token punctuation">,</span>        <span class="token string">'尔'</span><span class="token punctuation">,</span> <span class="token string">'快'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'个'</span><span class="token punctuation">,</span> <span class="token string">'说'</span><span class="token punctuation">,</span> <span class="token string">'少'</span><span class="token punctuation">,</span> <span class="token string">'色'</span><span class="token punctuation">,</span> <span class="token string">'里'</span><span class="token punctuation">,</span> <span class="token string">'安'</span><span class="token punctuation">,</span> <span class="token string">'花'</span><span class="token punctuation">,</span> <span class="token string">'远'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'难'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">,</span> <span class="token string">'放'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'报'</span><span class="token punctuation">,</span> <span class="token string">'认'</span><span class="token punctuation">,</span>        <span class="token string">'面'</span><span class="token punctuation">,</span> <span class="token string">'道'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'克'</span><span class="token punctuation">,</span> <span class="token string">'地'</span><span class="token punctuation">,</span> <span class="token string">'度'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'机'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'民'</span><span class="token punctuation">,</span> <span class="token string">'写'</span><span class="token punctuation">,</span> <span class="token string">'把'</span><span class="token punctuation">,</span> <span class="token string">'万'</span><span class="token punctuation">,</span> <span class="token string">'同'</span><span class="token punctuation">,</span> <span class="token string">'水'</span><span class="token punctuation">,</span> <span class="token string">'新'</span><span class="token punctuation">,</span> <span class="token string">'没'</span><span class="token punctuation">,</span>        <span class="token string">'书'</span><span class="token punctuation">,</span> <span class="token string">'电'</span><span class="token punctuation">,</span> <span class="token string">'吃'</span><span class="token punctuation">,</span> <span class="token string">'像'</span><span class="token punctuation">,</span> <span class="token string">'斯'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'为'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'几'</span><span class="token punctuation">,</span> <span class="token string">'日'</span><span class="token punctuation">,</span> <span class="token string">'教'</span><span class="token punctuation">,</span> <span class="token string">'看'</span><span class="token punctuation">,</span> <span class="token string">'但'</span><span class="token punctuation">,</span> <span class="token string">'第'</span><span class="token punctuation">,</span> <span class="token string">'加'</span><span class="token punctuation">,</span> <span class="token string">'候'</span><span class="token punctuation">,</span> <span class="token string">'作'</span><span class="token punctuation">,</span>        <span class="token string">'上'</span><span class="token punctuation">,</span> <span class="token string">'拉'</span><span class="token punctuation">,</span> <span class="token string">'住'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">'法'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'事'</span><span class="token punctuation">,</span> <span class="token string">'应'</span><span class="token punctuation">,</span> <span class="token string">'位'</span><span class="token punctuation">,</span> <span class="token string">'利'</span><span class="token punctuation">,</span> <span class="token string">'你'</span><span class="token punctuation">,</span> <span class="token string">'声'</span><span class="token punctuation">,</span> <span class="token string">'身'</span><span class="token punctuation">,</span> <span class="token string">'国'</span><span class="token punctuation">,</span> <span class="token string">'问'</span><span class="token punctuation">,</span> <span class="token string">'马'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token string">'他'</span><span class="token punctuation">,</span>        <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">,</span> <span class="token string">'父'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'边'</span><span class="token punctuation">,</span> <span class="token string">'美'</span><span class="token punctuation">,</span> <span class="token string">'对'</span><span class="token punctuation">,</span> <span class="token string">'所'</span><span class="token punctuation">,</span> <span class="token string">'金'</span><span class="token punctuation">,</span> <span class="token string">'活'</span><span class="token punctuation">,</span> <span class="token string">'回'</span><span class="token punctuation">,</span> <span class="token string">'意'</span><span class="token punctuation">,</span> <span class="token string">'到'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span>        <span class="token string">'从'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'知'</span><span class="token punctuation">,</span> <span class="token string">'又'</span><span class="token punctuation">,</span> <span class="token string">'内'</span><span class="token punctuation">,</span> <span class="token string">'因'</span><span class="token punctuation">,</span> <span class="token string">'点'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">'定'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'正'</span><span class="token punctuation">,</span> <span class="token string">'或'</span><span class="token punctuation">,</span> <span class="token string">'夫'</span><span class="token punctuation">,</span> <span class="token string">'向'</span><span class="token punctuation">,</span> <span class="token string">'德'</span><span class="token punctuation">,</span> <span class="token string">'听'</span><span class="token punctuation">,</span>        <span class="token string">'更'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'得'</span><span class="token punctuation">,</span> <span class="token string">'告'</span><span class="token punctuation">,</span> <span class="token string">'并'</span><span class="token punctuation">,</span> <span class="token string">'本'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'过'</span><span class="token punctuation">,</span> <span class="token string">'记'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'让'</span><span class="token punctuation">,</span> <span class="token string">'打'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'人'</span><span class="token punctuation">,</span> <span class="token string">'就'</span><span class="token punctuation">,</span> <span class="token string">'者'</span><span class="token punctuation">,</span> <span class="token string">'去'</span><span class="token punctuation">,</span> <span class="token string">'原'</span><span class="token punctuation">,</span> <span class="token string">'满'</span><span class="token punctuation">,</span>        <span class="token string">'体'</span><span class="token punctuation">,</span> <span class="token string">'做'</span><span class="token punctuation">,</span> <span class="token string">'经'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'走'</span><span class="token punctuation">,</span> <span class="token string">'如'</span><span class="token punctuation">,</span> <span class="token string">'孩'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'给'</span><span class="token punctuation">,</span> <span class="token string">'使'</span><span class="token punctuation">,</span> <span class="token string">'物'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'最'</span><span class="token punctuation">,</span> <span class="token string">'笑'</span><span class="token punctuation">,</span> <span class="token string">'部'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'员'</span><span class="token punctuation">,</span> <span class="token string">'等'</span><span class="token punctuation">,</span>        <span class="token string">'受'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'行'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'条'</span><span class="token punctuation">,</span> <span class="token string">'果'</span><span class="token punctuation">,</span> <span class="token string">'动'</span><span class="token punctuation">,</span> <span class="token string">'光'</span><span class="token punctuation">,</span> <span class="token string">'门'</span><span class="token punctuation">,</span> <span class="token string">'头'</span><span class="token punctuation">,</span> <span class="token string">'见'</span><span class="token punctuation">,</span> <span class="token string">'往'</span><span class="token punctuation">,</span> <span class="token string">'自'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">,</span> <span class="token string">'成'</span><span class="token punctuation">,</span> <span class="token string">'处'</span><span class="token punctuation">,</span> <span class="token string">'天'</span><span class="token punctuation">,</span> <span class="token string">'能'</span><span class="token punctuation">,</span>        <span class="token string">'于'</span><span class="token punctuation">,</span> <span class="token string">'名'</span><span class="token punctuation">,</span> <span class="token string">'其'</span><span class="token punctuation">,</span> <span class="token string">'发'</span><span class="token punctuation">,</span> <span class="token string">'总'</span><span class="token punctuation">,</span> <span class="token string">'母'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'死'</span><span class="token punctuation">,</span> <span class="token string">'手'</span><span class="token punctuation">,</span> <span class="token string">'入'</span><span class="token punctuation">,</span> <span class="token string">'路'</span><span class="token punctuation">,</span> <span class="token string">'进'</span><span class="token punctuation">,</span> <span class="token string">'心'</span><span class="token punctuation">,</span> <span class="token string">'来'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'时'</span><span class="token punctuation">,</span> <span class="token string">'力'</span><span class="token punctuation">,</span> <span class="token string">'多'</span><span class="token punctuation">,</span>        <span class="token string">'开'</span><span class="token punctuation">,</span> <span class="token string">'己'</span><span class="token punctuation">,</span> <span class="token string">'许'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'至'</span><span class="token punctuation">,</span> <span class="token string">'由'</span><span class="token punctuation">,</span> <span class="token string">'很'</span><span class="token punctuation">,</span> <span class="token string">'界'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'小'</span><span class="token punctuation">,</span> <span class="token string">'与'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'想'</span><span class="token punctuation">,</span> <span class="token string">'代'</span><span class="token punctuation">,</span> <span class="token string">'么'</span><span class="token punctuation">,</span> <span class="token string">'分'</span><span class="token punctuation">,</span> <span class="token string">'生'</span><span class="token punctuation">,</span> <span class="token string">'口'</span><span class="token punctuation">,</span>        <span class="token string">'再'</span><span class="token punctuation">,</span> <span class="token string">'妈'</span><span class="token punctuation">,</span> <span class="token string">'望'</span><span class="token punctuation">,</span> <span class="token string">'次'</span><span class="token punctuation">,</span> <span class="token string">'西'</span><span class="token punctuation">,</span> <span class="token string">'风'</span><span class="token punctuation">,</span> <span class="token string">'种'</span><span class="token punctuation">,</span> <span class="token string">'带'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'实'</span><span class="token punctuation">,</span> <span class="token string">'情'</span><span class="token punctuation">,</span> <span class="token string">'才'</span><span class="token punctuation">,</span> <span class="token string">'这'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'神'</span><span class="token punctuation">,</span> <span class="token string">'格'</span><span class="token punctuation">,</span>        <span class="token string">'长'</span><span class="token punctuation">,</span> <span class="token string">'觉'</span><span class="token punctuation">,</span> <span class="token string">'间'</span><span class="token punctuation">,</span> <span class="token string">'年'</span><span class="token punctuation">,</span> <span class="token string">'眼'</span><span class="token punctuation">,</span> <span class="token string">'无'</span><span class="token punctuation">,</span> <span class="token string">'不'</span><span class="token punctuation">,</span> <span class="token string">'亲'</span><span class="token punctuation">,</span> <span class="token string">'关'</span><span class="token punctuation">,</span> <span class="token string">'结'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'友'</span><span class="token punctuation">,</span> <span class="token string">'信'</span><span class="token punctuation">,</span> <span class="token string">'下'</span><span class="token punctuation">,</span> <span class="token string">'却'</span><span class="token punctuation">,</span> <span class="token string">'重'</span><span class="token punctuation">,</span> <span class="token string">'己'</span><span class="token punctuation">,</span> <span class="token string">'老'</span><span class="token punctuation">,</span>        <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'音'</span><span class="token punctuation">,</span> <span class="token string">'字'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'呢'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'之'</span><span class="token punctuation">,</span> <span class="token string">'前'</span><span class="token punctuation">,</span> <span class="token string">'高'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'目'</span><span class="token punctuation">,</span> <span class="token string">'太'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'起'</span><span class="token punctuation">,</span> <span class="token string">'稜'</span><span class="token punctuation">,</span> <span class="token string">'她'</span><span class="token punctuation">,</span> <span class="token string">'也'</span><span class="token punctuation">,</span>        <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'用'</span><span class="token punctuation">,</span> <span class="token string">'方'</span><span class="token punctuation">,</span> <span class="token string">'子'</span><span class="token punctuation">,</span> <span class="token string">'英'</span><span class="token punctuation">,</span> <span class="token string">'每'</span><span class="token punctuation">,</span> <span class="token string">'理'</span><span class="token punctuation">,</span> <span class="token string">'便'</span><span class="token punctuation">,</span> <span class="token string">'西'</span><span class="token punctuation">,</span> <span class="token string">'数'</span><span class="token punctuation">,</span> <span class="token string">'期'</span><span class="token punctuation">,</span> <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'外'</span><span class="token punctuation">,</span> <span class="token string">'样'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'海'</span><span class="token punctuation">,</span> <span class="token string">'们'</span><span class="token punctuation">,</span>        <span class="token string">'任'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">interpreter</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 原字符减去e338获取到另一套字体的该编码字符</span> bias <span class="token operator">=</span> cc <span class="token operator">-</span> CODE_ST <span class="token keyword">if</span> charset<span class="token punctuation">[</span>bias<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">:</span>  <span class="token comment"># 特殊处理</span>     <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token keyword">return</span> charset<span class="token punctuation">[</span>bias<span class="token punctuation">]</span><span class="token comment"># 获取小说章节</span><span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> content_tag <span class="token keyword">in</span> content_tags<span class="token punctuation">:</span> para <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> content_tag<span class="token punctuation">:</span>     cc <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>     <span class="token keyword">if</span> CODE_ST <span class="token operator">&lt;=</span> cc <span class="token operator">&lt;=</span> CODE_ED<span class="token punctuation">:</span>         ch <span class="token operator">=</span> interpreter<span class="token punctuation">(</span>cc<span class="token punctuation">)</span>         para <span class="token operator">+=</span> ch     <span class="token keyword">else</span><span class="token punctuation">:</span>         para <span class="token operator">+=</span> char  <span class="token comment"># 这里应该是拼接字符，而不是其ASCII码</span> content<span class="token punctuation">.</span>append<span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">for</span> para <span class="token keyword">in</span> content<span class="token punctuation">:</span> fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'    '</span><span class="token punctuation">)</span> fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>para<span class="token punctuation">)</span> fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>到这按理说应该去找底部下一章节按钮的超链接,但是番茄给我们反爬了,没有有用信息</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">只能去网络接口里面找,在点击下一张之后,发现网络请求中有一个请求返回的json数据不仅有内容还有下一页的**ItemID**,所以解析获得,然后拼接到本身url(替换原本的id,  *注意:原本的url里面的参数可以删去部分,不影响返回,最后的url是这样*https://fanqienovel.com/api/reader/full?itemId=6893843740834660878)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意,经过实验下一张的编号是itemId,而不是nextitemId</p><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240126232926232-1706330347599-1.png"></p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">cap01_url <span class="token operator">=</span> <span class="token string">'https://fanqienovel.com/api/reader/full?itemId=6893843740834660878'</span><span class="token comment"># cap02_url = 'https://fanqienovel.com/reader/6893843740834660878?enter_from=reader'</span><span class="token comment"># cap03_url = 'https://fanqienovel.com/reader/6893843740910158344?enter_from=reader'</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'人类不死以后.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>            <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0'</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>cap01_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>json_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 解析JSON数据为Python字典</span>next_id <span class="token operator">=</span> json_obj<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'chapterData'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'nextItemId'</span><span class="token punctuation">]</span> <span class="token comment"># 解嵌套</span>next_url <span class="token operator">=</span> <span class="token string">'https://fanqienovel.com/api/reader/full?itemId='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>next_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>到此,所以需要的信息已经爬完了,只需要处理循环逻辑,保存文件就行</p><p>最后全部代码如下,做了一些修改</p><blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">"""# Time: 2024/1/22/22:59# Theme: 爬虫程序# Author: 0zxm# E-mail: m15813109801@163.com# Dependencies: urllib.request, lxml"""import requestsfrom lxml import etreeCODE_ST = 58344  # 十六进制e3e8的十进制CODE_ED = 58715  # 十六进制e55b的十进制charset = ['D', '在', '主', '特', '家', '军', '然', '表', '场', '4', '要', '只', 'v', '和', '?', '6', '别', '还', 'g',     '现', '儿', '岁', '?', '?', '此', '象', '月', '3', '出', '战', '工', '相', 'o', '男', '首', '失', '世', 'F',     '都', '平', '文', '什', 'V', 'O', '将', '真', 'T', '那', '当', '?', '会', '立', '些', 'u', '是', '十', '张',     '学', '气', '大', '爱', '两', '命', '全', '后', '东', '性', '通', '被', '1', '它', '乐', '接', '而', '感',     '车', '山', '公', '了', '常', '以', '何', '可', '话', '先', 'p', 'i', '叫', '轻', 'M', '士', 'w', '着', '变',     '尔', '快', 'l', '个', '说', '少', '色', '里', '安', '花', '远', '7', '难', '师', '放', 't', '报', '认',     '面', '道', 'S', '?', '克', '地', '度', 'I', '好', '机', 'U', '民', '写', '把', '万', '同', '水', '新', '没',     '书', '电', '吃', '像', '斯', '5', '为', 'y', '白', '几', '日', '教', '看', '但', '第', '加', '候', '作',     '上', '拉', '住', '有', '法', 'r', '事', '应', '位', '利', '你', '声', '身', '国', '问', '马', '女', '他',     'Y', '比', '父', 'x', 'A', 'H', 'N', 's', 'X', '边', '美', '对', '所', '金', '活', '回', '意', '到', 'z',     '从', 'j', '知', '又', '内', '因', '点', 'Q', '三', '定', '8', 'R', 'b', '正', '或', '夫', '向', '德', '听',     '更', '?', '得', '告', '并', '本', 'q', '过', '记', 'L', '让', '打', 'f', '人', '就', '者', '去', '原', '满',     '体', '做', '经', 'K', '走', '如', '孩', 'c', 'G', '给', '使', '物', '?', '最', '笑', '部', '?', '员', '等',     '受', 'k', '行', '一', '条', '果', '动', '光', '门', '头', '见', '往', '自', '解', '成', '处', '天', '能',     '于', '名', '其', '发', '总', '母', '的', '死', '手', '入', '路', '进', '心', '来', 'h', '时', '力', '多',     '开', '己', '许', 'd', '至', '由', '很', '界', 'n', '小', '与', 'Z', '想', '代', '么', '分', '生', '口',     '再', '妈', '望', '次', '西', '风', '种', '带', 'J', '?', '实', '情', '才', '这', '?', 'E', '我', '神', '格',     '长', '觉', '间', '年', '眼', '无', '不', '亲', '关', '结', '0', '友', '信', '下', '却', '重', '己', '老',     '2', '音', '字', 'm', '呢', '明', '之', '前', '高', 'P', 'B', '目', '太', 'e', '9', '起', '稜', '她', '也',     'W', '用', '方', '子', '英', '每', '理', '便', '西', '数', '期', '中', 'C', '外', '样', 'a', '海', '们',     '任']# 解析章节加密内容def interpreter(cc):  # 原字符减去e338获取到另一套字体的该编码字符bias = cc - CODE_STif charset[bias] == '?':  # 特殊处理  return chr(cc)return charset[bias]cap_url = 'https://fanqienovel.com/api/reader/full?itemId=6893843740742386183'cap02_url = 'https://fanqienovel.com/reader/6893843740910158344'# cap02_url = 'https://fanqienovel.com/reader/6893843740834660878?enter_from=reader'# cap03_url = 'https://fanqienovel.com/reader/6893843740910158344?enter_from=reader'fp = open('人类不死以后.txt', 'a', encoding='utf-8')headers = &#123;'User-Agent':         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0'&#125;"""第一章爬取"""content_url = 'http://fanqienovel.com/reader/6893843740742386183'response = requests.get(url=content_url, headers=headers)tree = etree.HTML(response.text)title = tree.xpath('//h1[@class = "muye-reader-title"]/text()')fp.write(title[0] + '\n')content_tags = tree.xpath('//div[@class="muye-reader-content noselect"]/div//p/text()')# 获取小说章节# print(title)content = []for content_tag in content_tags:para = ''for char in content_tag:  cc = ord(char)  if CODE_ST &lt;= cc &lt;= CODE_ED:      ch = interpreter(cc)      para += ch  else:      para += char  # 这里应该是拼接字符，而不是其ASCII码content.append(para)# print(content)print('正在下载第1章')for para in content:fp.write('    ')fp.write(para)fp.write('\n')index = 1while True:# TODO:获取下一章节IDresponse = requests.get(url=cap_url, headers=headers)data = response.json()json_obj = response.json()  # 解析JSON数据为Python字典next_id = json_obj['data']['chapterData']['nextItemId']  # 解嵌套next_id_url = 'https://fanqienovel.com/api/reader/full?itemId=' + str(next_id)next_content_url = 'http://fanqienovel.com/reader/' + str(next_id)# print(next_id_url)cap_url = next_id_url  # 迭代更新获取下一章id的url# TODO:获取每章节内容response = requests.get(url=next_content_url, headers=headers)tree = etree.HTML(response.text)title = tree.xpath('//h1[@class = "muye-reader-title"]/text()')fp.write(title[0] + '\n')content_tags = tree.xpath('//div[@class="muye-reader-content noselect"]/div//p/text()')# print(len(content_tags))# 获取小说章节content = []for content_tag in content_tags:  para = ''  for char in content_tag:      cc = ord(char)      if CODE_ST &lt;= cc &lt;= CODE_ED:          ch = interpreter(cc)          para += ch      else:          para += char  # 这里应该是拼接字符，而不是其ASCII码  content.append(para)# print(content)index += 1for para in content:  fp.write('    ')  fp.write(para)  fp.write('\n')print('正在下载第' + str(index) + '章')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="/2024/06/21/pa-qu-fan-qie-xiao-shuo/image-20240127095944844-1706320789213-1.png" alt="image-20240127095944844"></p><p>特别鸣谢</p><p>在写程序的时候,参考了一些文章,感谢</p><p>参考链接:</p><ul><li><a href="https://blog.csdn.net/m0_61248085/article/details/134538792">python爬虫番茄小说CSDN博客</a></li><li><a href="https://www.bilibili.com/video/BV1Pj41197rh">https://www.bilibili.com/video/BV1Pj41197rh</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> MD5加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2024/06/21/hexo-da-jian-bo-ke/"/>
      <url>/2024/06/21/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="安装-Git-和-NodeJs"><a href="#安装-Git-和-NodeJs" class="headerlink" title="安装 Git 和 NodeJs"></a>安装 Git 和 NodeJs</h2><p>这是我搭建的时候对照的视频链接<a href="https://www.bilibili.com/video/BV1Eg41157tL/">教程]Hexo &amp; Github 搭建自己的专属博客_哔哩哔哩_bilibili</a></p><ul><li><p>首先要安装</p><ul><li><p>在 Windows 上使用 Git，可以从 Git 官网直接<a href="https://git-scm.com/downloads%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%E5%AE%89">https://git-scm.com/downloads，然后按默认选项安</a> 装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就 说明 Git 安装成功！</p></li><li><p>在 Git 中绑定 Github 账号，打开“Git Bash”，在命令框中依次输入两行命令：</p></li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name “Your Name”<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email email@example.com<span class="token comment"># 其中Your Name和email@example.com替换成上面注册时的账户名和邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>和</p><ul><li><p>由于 Hexo 是基于 Node.js 驱动的一款博客框架，所以安装 NodeJs <a href="https://nodejs.org/en/downl">https://nodejs.org/en/downl</a></p></li><li><p>安装之后可以输入以下命令查看是否安装成功:</p></li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version <span class="token function">node</span> <span class="token parameter variable">-v</span> <span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>出现版本号则安装配置成功</p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/image-20240126185511681.png" alt="image-20240126185511681"></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>以上环境准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Hexo 完成后，在指定文件夹下打开”Git Bash”，再执行下列命令，Hexo 将会在指定文件夹中新建所须要的文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myBlog<span class="token builtin class-name">cd</span> myBlog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若是上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 回车就能够预览效果了。</p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240126193709.png"></p><h2 id="加载主题"><a href="#加载主题" class="headerlink" title="加载主题"></a>加载主题</h2><p>大家可以去官网上找自己喜欢的主题下载<a href="https://hexo.io/themes/%EF%BC%8C%E8%87%AA%E5%B7%B1%E9%87%87%E7%94%A8%E7%9A%84%E4%B8%BB%E9%A2%98%E6%98%AFhttps://github.com/Siricee/hexo-theme-Chic%EF%BC%8C%E8%BF%99%E6%AC%BE%E6%9C%89%E6%98%8E%E6%9A%97%E4%B8%A4%E7%A7%8D%E9%A2%9C%E8%89%B2%E3%80%82">https://hexo.io/themes/，自己采用的主题是https://github.com/Siricee/hexo-theme-Chic，这款有明暗两种颜色。</a></p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240126193855.png"></p><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><p>修改在主题文件夹下的_config.ym1 文件，完成自己个人的配置，</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># Header 主页面标题navname: Bentham's Blog# navigatior items 四个文件归类nav:Posts: /archivesCategories: /categoryTags: /tagAbout: /about# favicon 图标favicon: /favicon.ico# Profile 中间显示名字nickname: Jeremy Bentham### this variable is MarkDown form.# 个人描述，可以修改成自己要显示的句子description: Lorem ipsum dolor sit amet, **consectetur adipiscing elit.**&lt;br>Fusce eget urna vitae velit *eleifend interdum at ac* nisi.# 个人头像图片avatar: /image/avatar.jpeg# main menu navigation## links key words should not be changed.## Complete url after key words.## Unused key can be commented out.# 下方超链接links:Blog: /archives# Category:# Tags:# Link:# Resume:# Publish:# Trophy:# Gallery:# RSS:# AliPay:ZhiHu: https://www.zhihu.com/people/sirice# LinkedIn:# FaceBook:# Twitter:# Skype:# CodeSandBox:# CodePen:# Sketch:# Gitlab:# Dribbble:Instagram:Reddit:# YouTube:# QQ:# Weibo:# WeChat:Github: https://github.com/Siricee# how links show: you have 2 choice--text or icon. 图标 or 文字links_text_enable: falselinks_icon_enable: true# Post page## Post_metapost_meta_enable: truepost_author_enable: truepost_date_enable: truepost_category_enable: true## Post copyrightpost_copyright_enable: truepost_copyright_author_enable: truepost_copyright_permalink_enable: truepost_copyright_license_enable: truepost_copyright_license_text: Copyright (c) 2019 &lt;ahref="http://creativecommons.org/licenses/by-nc/4.0/">CC-BY-NC-4.0&lt;/a>LICENSEpost_copyright_slogan_enable: truepost_copyright_slogan_text: Do you believe in &lt;strong>DESTINY&lt;/strong>?## tocpost_toc_enable: true# Pagepage_title_enable: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: MMMM D, YYYYtime_format: H:mm:ss# stylesheets loaded in the &lt;head>stylesheets:- /css/style.css# scripts loaded in the end of the bodyscripts:- /js/script.js- /js/tocbot.min.js# tscanlin/tocbot: Build a table of contents from headings in an HTMLdocument.# https://github.com/tscanlin/tocbot# plugin functions## Mathjax: Math Formula Support## https://www.mathjax.org# 数学公式mathjax:enable: trueimport: demand # global or demand## global: all pages will load mathjax,this will degrade performance andsome grammers may be parsed wrong.## demand: Recommend option,if your post need fomula, you can declare'mathjax: true' in Front-matter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将博客部署在-GitHub-上"><a href="#将博客部署在-GitHub-上" class="headerlink" title="将博客部署在 GitHub 上"></a>将博客部署在 GitHub 上</h2><ol><li>点击 Start project 或者下面的 new repository 建立一个新的仓库，注意 Github 仅能使用一个同 名仓库的代码托管一个静态站点，这里. 注意仓库名一定要是： 用户名.github.io</li><li>配置 SSH key ，要使用 git 工具首先要配置一下 SSH key，为部署本地博客到 Github 作准备。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"邮箱地址"</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">'上面的邮箱'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按照提示完成三次回车，便可生成 ssh key，采用以下指令也可以查看自己的 ssh：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首次使用还须要确认并添加主机到本机 SSH 可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证实添加成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登陆 Github 上添加刚刚生成的 SSH key，按如下步骤添加，右上角点击头像-&gt; settings -&gt; SSH and GPG keys，建立一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认建立，这样在你 的 SSH keys 列表里就会看到你刚刚添加的密钥。</p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/image-20240126194544764.png" alt="image-20240126194544764"></p><h2 id="SSH-无法添加信任的主机列表"><a href="#SSH-无法添加信任的主机列表" class="headerlink" title="!!!SSH 无法添加信任的主机列表"></a>!!!SSH 无法添加信任的主机列表</h2><p>这是我搭建博客中遇到的最大的问题,一开始我以为是公钥添加问题,中途尝试了许多方法</p><ol><li>运行 npm install 时，卡在 sill idealTree buildDeps 没有反应，内心 OS:明明早就配过淘宝镜像源，果然没用<br>检查 node 和 npm，发现版本不匹配，按官网匹配表，npm 版本太高，于是升级 node，还是不行,npm 失灵<br>删除.npmrc<br>清理缓存 npm cache clean –force</li><li>都不行,最后排查才发现,忘记把 github 主机添加到本机 ssh 可信列表</li></ol><p>第一次使用要把 github 主机添加到本机 ssh 可信列表,</p><p>但是添加的时候有可能会失败,这是官方文档中的原文</p><p>“有时，防火墙会完全拒绝允许 SSH 连接。 如果无法选择使用<a href="https://docs.github.com/zh/github/getting-started-with-github/caching-your-github-credentials-in-git">具有凭据缓存的 HTTPS 克隆</a>，可以尝试使用通过 HTTPS 端口建立的 SSH 连接克隆”</p><p>那么怎么解决呢,对照官方文档就能解决,大致步骤如下,建议对照详细官方文档<br>最终解决方法<a href="https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">HTTPS 端口使用 SSH</a></p><p>1.在控制台输入以下命令查看是否能连接到 github,如果回复为 Hi xxxxx! 表示连接成功,已加入可信列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span class="token operator">></span> Hi USERNAME<span class="token operator">!</span> You<span class="token string">'ve successfully authenticated, but GitHub does not provide shell access.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果不行,尝试一下命令: ssh -T -p 443ssh:&#x2F;&#x2F;<a href="mailto:&#x67;&#105;&#116;&#64;&#x73;&#115;&#x68;&#x2e;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x73;&#115;&#x68;&#x2e;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>,这个可以按照提示建立许可连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-p</span> <span class="token number">443</span> git@ssh.github.com<span class="token operator">></span> Hi <span class="token string">'你的id'</span><span class="token operator">!</span><span class="token string">" You've successfully authenticated, but GitHub does not provide shell access."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你能在端口 443 上通过 SSH 连接到 <code>git@ssh.github.com</code>，则可覆盖你的 SSH 设置来强制与 GitHub.com 的任何连接均通过该服务器和端口运行。</p><p>到此为止,问题解决得差不多了</p><p>在输入命令 git clone ssh:&#x2F;&#x2F;<a href="mailto:&#103;&#105;&#116;&#x40;&#x73;&#x73;&#104;&#x2e;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#x73;&#x73;&#104;&#x2e;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a>:443&#x2F;0zxm&#x2F;0zxm.github.io 时就能够正常 clone 仓库, 但是每次都输入更长的 url 难免繁琐,所以可以在你生成密钥的文件夹内新建一个 config 文件,输入以下内容保存:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Host github.com Hostname ssh.github.com Port 443 User git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以通过再次连接到 GitHub.com 来测试这是否有效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span class="token operator">></span> Hi USERNAME<span class="token operator">!</span><span class="token string">" You've successfully authenticated, but GitHub does not"</span><span class="token operator">></span> provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>此时，本地和 Github 的工作做得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署教程。</p></li><li><p>先不着急，部署以前还须要修改配置和安装部署插件。</p></li><li><p>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上以下配置。</p></li><li><p>第二要安装一个部署插件 hexo-deployer-git，打开“Git Bach”，输如以下指令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最后执行如下两条命令就能够部署上传啦，如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment"># 先生成</span>hexo d <span class="token comment"># 部署到Github上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>g 是 generate 缩写，d 是 deploy 缩写 这时用浏览器输入 用户名.github.io 就可以访问刚才的网站</li></ul><h2 id="博客-Git-常用指令"><a href="#博客-Git-常用指令" class="headerlink" title="博客 Git 常用指令"></a>博客 Git 常用指令</h2><ul><li><p>npm cache clean –force 清理缓存</p></li><li><p>hexo g 生成</p></li><li><p>hexo sever 使用本地服务器构建网页 一般地址是 localhost:4000&#x2F;</p></li><li><p>hexo deploy 上传到 github 项目</p></li><li><p>hexo clean</p></li></ul><h3 id="清除空白-categorys-和-tags"><a href="#清除空白-categorys-和-tags" class="headerlink" title="清除空白 categorys 和 tags"></a>清除空白 categorys 和 tags</h3><p>在发布文章后，有时候会发现标签或分类的描述不够准确，需要修改 tags 或者 categories 的内容。</p><p>但是，当某个标签被完全替代，没有文章使用这个标签之后，会发现在标签列表里还是会出现这个标签，点击进去却并没有内容，这非常影响使用体验。</p><p>如何清除无用的标签索引呢，可以使用<code>hexo clean</code>命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo d <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>命令<code>hexo s -g</code>执行中时，命令<code>hexo clean</code>会没有效果，需要先终止 hexo server 服务</p><h2 id="写带有图片的文章"><a href="#写带有图片的文章" class="headerlink" title="写带有图片的文章"></a>写带有图片的文章</h2><p><a href="https://blog.csdn.net/qq_41907806/article/details/109064385">hexo 博客中如何插入图片-CSDN 博客</a></p><p><img src="/2024/06/21/hexo-da-jian-bo-ke/image-20240127141305597-1706432584388-1.png" alt="image-20240127141305597"></p><p>然后记得在 hexo 的 source 文件夹下找到该.md 文件,删除每一个图片路径的文章名</p><h2 id="注释-bug"><a href="#注释-bug" class="headerlink" title="注释 bug"></a>注释 bug</h2><p><img src="/2024/06/21/hexo-da-jian-bo-ke/%E6%B3%A8%E9%87%8Abug.png" alt="alt text"></p><p><a href="https://blog.csdn.net/qq_39698985/article/details/115448040">解决方法</a></p><h2 id="静态页面-src-html"><a href="#静态页面-src-html" class="headerlink" title="静态页面 src.html"></a>静态页面 src.html</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>我使用 hexo 搭建博客,我自己搭建一个 src.html,为什么还会有博客的格式,怎么去除</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><p>在使用 Hexo 搭建博客时，如果你创建了一个自定义的 HTML 文件（例如<code>src.html</code>），但发现它仍然包含了博客的格式，这可能是因为 Hexo 的布局或主题设置影响了该文件的渲染。要去除这些格式，你可以尝试以下几种方法：</p><h4 id="方法一：使用纯-HTML-文件"><a href="#方法一：使用纯-HTML-文件" class="headerlink" title="方法一：使用纯 HTML 文件"></a>方法一：使用纯 HTML 文件</h4><p>确保你的<code>src.html</code>文件是一个纯 HTML 文件，而不是 Hexo 的 Markdown 文件。Hexo 的 Markdown 文件会经过 Hexo 的渲染引擎处理，而纯 HTML 文件则不会。</p><h4 id="方法二：禁用布局"><a href="#方法二：禁用布局" class="headerlink" title="方法二：禁用布局"></a>方法二：禁用布局</h4><p>你可以在文件的 Front-matter 中禁用布局。Front-matter 是位于文件顶部的一段 YAML 或 JSON 格式的配置，用于指定文件的元数据。你可以在<code>src.html</code>文件的顶部添加以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，Hexo 就不会应用任何布局到这个文件上。</p><h4 id="方法三：放置在特定目录"><a href="#方法三：放置在特定目录" class="headerlink" title="方法三：放置在特定目录"></a>方法三：放置在特定目录</h4><p>将你的<code>src.html</code>文件放置在 Hexo 的<code>source</code>目录下的一个特定子目录中，例如<code>source/static/src.html</code>。这样可以确保 Hexo 不会自动处理这个文件。</p><h4 id="方法四：修改主题配置"><a href="#方法四：修改主题配置" class="headerlink" title="方法四：修改主题配置"></a>方法四：修改主题配置</h4><p>如果你使用的是某个主题，可能需要修改主题的配置文件（通常是<code>_config.yml</code>），确保它不会影响你的<code>src.html</code>文件。具体配置取决于你使用的主题。</p><h4 id="方法五：手动复制文件"><a href="#方法五：手动复制文件" class="headerlink" title="方法五：手动复制文件"></a>方法五：手动复制文件</h4><p>如果你只是想在生成的站点中包含一个纯 HTML 文件，可以在 Hexo 生成站点后，手动将<code>src.html</code>文件复制到生成的<code>public</code>目录中。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设你的<code>src.html</code>文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Custom Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is a custom HTML page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确保在文件顶部添加 Front-matter：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，Hexo 就不会对这个文件应用任何布局或主题样式。<br>通过以上方法，你应该能够去除 Hexo 博客格式，使你的<code>src.html</code>文件保持纯 HTML 格式。</p><h3 id="静态页面-img-标签的-src-路径问题"><a href="#静态页面-img-标签的-src-路径问题" class="headerlink" title="静态页面 img 标签的 src 路径问题"></a>静态页面 img 标签的 src 路径问题</h3><p>静态页面中,使用了 img 标签的 src 路径,如果是相对路径,那么路径将会被解析错误<br><code>./favicon.png</code>变成<code>src.htm/favicon.png</code><br>导致图片加载不出来,解决方法:</p><ol><li>使用绝对路径,例如: <code>&lt;img src=&quot;https://0zxm.github.io/favicon.png&quot; alt=&quot;logo&quot;&gt;</code></li><li>把图片放入 public 文件夹中的静态 web 资源文件夹中，例如<code>medias</code>,然后使用相对路径,例如: <code>&lt;img src=&quot;/medias/favicon.png&quot; alt=&quot;logo&quot;&gt;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
